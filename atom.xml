<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The Bloom of Youth | 锦瑟华年</title>
  <subtitle>那些刻骨铭心的日子原本就云淡风轻</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kuangqi.me/"/>
  <updated>2016-11-30T15:34:31.575Z</updated>
  <id>http://kuangqi.me/</id>
  
  <author>
    <name>况琪</name>
    <email>hello@kuangqi.me</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Arduino ESLOV深度解析</title>
    <link href="http://kuangqi.me/embedded/in-depth-analysis-on-arduino-eslov/"/>
    <id>http://kuangqi.me/embedded/in-depth-analysis-on-arduino-eslov/</id>
    <published>2016-11-30T15:15:53.000Z</published>
    <updated>2016-11-30T15:34:31.575Z</updated>
    
    <content type="html"><![CDATA[<p>近日来，一款名为ESLOV IoT Invention Kit的产品上线著名众筹网站Kickstarter众筹，众筹目标达到了惊人的425万瑞典克朗（约合人民币323万元），截止发稿时，仅筹集到80余万瑞典克朗，且剩余时间仅7天。不出意外的话，这个项目的众筹会以失败告终。在一个成功率不到4成的众筹网站上，像这样不能打动观众的项目在Kickstarter上比比皆是。Arduino ESLOV IoT Invention Kit在Kickstarter上实在是一个平庸的项目，这个项目要做的东西在外行人看来是一堆奇奇怪怪的电路板，在接触过Arduino的人看来，可能也只是一些简单的Arduino模块。</p>
<p>那今天我为什么要拿这个项目来说事，煞有介事地写一篇长文呢？因为我认为，Arduino ESLOV代表了电子积木发展的趋势，是Arduino从艺术家、工程师群体真正走向教育、科普市场的冲锋号，是下一代电子积木产品。</p>
<a id="more"></a>
<h2 id="一、Arduino的起源与发展"><a href="#一、Arduino的起源与发展" class="headerlink" title="一、Arduino的起源与发展"></a>一、Arduino的起源与发展</h2><p>也许Arduino团队怎么也想象不到，一块简单的不能再简单的单片机开发板（甚至称不上开发板，也就是个最小系统），如今会流行到这种程度，并成为快速原型搭建方案的事实标准，被Intel、Microsoft、ARM、ST、Freescale、Microchip、Atmel等一系列业界如雷贯耳的公司所接受。</p>
<p>Arduino是为交互艺术家设计的，在没有Arduino之前，交互艺术家大都使用PIC单片机编程，Arduino封装了很多底层硬件的细节，并基于艺术家熟悉的Processing软件开发了Arduino IDE。Arduino在交互艺术家群体中受到欢迎之后，也逐渐被一些黑客和电子爱好者所接受、使用和完善，并以不可思议的方式逐渐被全球的玩家所喜爱。在国内，会编程的艺术家比较少见，更多的Arduino玩家还是“技术流”的电子爱好者，以及有志于在中小学中推广电子和计算机课程的教育工作者。</p>
<h2 id="二、教育用Arduino衍生产品现状"><a href="#二、教育用Arduino衍生产品现状" class="headerlink" title="二、教育用Arduino衍生产品现状"></a>二、教育用Arduino衍生产品现状</h2><p>尽管Arduino已经进入了教育工作者的视野，但它作为一个教育产品的缺陷是显而易见的。C++编程语言、电子线路，这两个词让电子信息类专业的大一学生听到，也会感到心头一紧。事实上，C/C++和电子线路类课程是电子信息类新生普遍反映比较难的课程。然而Arduino开发却离不开C++编程和搭建电子线路这两个最基础的技能。</p>
<p>之所以提起C++和电子线路两门课，是因为这两门课代表了Arduino中最重要的几个步骤：电路设计、电气连接、控制程序编写。为了让Arduino能被低龄、非专业的用户所接受，这三个步骤必须被简化。而各家使用的方法也是八仙过海各显神通。</p>
<p>为了简化编程，各种图形化编程工具应运而生，试图用图形化的方式代替代码输入。基于MIT Scratch图形化编程的思路，衍生的工具有ArduBlock、Mixly、Mind+等等。为了简化电气连接和电路设计，以Sparkfun为代表的国外公司和以Seeedstudio、DFRobot为代表国内的公司开发了大量的电子模块，这些模块上集成了核心器件以及必要的外围电路，配合传感器扩展版，这些模块可以直接用带有防呆接口的连线插到Arduino上，从而免去了在面包板上插线搭建外围电路的恼火体验。最近流行的microduino mCookies更是使用了乐高积木和磁性连接，进一步简化了搭建过程。</p>
<p>然而，这不管工程师、设计师和商人把基于Arduino的教育产品包装得多么鲜嫩可口，它的内心始终是一颗电子工程和计算机科学的硬核。来自教育界的一线教师和中小学生如果不加注意就咬下去，不免会被硌到牙。我来举个例子让大家明白“硬核”是什么。</p>
<p>假设我们要教孩子使用<code>for</code>循环，最简单的例子就是用循环语句计算1+2+3+…+100，伪代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">初始化变量 S = 0；</div><div class="line">for(初始化变量  i = 1；循环条件 i ≤ 100；自增 i = i + 1)</div><div class="line">&#123;</div><div class="line">    S = S + i；</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>循环将重复执行100次，每次i的值都会加一，循环体将i的值累加到变量<code>S</code>上，执行结束后<code>S</code>中的值就是最终的结果。</p>
<p>绝大部分没有受过编程训练的人，不论是成年人还是儿童，是无法一次正确地写出循环体<code>S = S + i</code>的，通常第一反应是<code>S = S + 1</code>或者<code>S = i + 1</code>之类写法。</p>
<p>印象最深的是我在大学的英语老师，作为一个受过高等教育、在985重点高校当老师，比较年轻、掌握计算机基本操作的人，她也无法很快理解为什么是<code>S = S + i</code>，在我仔细讲过之后她还是花了一点时间来体会，并在最后感叹这是“计算机的逻辑”。</p>
<p>这正是以Scratch为代表的图形化编程工具的荒唐之处。仿Scratch的图形化编程工具将C语言的重要语句与图形化色块一一对应，编写后直接翻译成符合C语言语法的代码，确实很符合程序员的思路，这种图形化编程工具也不难开发。但这种图形化编程不能简化程序逻辑，只能屏蔽代码的语法细节。相信即使是使用图形化编程来编写上述的累加逻辑，没学过编程的人照样无法理解<code>S = S + i</code>的含义。</p>
<p>遗憾的是，图形化编程不但没有达到简化编程的目的，还很可能帮了倒忙。图形化的逻辑代码会占据大量的屏幕空间，随着代码量的增加，图形块很快就会庞大到人类无法管理的地步。比如制作一个简单的抢答器，要有抢答提示、超时提示、违规提示等基本功能，代码量很可能会达到100行左右的规模，图形化编程在这种简单的应用中都会捉襟见肘。</p>
<p>说完了图形化编程再来说说电路设计。既然是电子 “积木”，就要从“积木块”说起。让孩子用积木盖房子，我们给了他们形状各异的木块，而不是板砖和水泥。但纵观现在几乎所有的电子积木，绝大部分的“积木块”都是电子元件（焊接在一块PCB上的电子元件也是电子元件）。这里要强调的是“元件”两个字。元件是构成电路最基本的元素，我们可以认为“元件”是不可再分的，就像人们最初认识的“原子”一样。让非专业的玩家学习使用“元件”是一件非常荒唐的事情，就像给想玩积木的孩子板砖一样荒唐。</p>
<p>可以说每一个电子元件都是人类智慧的结晶，要想学会使用一个元件，并运用它设计电路，就必须要知道它的工作原理。当看到某些电子积木中居然有独立的晶体三极管“积木块”的时候，我真的是哭笑不得。围绕着晶体管不知道产生过多少个诺贝尔奖，基本可以说现代的电子工业就站在晶体管的肩膀上。不知道有多少电子信息类的新生面对P型半导体、N型半导体、空穴导电之类的专业名词挠破头皮，让外行人学习使用分立的三极管完全是天方夜谭。不了解元器件原理，就给创新设定了一个极低的天花板——说明书上的所有电路。也就是说，如果一套电子积木是以元件为单位组织的，那非专业人士用它最多也就是学完附带说明书上的全部案例，几乎没有自己创新的余地可言。</p>
<p>同时，丰富的元件模块带来了繁杂的接口标准。1-Wire、I2C、SPI、UART这些是都是非常常用的接口技术。有些器件还需要使用特定的并行传输协议、模拟信号还需要进行放大和模数转换。还有一些常用的技巧，比如上拉电阻、脉宽调制（PWM）、三极管扩流等。一个简单的项目很可能就需要对上述这些接口技术熟练掌握、运用并加以组合。对于电子行业的从业者或者电子信息类专业的大学生来说，这些是必须掌握的基本技能，但对于科目教育所面向的对象（中小学生）而言，这些是没有必要了解的额外细节，同时也是他们无力学习和掌握的细节。</p>
<h2 id="三、下一代教育用电子积木产品特点"><a href="#三、下一代教育用电子积木产品特点" class="headerlink" title="三、下一代教育用电子积木产品特点"></a>三、下一代教育用电子积木产品特点</h2><p>绕了这么多弯子，我们终于要具体地说一下Arduino ESLOV这个产品了。这款产品现在公开的资料非常少，各种技术细节都是一笔带过。但从看到这个产品的第一眼起，我就知道它与我们团队5年前的一个想法不谋而合。要说这个产品的革命性，我们先来看两张图，这是发布在Arduino官方博客上产品谍照：</p>
<p><img src="/images/eslov-modules.gif" alt="ESLOV的模块长这样↑">  </p>
<p><img src="/images/eslov-prog.gif" alt="ESLOV的图形化编程工具长这样↑">  </p>
<p>这个产品革命性的2点：</p>
<ol>
<li><p>从第一张图上可以看出：每个模块上都有一个单片机（就连最简单的按键开关也不例外），所有模块之间通过I2C总线连接，接口使用统一的通信协议、统一的机械外形。这使得每个模块成为了一个具有独立功能的设备，而不是简单的一个电子元件。</p>
</li>
<li><p>从第二张图上可以看出：图形化编程工具是非过程化的，操作的对象是信息本身。这张图非常不清晰，大概可以看出是将一个湿度计和一个麦克风模块，分别连接到了2个流程控制模块上，可以想象后面应该可以直接连接输出设备模块。</p>
</li>
</ol>
<p>下面详细说一下这两个特性为什么是革命性的。</p>
<p>先说第一点，给每个模块加上单片机，很多人听到这个想法一定认为我疯了，尤其是做消费电子的人。单片机多贵啊！一个开关2毛钱，一个单片机好几块钱，你弄一个高大上的单片机，就为了操作一个开关？多浪费！但是我请你想一下，单片机确实比开关贵一个数量级，但是又能贵到哪里去呢？5块钱以内的单片机一抓一大把，而且对教育产品来说，成本并不敏感。但是加上单片机的好处就多了，首先就是接口外形的统一，再者就是利用串行总线技术，我们可以获得2项优势。第一，串行传输使得每个模块可以用非常少的线连在一起，在ESLOV上，是5条线。除了I2C的2条、电源2条以外，还有一条“多功能线”，这条线可以用于唤醒、设备发现以及中断请求。第二，总线技术使得我们可以在一条总线上挂载多个设备，多个设备可以首尾相连接在一起（但从电路原理上看是并联在一起），无需关注是谁连着谁。</p>
<p>这个方案使用具有独立功能的设备而非简单的元件，这解决了传统电子积木电路设计的问题，从而跳过电路设计，直接进行功能设计。由于模块具有单片机，这使得串行总线技术和即插即用技术有了实现的可能，允许模块无脑式的首尾相连，解决了传统电子积木电气连接的问题。</p>
<p>再说第二点，基于信息流的编程是比基于具体逻辑的编程更高一个层次的编程。这里我想不到什么更贴切的类比，只能做一个比较专业的类比。在基于Node.js的Web开发中，在设计RESTful API时要考虑HTTP请求的处理流程，由一些代码决定这个请求要交给哪个子程序去处理，这称为“路由”。请求的路由方式是一个在逻辑上比较高层次的东西，而处理这些请求的特定代码，是逻辑上比较底层的东西。在设计路由的时候，我们的研究对象是HTTP请求，我们考虑要对请求做怎样的判断，来将它交给谁，但对于交给的那个程序的具体处理过程，不太关心。在设计好路由之后，我们才会编写具体的处理请求的代码，这时我们关心的对象又重新回到了过程化的程序逻辑。</p>
<p>同样地，在ESLOV的图形化编程中，我们关注的对象标是“数据”，我们关心一个数据是从哪个传感器来的（例如湿度传感器传来的湿度数值），通过处理模块做出决定之后（例如湿度大于阈值），要将这个决定送到哪个效应器上产生操作（例如送到继电器模块打开除湿机）。</p>
<p>尽管底层的Arduino代码还是原来C++的样子，但暴露给用户的模型是与传统的仿Scratch图形化编程完全不同的。在ESLOV图形化编程界面上进行的连线，代表着数据流转的路径。而传统程序流程图中的连线，代表的是程序控制权的转移，夸张点来说就是CPU的PC（程序计数器）指针指向地址的跳动。</p>
<p>我希望再强调一次，这种基于信息流的编程方式，使用的是与传统过程化编程完全不同的模型，也是一种更加符合人类直觉、容易理解的模型。编程模型是一个逻辑上的概念，最后程序都会被编译成机器码执行，最后的结果是一样的。也就是说物理本质是一样的，但逻辑上的建模是完全不同的。</p>
<p>利用这种全新的编程模型，我们可以方便地构建相对复杂的项目。例如我们希望搭建一个气象站，信息流就是：温湿度传感器模块（原始数据）-&gt;数字和字符串拼接模块（带文字提示的显示内容）-&gt;显示器模块（显示具体内容）。如果想要根据温湿度报警，那就将原始数再送入阈值判断模块，将判断的结果送入报警器模块。甚至还可以将数据送入Wi-Fi通信模块，将数据发送到云端上。其实我们设计一个电子产品时也需要设计类似的流程，然后再根据这个流程编写C/C++代码。而ESLOV的先进之处就在于，这个流程就是程序本身，完成了流程就完成了整个程序，每一步处理的内部实现细节（例如“测温度”这个操作）都在模块上集成的单片机里自动完成了。</p>
<p>ESLOV正是利用这种基于信息流的编程，解决了传统电子积木在教育领域应用的第二个难题，也就是编程难的问题。我认为这种编程模型的变革，是打开可编程电子积木在教育界应用大门的金钥匙。少年儿童可以无痛地了解一些东西背后的基本原理，利用这些设备采集到的数据（例如刚才的例子，记录气象数据）甚至可以用于课外研究性学习活动。</p>
<h2 id="四、Arduino-ESLOV是给谁用的"><a href="#四、Arduino-ESLOV是给谁用的" class="headerlink" title="四、Arduino ESLOV是给谁用的"></a>四、Arduino ESLOV是给谁用的</h2><p>这篇文章其实到这里就应该已经写完的。但是作为一名良心博主，我还是要再献上一点私货。</p>
<p>ESLOV这样的产品，也许更适用于少年儿童使用，或者是适合教育市场使用。而对于相对专业的玩家而言，可能并不受欢迎，因为担心“学不到东西”。ESLOV隐藏了太多的底层细节。要知道灵活性和易用性难以两全，好的设计就其实就是好的妥协。幸运的是，ESLOV还是给我们提供了良好的灵活性，ESLOV的每一个模块都是可以重编程的。刚才说道这些模块都是I2C接口的，ESLOV在每个模块的单片机中都烧入了一个I2C的bootloader，这使得这些模块可以通过I2C接口接收新的程序，并实现在系统编程。当然，编程的语言还是大家熟悉的Arduino C++。开源的设计，使得用户在模块封装的功能不能满足需求的时候，有能力打开这个黑盒子，看到它自带程序并在它的基础上做修改和增强。而这些，都不需要专用的编程器设备，甚至不需要安装额外的软件，只要访问在线IDE，在浏览器中就能完成（需要装个浏览器插件）。</p>
<h2 id="五、写在最后"><a href="#五、写在最后" class="headerlink" title="五、写在最后"></a>五、写在最后</h2><p>之所以为一套众筹即将失败的产品写这么长一篇文章，是因为我曾经独立地设计出了一套几乎一样的东西，而且是在ESLOV出现的5年前。</p>
<p>2012年左右，我还是Arduino的普通玩家，也是北京师范大学的一名大三学生。那时我萌生了设计一套可编程电子积木的想法，并且将这个想法作为了《嵌入式系统》课程的课程设计。我独立设计了与ESLOV非常类似的总线结构，也是给每个模块都加上了一个51单片机，并且所有的模块都通过串口daisy-chain连在一起。如果一个模块遇到自己认识的信息，就吃掉并处理或执行这条信息，遇到不认识的信息，就利用引脚复用，将这条信息从另一组引脚的串口发送给下一个模块。除了主板外，我还设计了数码管显示、1602液晶显示、温度传感器、矩阵键盘四种模块。</p>
<p>在一次演示中，我拔下相连在一起的两个数码管显示器其中的一个，将1602显示器接在第一个数码管显示器后面。这时，数码管显示器上显示了温度的前几位数字，1602显示器上就直接显示了温度的后几位数字。之所以能这样，就是因为我给1602模块和数码管模块设计的通信协议是非常类似的，而1602液晶和数码管在电子元件层面是完全不同的原理和操作方法，在传统的电子积木中，不改程序就将液晶和数码管显示器互换，是天方夜谭的事情。</p>
<p>后来，这个设计也经历了一些进化，串口daisy-chain变成了485总线。我现在仍然认为485总线是比ESLOV采用的I2C更好的选择，因为I2C是为板内芯片互联设计的，I2C基于同步时钟的电平信号，难以实现远距离的通信。相比之下，485总线使用的差分信号异步通信是现代数字电路技术的大杀器，可以实现非常可靠的设备间通信。</p>
<p>在编程模型方面，我们设计了基于事件的编程模型，定义了相关的API。这么做就是为了方便在未来实现这种基于信息流的图形化编程。但由于我们没有找到开发图形化编程工具的可靠人选，图形化编程最终没有实现。</p>
<p>这个项目后来还获得了教育部的经费支持，参加了不少展示活动和比赛，获过几个奖。但由于人手的短缺以及大学中变态严格的财务制度，使得这个项目最终没能走向成熟，留下一堆research code和在洞洞板上焊接的prototype。</p>
<p>今日突然发现Arduino ESLOV项目，我的心情百感交集。首先是欣慰，Arduino社区做了我5年前做过的东西，这么说我还算是曾经站到过这个领域的前沿。然后是遗憾，很遗憾我没能用百分之百的能力去推进自己当年的项目，也遗憾当时的自己和导师都没有充分意识到这个项目的巨大意义。也许会后悔，如果再来一次我是不是能做出一个比Arduino还牛逼的东西，当然更多的是释怀，虽然ESLOV应该不会众筹成功，但Arduino社区应该还是会把它推进到底。既然Arduino做了，我应该不会再有机会做出当年设想的东西并在市场上打败Arduino。但能为多年的幻想画上句号，也是一种释怀。</p>
<p>我非常期待ESLOV的市场表现，但不论它的市场表现如何，我都认为它是下一代的电子积木产品。我不敢说我代表了Arduino社区的想法，我只能说出我在5年前做一个跟ESLOV几乎完全一样的产品时的想法。 也希望我的这篇文章能帮助所有关注Arduino和中小学STEM教育的创客、教育工作者和商人了解Arduino去做ESLOV的意义所在。</p>
<p>对了，如果谁想开发类似的产品，我可以当顾问哦～</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/embedded/in-depth-analysis-on-arduino-eslov/">http://kuangqi.me/embedded/in-depth-analysis-on-arduino-eslov/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近日来，一款名为ESLOV IoT Invention Kit的产品上线著名众筹网站Kickstarter众筹，众筹目标达到了惊人的425万瑞典克朗（约合人民币323万元），截止发稿时，仅筹集到80余万瑞典克朗，且剩余时间仅7天。不出意外的话，这个项目的众筹会以失败告终。在一个成功率不到4成的众筹网站上，像这样不能打动观众的项目在Kickstarter上比比皆是。Arduino ESLOV IoT Invention Kit在Kickstarter上实在是一个平庸的项目，这个项目要做的东西在外行人看来是一堆奇奇怪怪的电路板，在接触过Arduino的人看来，可能也只是一些简单的Arduino模块。&lt;/p&gt;
&lt;p&gt;那今天我为什么要拿这个项目来说事，煞有介事地写一篇长文呢？因为我认为，Arduino ESLOV代表了电子积木发展的趋势，是Arduino从艺术家、工程师群体真正走向教育、科普市场的冲锋号，是下一代电子积木产品。&lt;/p&gt;
    
    </summary>
    
      <category term="软硬兼施" scheme="http://kuangqi.me/categories/embedded/"/>
    
    
  </entry>
  
  <entry>
    <title>为Hexo博客的每一篇文章自动追加版权信息</title>
    <link href="http://kuangqi.me/tricks/append-a-copyright-info-after-every-post/"/>
    <id>http://kuangqi.me/tricks/append-a-copyright-info-after-every-post/</id>
    <published>2015-11-22T11:08:07.000Z</published>
    <updated>2016-11-29T15:02:00.169Z</updated>
    
    <content type="html"><![CDATA[<p>这个需求比较简单，就是希望在每一篇博客的最后追加一段版权声明的文字。我们通过修改博客模板（themes）就可以方便地实现。但是通过修改模板的方式产生的版权信息还是相对独立的，不是文章正文的一部分。这段版权信息存在的主要意义就是防止自动化的工具批量转载博客文章，或许“防止”一词并不恰当，但我们之所以要将版权声明放在正文里，就是希望这些自动化的抓取工具抓取文章时能将版权信息一并抓去。</p>
<p>同时，我们还希望在版权信息中给出这篇文章的永久链接，这样在文章被抓取之后，还会有一个链接指向原文，这样不但可以作为原文被转载的明确证据，同时可以提高原文在搜索引擎中的PageRank。</p>
<p>Hexo博客系统具有良好的可扩展性，我们可以编写一个插件，来实现自动化地为每一篇文章追加版权信息。</p>
<a id="more"></a>
<h2 id="添加Filter插件"><a href="#添加Filter插件" class="headerlink" title="添加Filter插件"></a>添加Filter插件</h2><p>Hexo的插件分为Deployer、Filter、Generator、Renderer、Tag等很多种类。其中<a href="https://hexo.io/api/filter.html" target="_blank" rel="external">Filter插件</a>用于修改一些特定的数据。在Hexo系统内部，已经注册了一类称为<code>before_post_render</code>的Filter插件。这种Filter会在文章正式渲染之前执行，具体的执行和渲染步骤可以参见关于渲染的<a href="https://hexo.io/api/posts.html#Render" target="_blank" rel="external">官方文档</a>。</p>
<p>由于这个功能比较简单，代码量应该也不大，我们不必将其做成一个完整的插件，将其写成一个js脚本，然后放在博客根目录的scripts目录下就可以方便地完成任务。如果你还不了解Script和Plugin的区别，也可以参考关于插件的<a href="https://hexo.io/docs/plugins.html" target="_blank" rel="external">官方文档</a>。</p>
<p>注册一个<code>before_post_render</code>类型的Filter的代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo.extend.filter.register(<span class="string">'before_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这样我们就可以在渲染每一篇文章时得到文章内容，并对内容进行修改。Hexo会接收这个Filter的返回值，将其中的内容用于后续的渲染步骤。也就是说在这个函数里对文章内容做出的修改，会最终渲染到输出的HTML代码中。</p>
<h2 id="追加版权信息"><a href="#追加版权信息" class="headerlink" title="追加版权信息"></a>追加版权信息</h2><p>上文代码中的<code>data</code>其实是一个文章的对象，其中的<code>content</code>字段就代表了文章的源代码（通常是Markdown代码）。我们可以将想要的版权信息追加到这个字段当中，这样这些版权信息就会被送入到后续环节生成HTML代码了。</p>
<p>另外，在博客的某些特定的文章或者页面上，我们可能不想在上面追加版权信息，应该允许用户排除某些特定页面，而在其余的页面上追加版权信息。这个实现起来也很简单，我们可以在不想添加版权信息的页面front-matter中添加一行<code>copyright: false</code>，这个<code>copyright</code>字段也会随着<code>data</code>对象送入Filter，我们可以在代码中判断一下，如果用户确实指定了<code>copyright</code>字段为<code>false</code>，则不追加版权信息。当然<code>copyright</code>这个字段名是我自己起的，你也可以随便用一个自己喜欢的字段名，文中和脚本中保持一致即可。</p>
<p>由于我比较懒，懒到<code>copyright: false</code>都懒得写，由于太懒，所以经常写一些非常短的文章，文章短到比版权信息还要短。这种文章我就不好意思再追加一大串版权信息了，所以我还希望能在文章长度小于50字时自动地不追加版权信息。这个也不难实现，再判断一下文章长度就可以了。</p>
<h2 id="追加永久链接"><a href="#追加永久链接" class="headerlink" title="追加永久链接"></a>追加永久链接</h2><p>如果版权信息还是给人看的话，那永久链接纯粹就是给机器人看的了。永久链接最好是做成带有链接的URL。这样这个URL不论是否是一个超链接，都可以被搜索引擎捕捉到。同样地，在<code>data</code>对象中也有一个字段表示了文章的永久链接，也就是<code>permalink</code>字段。将这个字段中的URL追加在文章内容之后，后面的Markdown处理器会自动将其处理为一个超链接。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>满足上述所有需求的代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Add a tail to every post from tail.md</span></div><div class="line"><span class="comment">// Great for adding copyright info</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line">hexo.extend.filter.register(<span class="string">'before_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(data.copyright == <span class="literal">false</span>) <span class="keyword">return</span> data;</div><div class="line">    <span class="keyword">var</span> file_content = fs.readFileSync(<span class="string">'tail.md'</span>);</div><div class="line">    <span class="keyword">if</span>(file_content &amp;&amp; data.content.length &gt; <span class="number">50</span>) </div><div class="line">    &#123;</div><div class="line">        data.content += file_content;</div><div class="line">        <span class="keyword">var</span> permalink = <span class="string">'\n本文永久链接：'</span> + data.permalink;</div><div class="line">        data.content += permalink;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在具体的代码实现中，我将版权信息保存在了一个名为<code>tail.md</code>的文件当中，在使用时将该文件的内容追加到文章的最后。在读文件时需要注意的是，<code>before_post_render</code>的回调函数是似乎是被同步调用的，也就是说如果函数什么都不返回就结束的话，hexo会直接将未修改的<code>data</code>对象交给后续步骤。所以文件读取操作必须使用同步的<code>fs.readFileSync</code>，如果使用异步的版本，会发现data什么都没有追加，直接执行后续步骤了。</p>
<p>将上述代码保存在一个js文件中，放到博客根目录下的scripts目录中，另外编写一个版权信息的md文件，放在博客根部录下。重新生成博客，应该就可以看到满意的效果了。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/tricks/append-a-copyright-info-after-every-post/">http://kuangqi.me/tricks/append-a-copyright-info-after-every-post/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个需求比较简单，就是希望在每一篇博客的最后追加一段版权声明的文字。我们通过修改博客模板（themes）就可以方便地实现。但是通过修改模板的方式产生的版权信息还是相对独立的，不是文章正文的一部分。这段版权信息存在的主要意义就是防止自动化的工具批量转载博客文章，或许“防止”一词并不恰当，但我们之所以要将版权声明放在正文里，就是希望这些自动化的抓取工具抓取文章时能将版权信息一并抓去。&lt;/p&gt;
&lt;p&gt;同时，我们还希望在版权信息中给出这篇文章的永久链接，这样在文章被抓取之后，还会有一个链接指向原文，这样不但可以作为原文被转载的明确证据，同时可以提高原文在搜索引擎中的PageRank。&lt;/p&gt;
&lt;p&gt;Hexo博客系统具有良好的可扩展性，我们可以编写一个插件，来实现自动化地为每一篇文章追加版权信息。&lt;/p&gt;
    
    </summary>
    
      <category term="工巧匠心" scheme="http://kuangqi.me/categories/tricks/"/>
    
    
  </entry>
  
  <entry>
    <title>最长公共子序列（LCS）问题完全解析</title>
    <link href="http://kuangqi.me/programming/lcs-made-simple/"/>
    <id>http://kuangqi.me/programming/lcs-made-simple/</id>
    <published>2015-07-31T16:00:00.000Z</published>
    <updated>2016-12-04T11:59:25.187Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定两个字符串，输出两个串最长公共子序列的长度。例如字符串<code>abcdgh</code>和字符串<code>aedfhr</code>的最长公共子序列是<code>adh</code>，它的长度是3.</p>
<a id="more"></a>
<p>在线评测：</p>
<ul>
<li>原始问题（单个字符，EOF结尾）：<a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=16&amp;page=show_problem&amp;problem=1346" target="_blank" rel="external">UVaOJ 10405</a></li>
<li>原始问题（单个整数）：<a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=12&amp;page=show_problem&amp;problem=1007" target="_blank" rel="external">UVaOJ 10066</a></li>
<li>原始问题（单个字符，井号结尾）：<a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=13&amp;page=show_problem&amp;problem=1133" target="_blank" rel="external">UVaOJ 10192</a></li>
<li>输出具体方案（字符串）：<a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=7&amp;page=show_problem&amp;problem=472" target="_blank" rel="external">UVaOJ 531</a></li>
<li>原始问题+小预处理（需特别注意审题！）：<a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=114&amp;page=show_problem&amp;problem=47" target="_blank" rel="external">UVaOJ 111</a></li>
<li>要求序列必须连续：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1403" target="_blank" rel="external">HDU 1403</a></li>
</ul>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>$LCS[A_i, B_j]$代表序列$A$的前$i$个字母和序列$B$的前$j$个字母的最长公共子序列长度。如果$A_i = B_j$，则最长公共子序列的值在之前的基础上增加1，即$LCS[A_i, B_j] = LCS[A_{i-1}, B_{j-1}] + 1$。若$A_i \neq B_j$，则最长公共子序列的长度不能增加，所以当前最长子序列的长度还是之前的长度。长度有可能是$LCS[A_{i-1}, B_j]$，也可能是$LCS[A_i, B_{j-1}]$，我们取两者中较大的一个即可。当然，如果$A_i$或者$B_j$有任意一个是空串，则LCS显然为0.</p>
<p>综上，最长公共子序列问题的状态转移方程为：</p>
<p>$$<br>LCS[A_i, B_i] =<br>\left{<br>\begin{array}{rcl}<br>0 &amp;,&amp; (i=0或j=0)\<br>LCS[A_{i-1}, B_{j-1}] + 1 &amp;,&amp;(A_i=B_i)\<br>\max(LCS[A_{i}, B_{j-1}], LCS[A_{i-1}, B_{j}]) &amp;,&amp; (A_i \neq B_i)<br>\end{array}<br>\right.<br>$$</p>
<p>如果要求最长公共子序列必须连续（即最长公共子串），则状态转义方程为：</p>
<p>$$<br>LCCS[A_i, B_i] =<br>\left{<br>\begin{array}{rcl}<br>0 &amp;,&amp; (i=0或j=0或A_i \neq B_i)\<br>LCCS[A_{i-1}, B_{j-1}] + 1 &amp;,&amp;(A_i=B_i)<br>\end{array}<br>\right.<br>$$</p>
<p><strong>特别注意：此处$LCCS[A_i, B_i]$表示的是以$A_i$和$B_i$作为结尾（最后一个字符）的最长连续公共子串的长度。即$A_i$和$B_i$这两个字符必须包含在最长公共子串之中。这与非连续版本的要求（$A_i$和$B_i$只表示两个串的最后一个字符，这量个字符不一定在最长公共子序列之中）是有所不同的。该问题最后的答案也不是<code>dp</code>数组的右下角，而是整个<code>dp</code>数组中的最大值。</strong></p>
<p>如果需要输出具体的最长公共子序列，可以借助另外一个数组记录公共子序列不断延长的过程，并通过递归的方法在该数组中找到最长子序列延长的位置，并输出这个序列。</p>
<p><img src="/images/print-lcs.png" alt=""></p>
<p>如图，在每次为<code>dp</code>数组复制时，同时为记录方向的数组<code>bd</code>赋值，$A_i = B_j$时，赋值为“↖”。$A_i \neq B_j$时，<code>DP[i - 1][j]</code>较大时赋值为“↑”，<code>DP[i][j - 1]</code>较大时赋值为“←”。这个箭头其实是记录了最长公共子序列在两个输入字符串上延长的方式。我们可以选择右下角为起点，递归直到到达左边缘或上边缘，然后在回溯时输出所有标有“↖”处对应的字符即可。</p>
<p>如果需要输出所有的最长公共子序列，则应在构建<code>bd</code>数组时记录$LCS[A_{i-1}, B_i] = LCS[A_i, B_{i-1}]$的情形，这种情况下说明最长公共子序列有多个，需要对每一个子序列执行类似于深度优先搜索的操作，从而分别构建。具体实现请见文章最后的教学代码。</p>
<p>构建<code>bd</code>数组只是为了方便编程实现，也方便理解。实际上<code>dp</code>数组已经包含了全部信息，所有在实际编程中<code>bd</code>数组也可以省略。具体代码见编程实现一节。</p>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>对于长度为$M$的串$A$和长度为$N$的串$B$而言，计算最长公共子序列长度的时间复杂度和空间复杂度均为$O(M \times N)$. 如果不需要输出具体方案，则可以只保留<code>dp</code>数组最近的2行，使用 <em>滚动数组</em> 进行优化，将空间复杂度降为$O(\min(M,N))$. 根据<code>dp</code>数组构建最优解的时间复杂度为$O(M+N)$. </p>
<h2 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h2><p>上式中的<code>i</code>、<code>j</code>等变量表示字符时的取值范围是1～N，而等于0时表示取0个字符，而不是第0个字符，取零个字符即空串。而在C语言中，并没有“取<br>0个字符”这一操作。但是算法却要求在LCS二维数组中记录空串时LCS为零的情形。解决这种情形的方法有3种：</p>
<ol>
<li>在A、B两个字符串的第0位置添加任意字符，DP数组加一圈，循环[1, Len]，然后通过if判断手动在A[0]和B[0]时填0. 此方法可读性最高且最接近数学上的定义，但要在函数之外预处理字符串，适合学习使用。</li>
<li>DP数组加一圈，而A、B串保持原状，循环[1, Len]，但在每次访问字符串时要给字符串下标减一，以满足C字符串从0开始的要求。注意此方法中字符串的长度比DP数组每一维的长度不相等，而是少1. 此方法代码最简洁，函数代码可以整体记忆及套用，适合竞赛使用。</li>
<li>DP数组不动，串A、B也保持原状，循环[0, Len)，但要在每次访问DP数组时判断下标是否为-1，若为-1则用问号表达式返回0. 此方法代码最复杂但可节约少量空间，不推荐使用。</li>
</ol>
<p>为了输出具体的最长公共子序列，我们还可以在生成<code>dp</code>数组的同时记录一个<code>bd</code>数组，用数字1、2、3依次代表“←”、“↑”、“↖”。核心代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(a[i - <span class="number">1</span>] == b[j - <span class="number">1</span>])</div><div class="line">&#123;</div><div class="line">    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</div><div class="line">    bd[i][j] = <span class="number">3</span>;</div><div class="line">    <span class="keyword">continue</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(dp[i - <span class="number">1</span>][j] &gt; dp[i][j - <span class="number">1</span>])</div><div class="line">&#123;</div><div class="line">    dp[i][j] = dp[i - <span class="number">1</span>][j];</div><div class="line">    bd[i][j] = <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">    dp[i][j] = dp[i][j - <span class="number">1</span>];</div><div class="line">    bd[i][j] = <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在有了<code>bd</code>数组之后，就可以方便地递归输出一个具体的最长公共子序列，输出的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">void construct(int la, int lb)</div><div class="line">&#123;</div><div class="line">    if(la == 0 || lb == 0) return;</div><div class="line">    if(bd[la][lb] == 3)</div><div class="line">    &#123;</div><div class="line">        construct(la - 1, lb - 1);</div><div class="line">        printf(&quot;%s&quot;, a[la - 1]);</div><div class="line">    &#125;</div><div class="line">    else if(bd[la][lb] == 2)</div><div class="line">    &#123;</div><div class="line">        construct(la - 1, lb);</div><div class="line">    &#125;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">        construct(la, lb - 1);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然<code>bd</code>数组并不是必需的，<code>dp</code>数组其实已经包含了所需的所有信息。使用<code>dp</code>数组构建最长公共子序列的代码稍微繁杂一些，基本就是将求解过程的条件判断重新写一遍。代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">construct</span><span class="params">(<span class="keyword">int</span> la, <span class="keyword">int</span> lb)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(la == <span class="number">0</span> || lb == <span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(a[la - <span class="number">1</span>] == b[lb - <span class="number">1</span>])</div><div class="line">    &#123;</div><div class="line">        construct(la - <span class="number">1</span>, lb - <span class="number">1</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>, a[la - <span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(dp[la][lb] == dp[la - <span class="number">1</span>][lb])</div><div class="line">    &#123;</div><div class="line">        construct(la - <span class="number">1</span>, lb);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        construct(la, lb - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者也可以写成：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">construct</span><span class="params">(<span class="keyword">int</span> la, <span class="keyword">int</span> lb)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(la == <span class="number">0</span> || lb == <span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(a[la - <span class="number">1</span>] == b[lb - <span class="number">1</span>])</div><div class="line">    &#123;</div><div class="line">        construct(la - <span class="number">1</span>, lb - <span class="number">1</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>, a[la - <span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(dp[la][lb] == dp[la - <span class="number">1</span>][lb])</div><div class="line">        &#123;</div><div class="line">            construct(la - <span class="number">1</span>, lb);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            construct(la, lb - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样写代码更复杂一点，但形式与计算<code>dp</code>数组时更为接近。</p>
<h2 id="题目代码"><a href="#题目代码" class="headerlink" title="题目代码"></a>题目代码</h2><p>UVaOJ 10405 方法1：</p>
<p>字符串前追加一个无用字符，<code>dp</code>数组加一圈。<code>lcs()</code>函数代码与数学表达式完全一致，注意<code>main()</code>函数中读入数据和求长度的方法。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">char</span> a[<span class="number">1010</span>];</div><div class="line"><span class="keyword">char</span> b[<span class="number">1010</span>];</div><div class="line"><span class="keyword">int</span> dp[<span class="number">1010</span>][<span class="number">1010</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcs</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">int</span> la, <span class="keyword">char</span> *b, <span class="keyword">int</span> lb)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= la; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= lb; j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(a[i] == b[j]) dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> dp[i][j] = dp[i][j - <span class="number">1</span>] &gt; dp[i - <span class="number">1</span>][j] ?</div><div class="line">                dp[i][j - <span class="number">1</span>] : dp[i - <span class="number">1</span>][j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dp[la][lb];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(gets(a + <span class="number">1</span>) == <span class="literal">NULL</span>) <span class="keyword">break</span>;</div><div class="line">        gets(b + <span class="number">1</span>);</div><div class="line">        a[<span class="number">0</span>] = <span class="string">' '</span>;</div><div class="line">        b[<span class="number">0</span>] = <span class="string">' '</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lcs(a, <span class="built_in">strlen</span>(a) - <span class="number">1</span>, b, <span class="built_in">strlen</span>(b) - <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>UVaOJ 10405 方法2：</p>
<p>字符串保持原状，<code>dp</code>数组加一圈，此为最常用且简洁的方式，算法导论上也以此方式描述。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">char</span> a[<span class="number">1010</span>];</div><div class="line"><span class="keyword">char</span> b[<span class="number">1010</span>];</div><div class="line"><span class="keyword">int</span> dp[<span class="number">1010</span>][<span class="number">1010</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcs</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">int</span> la, <span class="keyword">char</span> *b, <span class="keyword">int</span> lb)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= la; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= lb; j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(a[i - <span class="number">1</span>] == b[j - <span class="number">1</span>]) dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> dp[i][j] = dp[i][j - <span class="number">1</span>] &gt; dp[i - <span class="number">1</span>][j] ? </div><div class="line">                            dp[i][j - <span class="number">1</span>] : dp[i - <span class="number">1</span>][j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dp[la][lb];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(gets(a) == <span class="literal">NULL</span>) <span class="keyword">break</span>;</div><div class="line">        gets(b);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lcs(a, <span class="built_in">strlen</span>(a), b, <span class="built_in">strlen</span>(b)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>UVaOJ 10405 方法3：</p>
<p>字符串和<code>dp</code>数组均保持原状，需要使用较为复杂的逻辑处理可能存在的下标越界问题。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">char</span> a[<span class="number">1010</span>];</div><div class="line"><span class="keyword">char</span> b[<span class="number">1010</span>];</div><div class="line"><span class="keyword">int</span> dp[<span class="number">1010</span>][<span class="number">1010</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcs</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">int</span> la, <span class="keyword">char</span> *b, <span class="keyword">int</span> lb)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; la; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; lb; j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(a[i] == b[j])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(i == <span class="number">0</span> || j == <span class="number">0</span>) dp[i][j] = <span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span> dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> dp[i][j] = (j == <span class="number">0</span> ? <span class="number">0</span> : dp[i][j - <span class="number">1</span>]) &gt; (i == <span class="number">0</span> ? <span class="number">0</span> : dp[i - <span class="number">1</span>][j]) ? </div><div class="line">                            (j == <span class="number">0</span> ? <span class="number">0</span> : dp[i][j - <span class="number">1</span>]) : (i == <span class="number">0</span> ? <span class="number">0</span> : dp[i - <span class="number">1</span>][j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dp[la - <span class="number">1</span>][lb - <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(gets(a) == <span class="literal">NULL</span>) <span class="keyword">break</span>;</div><div class="line">        gets(b);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lcs(a, <span class="built_in">strlen</span>(a), b, <span class="built_in">strlen</span>(b)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>UVaOJ 10066:</p>
<p>字符输入变整数输入，改<code>lcs()</code>函数的数据类型即可。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> a[<span class="number">110</span>], b[<span class="number">110</span>];</div><div class="line"><span class="keyword">int</span> dp[<span class="number">110</span>][<span class="number">110</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcs</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> la, <span class="keyword">int</span> *b, <span class="keyword">int</span> lb)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= la; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= lb; j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(a[i - <span class="number">1</span>] == b[j - <span class="number">1</span>]) dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> dp[i][j] = dp[i - <span class="number">1</span>][j] &gt; dp[i][j - <span class="number">1</span>] ?</div><div class="line">                            dp[i - <span class="number">1</span>][j] : dp[i][j - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dp[la][lb];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n1, n2;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> cs = <span class="number">1</span>; ; cs++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n1, &amp;n2);</div><div class="line">        <span class="keyword">if</span>(n1 == <span class="number">0</span> || n2 == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n1; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n2; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i]);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Twin Towers #%d\n"</span>, cs);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Number of Tiles : %d\n\n"</span>, lcs(a, n1, b, n2));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>UVaOJ 10192:</p>
<p>规定井号为输入的结束，主函数中简单处理即可。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">char</span> a[<span class="number">110</span>], b[<span class="number">110</span>];</div><div class="line"><span class="keyword">int</span> dp[<span class="number">110</span>][<span class="number">110</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcs</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">int</span> la, <span class="keyword">char</span> *b, <span class="keyword">int</span> lb)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= la; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= lb; j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(a[i - <span class="number">1</span>] == b[j - <span class="number">1</span>]) dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> dp[i][j] = dp[i - <span class="number">1</span>][j] &gt; dp[i][j - <span class="number">1</span>] ?</div><div class="line">                            dp[i - <span class="number">1</span>][j] : dp[i][j - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dp[la][lb];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> cs = <span class="number">1</span>; ; cs++)</div><div class="line">    &#123;</div><div class="line">        gets(a);</div><div class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>] != <span class="string">'#'</span>) gets(b);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: you can visit at most %d cities.\n"</span>, cs, lcs(a, <span class="built_in">strlen</span>(a), b, <span class="built_in">strlen</span>(b)));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>UVaOJ 531:</p>
<p>要求输出具体的最长公共子序列，且序列的每个元素为一个字符串（单词）。下列代码已经通过注释的方式给出了使用<code>bd</code>数组和不用<code>bd</code>数组的两种实现方法。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">char</span> wds_a[<span class="number">110</span>][<span class="number">35</span>];</div><div class="line"><span class="keyword">char</span> wds_b[<span class="number">110</span>][<span class="number">35</span>];</div><div class="line"><span class="keyword">int</span> dp[<span class="number">110</span>][<span class="number">110</span>];</div><div class="line"><span class="comment">//int bd[110][110];</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcs</span><span class="params">(<span class="keyword">char</span> a[][<span class="number">35</span>], <span class="keyword">int</span> la, <span class="keyword">char</span> b[][<span class="number">35</span>], <span class="keyword">int</span> lb)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= la; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= lb; j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(a[i - <span class="number">1</span>], b[j - <span class="number">1</span>]) == <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</div><div class="line">                bd[i][j] = <span class="number">3</span>;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(dp[i - <span class="number">1</span>][j] &gt; dp[i][j - <span class="number">1</span>])</div><div class="line">            &#123;</div><div class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];</div><div class="line">                bd[i][j] = <span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                dp[i][j] = dp[i][j - <span class="number">1</span>];</div><div class="line">                bd[i][j] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dp[la][lb];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">construct</span><span class="params">(<span class="keyword">int</span> depth, <span class="keyword">int</span> la, <span class="keyword">int</span> lb)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(la == <span class="number">0</span> || lb == <span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(wds_a[la - <span class="number">1</span>], wds_b[lb - <span class="number">1</span>]) == <span class="number">0</span>) <span class="comment">//Construct without [bd] array</span></div><div class="line">    <span class="comment">//if(bd[la][lb] == 3) //Construct with [bd] array</span></div><div class="line">    &#123;</div><div class="line">        construct(depth + <span class="number">1</span>, la - <span class="number">1</span>, lb - <span class="number">1</span>);</div><div class="line">        <span class="comment">//printf("[%d]", la);</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>, wds_a[la - <span class="number">1</span>]);</div><div class="line">        <span class="keyword">if</span>(depth == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(dp[la][lb] == dp[la - <span class="number">1</span>][lb])  <span class="comment">//Construct without [bd] array</span></div><div class="line">    <span class="comment">//else if(bd[la][lb] == 2) //Construct with [bd] array</span></div><div class="line">    &#123;</div><div class="line">        construct(depth, la - <span class="number">1</span>, lb);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        construct(depth, la, lb - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> str[<span class="number">35</span>];</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> la = <span class="number">0</span>, lb = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; ; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>, str) == EOF) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span>(str[<span class="number">0</span>] == <span class="string">'#'</span>) <span class="keyword">break</span>;</div><div class="line">            <span class="built_in">strcpy</span>(wds_a[i], str);</div><div class="line">            la++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; ; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</div><div class="line">            <span class="keyword">if</span>(str[<span class="number">0</span>] == <span class="string">'#'</span>) <span class="keyword">break</span>;</div><div class="line">            <span class="built_in">strcpy</span>(wds_b[i], str);</div><div class="line">            lb++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> len = lcs(wds_a, la, wds_b, lb);</div><div class="line">        construct(<span class="number">0</span>, la, lb);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="教学代码"><a href="#教学代码" class="headerlink" title="教学代码"></a>教学代码</h2><p>输入两个字符串，输出两个字符串的最长公共子序列的长度，并列出所有的最长公共子序列，最后以图形化的形式输出用于构建最优解的<code>bd</code>数组。代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> dp[<span class="number">100</span>][<span class="number">100</span>];</div><div class="line"><span class="keyword">char</span> a[<span class="number">100</span>], b[<span class="number">100</span>];</div><div class="line"><span class="keyword">int</span> bd[<span class="number">100</span>][<span class="number">100</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcs</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">int</span> la, <span class="keyword">char</span> *b, <span class="keyword">int</span> lb)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">    <span class="built_in">memset</span>(bd, <span class="number">0</span>, <span class="keyword">sizeof</span>(bd));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= la; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= lb; j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(a[i - <span class="number">1</span>] == b[j - <span class="number">1</span>])</div><div class="line">            &#123;</div><div class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</div><div class="line">                bd[i][j] = <span class="number">3</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(dp[i - <span class="number">1</span>][j] &gt; dp[i][j - <span class="number">1</span>])</div><div class="line">                &#123;</div><div class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j];</div><div class="line">                    bd[i][j] = <span class="number">2</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(dp[i - <span class="number">1</span>][j] &lt; dp[i][j - <span class="number">1</span>])</div><div class="line">                &#123;</div><div class="line">                    dp[i][j] = dp[i][j - <span class="number">1</span>];</div><div class="line">                    bd[i][j] = <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(dp[i - <span class="number">1</span>][j] == dp[i][j - <span class="number">1</span>])</div><div class="line">                &#123;</div><div class="line">                    dp[i][j] = dp[i][j - <span class="number">1</span>];</div><div class="line">                    bd[i][j] = <span class="number">4</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dp[la][lb];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printlcs</span><span class="params">(<span class="keyword">int</span> la, <span class="keyword">int</span> lb, <span class="keyword">int</span> depth, <span class="built_in">std</span>::<span class="built_in">string</span> s)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(la == <span class="number">0</span> || lb == <span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(bd[la][lb] == <span class="number">3</span>)</div><div class="line">    &#123;</div><div class="line">        s = a[la - <span class="number">1</span>] + s;</div><div class="line">        printlcs(la - <span class="number">1</span>, lb - <span class="number">1</span>, depth - <span class="number">1</span>, s);</div><div class="line">        <span class="keyword">if</span>(depth == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"*%s\n"</span>, s.c_str());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(bd[la][lb] == <span class="number">2</span>)</div><div class="line">        &#123;</div><div class="line">            printlcs(la - <span class="number">1</span>, lb, depth, s);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(bd[la][lb] == <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            printlcs(la, lb - <span class="number">1</span>, depth, s);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(bd[la][lb] == <span class="number">4</span>)</div><div class="line">        &#123;</div><div class="line">            printlcs(la - <span class="number">1</span>, lb, depth, s);</div><div class="line">            printlcs(la, lb - <span class="number">1</span>, depth, s);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printbd</span><span class="params">(<span class="keyword">int</span> la, <span class="keyword">int</span> lb)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">-1</span>; i &lt;= la; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">-1</span>; j &lt;= lb; j++)</div><div class="line">        &#123;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(i == <span class="number">-1</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(j == <span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">" ＼"</span>);</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"|b:"</span>);</div><div class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"&#123;%c&#125;"</span>, b[j - <span class="number">1</span>]);</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(j == <span class="number">-1</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"a: "</span>);</div><div class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"&#123;%c&#125;"</span>, a[i - <span class="number">1</span>]);</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(bd[i][j] == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"[0]"</span>);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(bd[i][j] == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"[&lt;]"</span>);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(bd[i][j] == <span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">"[^]"</span>);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(bd[i][j] == <span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">"[\\]"</span>);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(bd[i][j] == <span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">"[Y]"</span>);</div><div class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"[%d]"</span>, bd[i][j]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    gets(a);</div><div class="line">    gets(b);</div><div class="line">    <span class="keyword">int</span> la = <span class="built_in">strlen</span>(a);</div><div class="line">    <span class="keyword">int</span> lb = <span class="built_in">strlen</span>(b);</div><div class="line">    <span class="keyword">int</span> len = lcs(a, la, b, lb);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"------------------------\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"LCS-Length = %d\n"</span>, len);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"List of LCS(s):\n"</span>);</div><div class="line">    printlcs(la, lb, len, <span class="string">""</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"--------bd table--------\n"</span>);</div><div class="line">    printbd(la, lb);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ABCBDAB</div><div class="line">BDCABA</div></pre></td></tr></table></figure>
<p>程序输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">------------------------</div><div class="line">LCS-Length = 4</div><div class="line">List of LCS(s):</div><div class="line">*BCBA</div><div class="line">*BCAB</div><div class="line">*BDAB</div><div class="line">--------bd table--------</div><div class="line"> ＼|b:&#123;B&#125;&#123;D&#125;&#123;C&#125;&#123;A&#125;&#123;B&#125;&#123;A&#125;</div><div class="line">a: [0][0][0][0][0][0][0]</div><div class="line">&#123;A&#125;[0][Y][Y][Y][\][&lt;][\]</div><div class="line">&#123;B&#125;[0][\][&lt;][&lt;][Y][\][&lt;]</div><div class="line">&#123;C&#125;[0][^][Y][\][&lt;][Y][Y]</div><div class="line">&#123;B&#125;[0][\][Y][^][Y][\][&lt;]</div><div class="line">&#123;D&#125;[0][^][\][Y][Y][^][Y]</div><div class="line">&#123;A&#125;[0][^][^][Y][\][Y][\]</div><div class="line">&#123;B&#125;[0][\][^][Y][^][\][Y]</div></pre></td></tr></table></figure>
<p>其中<code>&lt;</code>表示左箭头，<code>^</code>表示上箭头，<code>\</code>表示左上箭头，<code>Y</code>表示分支（向上或向左都可以，需要分别搜索两条路径）。搜索的起点应设为右下角。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/programming/lcs-made-simple/">http://kuangqi.me/programming/lcs-made-simple/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;给定两个字符串，输出两个串最长公共子序列的长度。例如字符串&lt;code&gt;abcdgh&lt;/code&gt;和字符串&lt;code&gt;aedfhr&lt;/code&gt;的最长公共子序列是&lt;code&gt;adh&lt;/code&gt;，它的长度是3.&lt;/p&gt;
    
    </summary>
    
      <category term="编程之美" scheme="http://kuangqi.me/categories/programming/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 191 Number of 1 Bits 题解</title>
    <link href="http://kuangqi.me/programming/leetcode-number-of-1-bits/"/>
    <id>http://kuangqi.me/programming/leetcode-number-of-1-bits/</id>
    <published>2015-07-09T09:29:46.000Z</published>
    <updated>2016-12-04T11:31:02.038Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>求一个整数的二进制中1的个数。例如32位整数11的二进制为<code>00000000000000000000000000001011</code>，共有3个1，所以返回3.</p>
<a id="more"></a>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>利用位运算<code>n &amp; (n - 1)</code>消去最后一个1，直到整数为零为止。这个位运算的具体解释请参见<a href="../leetcode-power-of-two/">231题：Power of Two</a>. 直接上代码了。</p>
<p>C代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">uint32_t</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(n = (n &amp; (n - <span class="number">1</span>))) sum++;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>sum</code>要初始化为1，因为最后一个1被消掉时<code>while</code>循环是进不去的，所以少累加了一次，要补上。输入0时，循环也进不去，但要返回0，这里要特别判定一下。另外附上讨论区里面给的一个非常神棍而变态的无循环版的位运算解法，耗时跟我的解法一样，都是4ms。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">uint32_t</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> c; </div><div class="line">    c =  ((n &amp; <span class="number">0xfff</span>) * <span class="number">0x1001001001001</span>ULL &amp; <span class="number">0x84210842108421</span>ULL) % <span class="number">0x1f</span>;</div><div class="line">    c += (((n &amp; <span class="number">0xfff000</span>) &gt;&gt; <span class="number">12</span>) * <span class="number">0x1001001001001</span>ULL &amp; <span class="number">0x84210842108421</span>ULL) % <span class="number">0x1f</span>;</div><div class="line">    c += ((n &gt;&gt; <span class="number">24</span>) * <span class="number">0x1001001001001</span>ULL &amp; <span class="number">0x84210842108421</span>ULL) % <span class="number">0x1f</span>;</div><div class="line">    <span class="keyword">return</span> c;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个解法大家看看热闹就好~</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/programming/leetcode-number-of-1-bits/">http://kuangqi.me/programming/leetcode-number-of-1-bits/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;求一个整数的二进制中1的个数。例如32位整数11的二进制为&lt;code&gt;00000000000000000000000000001011&lt;/code&gt;，共有3个1，所以返回3.&lt;/p&gt;
    
    </summary>
    
      <category term="编程之美" scheme="http://kuangqi.me/categories/programming/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 027 Remove Element 题解</title>
    <link href="http://kuangqi.me/programming/leetcode-remove-element/"/>
    <id>http://kuangqi.me/programming/leetcode-remove-element/</id>
    <published>2015-07-09T09:02:12.000Z</published>
    <updated>2016-12-04T11:13:59.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给一个字符串，要求就地（in-place）移除其中所有值为<code>val</code>的元素，返回新字符串长度。大于该长度的空间内的内容不影响题目判定。</p>
<a id="more"></a>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>题目思路比较简单，用两个指针一个指向当前字符，一个指向最后一个字符。左边指针不断右移，右边指针不断左移。题目的细节比较多，比如要确保<code>tail</code>指针指向的值不为<code>val</code>。再就是不断地检查当前值，若为<code>val</code>则将其移向队尾。</p>
<p>C代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fixTail</span><span class="params">(<span class="keyword">int</span> *nums, <span class="keyword">int</span> tail, <span class="keyword">int</span> val)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(nums[tail] == val)</div><div class="line">    &#123;</div><div class="line">        tail--;</div><div class="line">        <span class="keyword">if</span>(tail == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> tail;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(numsSize == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> head = <span class="number">0</span>, tail = fixTail(nums, numsSize - <span class="number">1</span>, val);</div><div class="line">    <span class="keyword">if</span>(tail == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(head &lt;= tail)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(nums[head] == val)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> tmp = nums[tail];</div><div class="line">            nums[tail] = nums[head];</div><div class="line">            nums[head] = tmp;</div><div class="line">            tail = fixTail(nums, tail, val);</div><div class="line">        &#125;</div><div class="line">        head++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> tail + <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>fixTail</code>函数用于处理<code>tail</code>指针，确保其指向的值不为<code>val</code>.另外需要判定一些长度为0的情况。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/programming/leetcode-remove-element/">http://kuangqi.me/programming/leetcode-remove-element/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给一个字符串，要求就地（in-place）移除其中所有值为&lt;code&gt;val&lt;/code&gt;的元素，返回新字符串长度。大于该长度的空间内的内容不影响题目判定。&lt;/p&gt;
    
    </summary>
    
      <category term="编程之美" scheme="http://kuangqi.me/categories/programming/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 014 Longest Common Prefix 题解</title>
    <link href="http://kuangqi.me/programming/leetcode-longest-common-prefix/"/>
    <id>http://kuangqi.me/programming/leetcode-longest-common-prefix/</id>
    <published>2015-07-09T07:58:37.000Z</published>
    <updated>2016-12-04T11:13:28.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给一堆字符串，求这一堆字符串的<em>最长公共前缀</em>。</p>
<a id="more"></a>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这个题目比较简单，读了几遍题才确定确实是如此简单。最长公共前缀，意味着起点就固定在第一个字符，所以就依次检测所有字符串的第2个、第3个字符……直到有某个字符串的下一个字符与别人不同为止。</p>
<p>C代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">longestCommonPrefix</span><span class="params">(<span class="keyword">char</span>** strs, <span class="keyword">int</span> strsSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> c;</div><div class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(strsSize == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; ; i++) <span class="comment">// H</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> j;</div><div class="line">        c = strs[<span class="number">0</span>][i];</div><div class="line">        <span class="keyword">if</span>(c == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; strsSize; j++) <span class="comment">// V</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(c != strs[j][i]) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(j != strsSize) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">else</span> n++;</div><div class="line">    &#125;</div><div class="line">    strs[<span class="number">0</span>][n] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> strs[<span class="number">0</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要特别判断的是输入字符串为空，则返回空字符串<code>&quot;&quot;</code>。外层循环是横向指针，指到每个字符串的第几个字符。内层循环是纵向指针，在不同字符串的同一个位置间跳转。内层循环之前将下一个公共字符初始化为第一个字符串的下一次字符，注意判断字符串的结尾即可。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/programming/leetcode-longest-common-prefix/">http://kuangqi.me/programming/leetcode-longest-common-prefix/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给一堆字符串，求这一堆字符串的&lt;em&gt;最长公共前缀&lt;/em&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="编程之美" scheme="http://kuangqi.me/categories/programming/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 231 Power of Two 题解</title>
    <link href="http://kuangqi.me/programming/leetcode-power-of-two/"/>
    <id>http://kuangqi.me/programming/leetcode-power-of-two/</id>
    <published>2015-07-09T07:50:34.000Z</published>
    <updated>2016-12-04T11:31:24.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给一个整数，判断这个数是否是2的整数次方。</p>
<a id="more"></a>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这个题目非常简单，32位整数范围内2的整数次方也就32个数，一个一个判断都可以。而一个比较好的策略是利用位运算。我们知道2的整数次方的二进制一定是在某个位只有一个1，而其他位均为0. 例如：</p>
<ul>
<li>$2^0 = (1)_{10} = (1)_{2}$</li>
<li>$2^1 = (2)_{10} = (10)_{2}$</li>
<li>$2^2 = (4)_{10} = (100)_{2}$</li>
<li>$2^3 = (6)_{10} = (1000)_{2}$</li>
<li>$2^4 = (8)_{10} = (10000)_{2}$</li>
<li>……</li>
</ul>
<p>有一个经典的位运算，<code>(n &amp; (n - 1))</code>，其作用是将一个数的二进制中最低位的一个1变成0. 而其中<code>n - 1</code>的作用是将最低的为1的位的右边（低位方向）所有位都变成1，而之前最低的那个1变成0. 例如$(01001000)_2$，减一之后是$(01000111)_2$。而这个数再与原数进行与运算，其结果就是最低位的1变成了0. </p>
<p>在这道题中，如果原数是2的整数次方，则整个数中只有一个1，消掉最低位的1就意味着整个数就变成了0. 这就可以证明原数是2的整数次方，而如果原数不是2的整数次方，则二进制中不止一个1，消掉最后一个1原数也不为0. 代码很简单，只有1行。</p>
<p>C代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; !((n - <span class="number">1</span>) &amp; n);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要注意的是，评测数据中有0和负数，所有要多判断一下n大于0. 另外，这个位运算还可以用来解Leetcode上的<a href="../leetcode-number-of-1-bits/">191题：Number of 1 Bits</a>，这道题更简单粗暴，直接要求统计1的个数。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/programming/leetcode-power-of-two/">http://kuangqi.me/programming/leetcode-power-of-two/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给一个整数，判断这个数是否是2的整数次方。&lt;/p&gt;
    
    </summary>
    
      <category term="编程之美" scheme="http://kuangqi.me/categories/programming/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 226 Invert Binary Tree 题解</title>
    <link href="http://kuangqi.me/programming/leetcode-invert-binary-tree/"/>
    <id>http://kuangqi.me/programming/leetcode-invert-binary-tree/</id>
    <published>2015-07-09T07:33:04.000Z</published>
    <updated>2016-12-04T11:29:50.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>翻转一棵二叉树，例如将</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">     4</div><div class="line">   /   \</div><div class="line">  2     7</div><div class="line"> / \   / \</div><div class="line">1   3 6   9</div></pre></td></tr></table></figure>
<p>翻转为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">     4</div><div class="line">   /   \</div><div class="line">  7     2</div><div class="line"> / \   / \</div><div class="line">9   6 3   1</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>思路非常简单，递归地翻转所有子树即可。在马桶上用iPad一次刷过了此题。直接上代码。</p>
<p>C代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     struct TreeNode *left;</div><div class="line"> *     struct TreeNode *right;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">struct</span> TreeNode* <span class="title">invertTree</span><span class="params">(<span class="keyword">struct</span> TreeNode* root)</span> </span>&#123;</div><div class="line">    <span class="keyword">struct</span> TreeNode *temp;</div><div class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">if</span>(root-&gt;left) invertTree(root-&gt;left);</div><div class="line">    <span class="keyword">if</span>(root-&gt;right) invertTree(root-&gt;right);</div><div class="line">    temp = root-&gt;left;</div><div class="line">    root-&gt;left = root-&gt;right;</div><div class="line">    root-&gt;right = temp;</div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/programming/leetcode-invert-binary-tree/">http://kuangqi.me/programming/leetcode-invert-binary-tree/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;翻转一棵二叉树，例如将&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;     4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   /   \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  2     7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; / \   / \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1   3 6   9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;翻转为&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;     4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   /   \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  7     2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; / \   / \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9   6 3   1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程之美" scheme="http://kuangqi.me/categories/programming/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 003 Longest Substring Without Repeating Characters 题解</title>
    <link href="http://kuangqi.me/programming/leetcode-longest-substring-without-repeating-characters/"/>
    <id>http://kuangqi.me/programming/leetcode-longest-substring-without-repeating-characters/</id>
    <published>2015-04-10T08:16:49.000Z</published>
    <updated>2016-12-04T11:11:28.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给一个字符串，求最长的不包含重复字符的连续子串的长度。例如字符串<code>abcabcbb</code>的最长连续子串是<code>abc</code>，其长度为3，返回3即可。</p>
<a id="more"></a>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>第一反应是动态规划，想了一下发现不是。LeetCode给这个题的标签是“Hash Table”，我现在仍然不明白这道题跟哈希表与什么关系。是要用到一个数组才记录一些信息，但我觉得不是哈希表，所以我给这道题的归类为“其他类型”。</p>
<p>这道题的思路其实很简单，无非就是枚举所有子串，然后验证这些串里面是否有重复的字符。只不过“枚举”和“验证”两个过程都可以加一点特技。完全不加特技的方法是：<strong>枚举子串起点、枚举子串终点、扫描子串验证是否有重复字符</strong>。和在一起就是$O(n^3)$的时间复杂度，我没试，我猜会超时。</p>
<p>即使是最暴力的方法，在扫描验证的时候也需要一张表，来记录每个字符是否出现过，由于是8位<code>char</code>型，所以长度256的表就足够了，测试数据好像都是字母，不过还是开256的长度吧。其实这个表不光可以记录某个字母是否出现过，还可以记录它上次出现在什么位置。<strong>我们依次扫描输入字符串的每一个字符，同时记录下它们上一次出现的位置。</strong>扫描时，如果发现当前字符上次出现的位置在子串范围之内，就说明这个字符重复，如果在当前子串范围之外，则不重复。这样我们不需要重复扫描整个子串，就可以知道它其中是否有重复字符。这样我们就可以省掉“扫描验证”这个环节，将时间复杂度降到了$O(n^2)$。</p>
<p>同样，我们也可以省掉“枚举起点”这个过程，将起点初始化为0，然后在起点为0的子串后面追加字符，直到不能追加为止（再追加就会产生重复），然后通过某种时间复杂度为$O(1)$的手段，将起点直接移动到一个合适的位置，使得当前字符得以追加到子串当中。直到追加完整个字符串的最后一个字符为止。在整个过程中，子串的长度会变长也会变短，但始终都没有重复字符，我们记录下整个过程中最长的那个长度，就是问题的答案了。显然，这样优化之后问题的时间复杂度降为了$O(n)$。</p>
<p>说起来容易，那个传说中的时间复杂度为$O(1)$的“手段”是什么呢？其实很简单：我们用一个变量作为子串起点的游标，如果当前要追加的字符会导致重复，那我们就将重复点以及之前的所有字符全部舍弃，将记录起点的游标移动到与当前字符重复的那个字符的下一个字符。</p>
<p>需要注意的是，起点游标的移动方向必须是单向的，也就是起点游标必须一直向右，如果向左则不能保证子串中无重复字符。我在这里WA了一次，就是因为没限制起点游标的移动方向。没明白这句话什么意思的童鞋，可以试试<code>abba</code>这个测试数据，最长子串是<code>ab</code>或者<code>ba</code>，长度都是2。</p>
<p>另外还因为记录长度变量<code>maxLen</code>的初始化WA了一次，输入的字符串有可能为空串，空串的最长子串长度显然为0。</p>
<p>C代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</div><div class="line">    <span class="keyword">int</span> pt = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> maxLen = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> st[<span class="number">256</span>];</div><div class="line">    <span class="built_in">memset</span>(st, <span class="number">-1</span>, <span class="number">256</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(st[s[i]] != <span class="number">-1</span> &amp;&amp; st[s[i]] &gt;= pt)</div><div class="line">        &#123;</div><div class="line">            pt = st[s[i]] + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        st[s[i]] = i;</div><div class="line">        <span class="keyword">if</span>(maxLen &lt; i - pt) maxLen = i - pt;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> maxLen + <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中<code>pt</code>就是起点游标，<code>st</code>就是记录<strong>某个字符上次出现的位置</strong>的数组，<code>st[s[i]] &gt;= pt</code>用于限制起点游标移动的方向，最后的<code>maxLen</code>值就是问题的答案。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/programming/leetcode-longest-substring-without-repeating-characters/">http://kuangqi.me/programming/leetcode-longest-substring-without-repeating-characters/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给一个字符串，求最长的不包含重复字符的连续子串的长度。例如字符串&lt;code&gt;abcabcbb&lt;/code&gt;的最长连续子串是&lt;code&gt;abc&lt;/code&gt;，其长度为3，返回3即可。&lt;/p&gt;
    
    </summary>
    
      <category term="编程之美" scheme="http://kuangqi.me/categories/programming/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 002 Add Two Numbers 题解</title>
    <link href="http://kuangqi.me/programming/leetcode-add-two-numbers/"/>
    <id>http://kuangqi.me/programming/leetcode-add-two-numbers/</id>
    <published>2015-04-09T15:31:03.000Z</published>
    <updated>2016-12-04T10:50:54.937Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>用两个单向链表给出两个整数。求两个整数的和，以链表形式返回。输入的和返回的链表顺序都是从低位到高位。</p>
<a id="more"></a>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>递归遍历链表，依次求和即可。注意进位。最初没有很好地理解题意，以为是一个反转单向链表的问题，后来仔细读题后明白两个输入链表和一个输出链表都是从低位到高位的顺序，这样这个题目就很简单了。提交的时候Compile Error了几次，是因为新建节点的方式不对。由于<code>ListNode</code>结构体已经给出了一个构造函数，因此<code>new</code>的时候必须是<code>new ListNode(0)</code>这样给出一个初始值。一开始没有明白那个<code>ListNode(int x)</code>是什么意思，准确地说是没发现后面给出了这个函数的定义（空函数体<code>{}</code>）。</p>
<p>另外，创建新节点时应该是有技巧的，要确定有下一位数才创建下一个节点，不要在计算最后一位数时创建多余的节点。在递归创建节点时，可以创建节点后再递归，也可以传入空节点然后在递归到下一层时创建节点。我采用的是后者，由于要改变上层递归过来的指针的指向（而不只是指针指向的内容），所以要使用一个双指针，也可以使用指针的引用。使用双指针时，要注意解除引用运算符<code>*</code>的优先级低于间接引用运算符<code>-&gt;</code>，因此在操作双指针的结构体时要在前面解除引用的时候加括号，例如<code>(*result)-&gt;val</code>。由于本人是C语言的脑残粉，所以就使用了这种指针满天飞的方式，请各位看官轻拍~</p>
<p>编写的时候已经仔细考虑了进位、两个数不等长、最后一个节点等情况，所以解决了那个编译错误之后就一次AC了。</p>
<p>C++代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ListNode *d1, ListNode *d2, ListNode **result, <span class="keyword">int</span> carry)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(d1 == <span class="literal">NULL</span> &amp;&amp; d2 == <span class="literal">NULL</span> &amp;&amp; carry == <span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">        *result = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        (*result)-&gt;val = (d1 ? d1-&gt;val : <span class="number">0</span>) + (d2 ? d2-&gt;val : <span class="number">0</span>) + carry;</div><div class="line">        <span class="keyword">if</span>((*result)-&gt;val &gt;= <span class="number">10</span>)</div><div class="line">        &#123;</div><div class="line">            (*result)-&gt;val -= <span class="number">10</span>;</div><div class="line">            add(d1 ? d1-&gt;next : <span class="literal">NULL</span>, d2 ? d2-&gt;next : <span class="literal">NULL</span>, &amp;((*result)-&gt;next), <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            add(d1 ? d1-&gt;next : <span class="literal">NULL</span>, d2 ? d2-&gt;next : <span class="literal">NULL</span>, &amp;((*result)-&gt;next), <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function">ListNode *<span class="title">addTwoNumbers</span><span class="params">(ListNode *l1, ListNode *l2)</span> </span>&#123;</div><div class="line">        ListNode *first;</div><div class="line">        add(l1, l2, &amp;first, <span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> first;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/programming/leetcode-add-two-numbers/">http://kuangqi.me/programming/leetcode-add-two-numbers/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;用两个单向链表给出两个整数。求两个整数的和，以链表形式返回。输入的和返回的链表顺序都是从低位到高位。&lt;/p&gt;
    
    </summary>
    
      <category term="编程之美" scheme="http://kuangqi.me/categories/programming/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 001 Two Sum 题解</title>
    <link href="http://kuangqi.me/programming/leetcode-two-sum/"/>
    <id>http://kuangqi.me/programming/leetcode-two-sum/</id>
    <published>2015-04-09T10:29:43.000Z</published>
    <updated>2016-12-04T10:49:45.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给一个不保证有序的数列<code>numbers</code>，在数列中找到2个数，使得两个数的和等于一个指定的数<code>target</code>，返回这两个数的索引<code>index1</code>和<code>index2</code>。</p>
<a id="more"></a>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>依次尝试所有组合，需要$O(n^2)$的时间复杂度，这显然会导致超时。我们可以对序列进行排序，依次选择每一个数，然后用<code>target</code>减去当前的数，然后通过二分查找法在有序表中查找是否存在与当前数配对的另外一个数。这样就可以将时间复杂度降为$O(n\log n)$。</p>
<p>由于排序后数的索引会发生变化，所以需要记录每个数排序之前的索引编号。可以将数和索引做成一个结构体，然后对结构体排序。</p>
<p>在C语言的标准库中，有2个函数可帮我们完成这个目标，一个是快速排序函数<code>qsort</code>（<a href="http://www.cplusplus.com/reference/cstdlib/qsort/" target="_blank" rel="external">文档</a>），另一个是二分查找函数<code>bsearch</code>（<a href="http://www.cplusplus.com/reference/cstdlib/bsearch/" target="_blank" rel="external">文档</a>）。这两个函数都需要包含头文件<code>stdlib.h</code>。</p>
<p>由于需要返回2个数，所以这道题的C语言函数要求返回一个指针，正确的做法是使用<code>malloc</code>在堆上分配内存，而返回局部变量的数组是行不通的。记住一句话：永远不要返回局部自动变量的指针。</p>
<p>C语言源代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> num;</div><div class="line">    <span class="keyword">int</span> index;</div><div class="line">&#125; Entry;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a, <span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> (*((Entry*)a)).num - (*((Entry*)b)).num;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> *<span class="title">twoSum</span><span class="params">(<span class="keyword">int</span> numbers[], <span class="keyword">int</span> n, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">    Entry *arr = (Entry*)<span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(Entry));</div><div class="line">    <span class="keyword">int</span> *result = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">2</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">    &#123;</div><div class="line">        arr[i].num = numbers[i];</div><div class="line">        arr[i].index = i + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    qsort(arr, n, <span class="keyword">sizeof</span>(Entry), cmp);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">    &#123;</div><div class="line">        Entry key;</div><div class="line">        key.num = target - arr[i].num;</div><div class="line">        Entry *p = (Entry*)bsearch(&amp;key, arr, n, <span class="keyword">sizeof</span>(Entry), cmp);</div><div class="line">        <span class="keyword">if</span>(p != <span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> index1 = arr[i].index, index2 = p-&gt;index;</div><div class="line">            result[<span class="number">0</span>] = index1 &lt; index2 ? index1 : index2;</div><div class="line">            result[<span class="number">1</span>] = index1 &gt; index2 ? index1 : index2;</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">free</span>(arr);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/programming/leetcode-two-sum/">http://kuangqi.me/programming/leetcode-two-sum/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;给一个不保证有序的数列&lt;code&gt;numbers&lt;/code&gt;，在数列中找到2个数，使得两个数的和等于一个指定的数&lt;code&gt;target&lt;/code&gt;，返回这两个数的索引&lt;code&gt;index1&lt;/code&gt;和&lt;code&gt;index2&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="编程之美" scheme="http://kuangqi.me/categories/programming/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo Landscape主题的字体和JS库优化</title>
    <link href="http://kuangqi.me/tricks/hexo-optimizations-for-mainland-china/"/>
    <id>http://kuangqi.me/tricks/hexo-optimizations-for-mainland-china/</id>
    <published>2015-02-12T06:54:02.000Z</published>
    <updated>2016-11-29T15:02:00.178Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo博客系统的作者来自台湾，因此在这个系统中也使用了一些不符合大陆实际情况的服务，除了留言板、分享按钮等无关大雅的东西之外，直接影响网站打开速度和呈现效果的东西就是来自Google的字体和JavaScript库了，由于Google在大陆基本处于被阻断的状态，所以我们有必要对其中涉及Google服务的地方进行替换。另外，如果使用Windows系统访问，会发现页面上的字体默认为宋体，丑陋的字体也严重影响了访客浏览的体验，我们也需要对跨平台的字体呈现效果进行优化。</p>
<p>Hexo的Landscape主题对Google的引用主要有2个，第一是使用了在Google上托管的jQuery库，第二是使用了Google的Source Code Pro字体。在Google被封锁后，大部分网友推荐使用360的CDN，也就是useso.com的库，但我经过测试后发现360的CDN在国外的访问速度极慢。网友之所以推荐360的CDN，是因为它可以简单的直接替换Google的服务，只需要改一下域名，URL的其余部分都无需改动。而我发现提供jQuery的国内互联网厂商比比皆是，而提供Google Code Pro字体的除了360还没有找到。因此我希望能够将这两个问题分别解决，而不是用useso一替换了之。</p>
<a id="more"></a>
<h2 id="jQuery库的优化"><a href="#jQuery库的优化" class="headerlink" title="jQuery库的优化"></a>jQuery库的优化</h2><p>国内提供jQuery的互联网公司很多，大家耳熟能详的互联网公司基本都免费提供了常用JS库的CDN加速服务。在我的测试中，百度的服务的速度在国内国外都比较理想，因此这里将jQuery替换成百度的。另外，我还希望在百度的服务暂时不可用时，能够以网站上自带的jQuery作为备份。</p>
<p>我们要修改的是<code>themes/landscape/layout/_partial/after-footer.ejs</code>这个文件，将17行的</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>替换为如下代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://apps.bdimg.com/libs/jquery/2.0.3/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="xml"></span></div><div class="line">//&lt;![CDATA[</div><div class="line">if (typeof jQuery == 'undefined') &#123;</div><div class="line">  document.write(unescape("%3Cscript src='/js/jquery-2.0.3.min.js' type='text/javascript'%3E%3C/script%3E"));</div><div class="line">&#125;</div><div class="line">// ]]&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里不但将Google的jQuery替换成了百度的，随后还进行了一个判断，如果获取百度的jQuery失败，则使用本网站自己的jQuery。为了让这段代码有效，我们要去jQuery官方下载合适版本的jQuery并将其放到<code>themes/landscape/source/js/</code>目录下，我将其命名为<code>jquery-2.0.3.min.js</code>。还有一点需要特别注意，那就是jQuery这个文件在hexo生产博客时会被解析，因此一定要将jQuery文件开头处的<code>//@ sourceMappingURL=jquery-2.0.3.min.map</code>这一行代码删去，否则会导致博客无法生成。</p>
<h2 id="跨平台字体优化"><a href="#跨平台字体优化" class="headerlink" title="跨平台字体优化"></a>跨平台字体优化</h2><p>为了能在各个平台上都显示令人满意的字体，我们要修改CSS文件中的字体设置，列出多个备选的字体，操作系统会依次尝试，使用系统中已安装的字体。我们要修改的是<code>themes/landscape/source/css/_variables.styl</code>这一文件，将其中第22行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">font-sans = "Helvetica Neue", Helvetica, Arial, sans-serif</div></pre></td></tr></table></figure>
<p>改成如下内容：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">font-sans = "Helvetica Neue", "Helvetica", "Hiragino Sans GB", "Microsoft YaHei", "Source Han Sans CN", "WenQuanYi Micro Hei", Arial, sans-serif</div></pre></td></tr></table></figure>
<p>其中海维提卡（Helvetica）、Arial是英文字体，前者一般存在于苹果电脑和移动设备上，后者一般存在于Windows系统中。冬青黑体（Hiragino Sans GB）、思源黑体（Source Han Sans CN）、文泉驿米黑（WenQuanYi Micro Hei）是中文字体，冬青黑体从OS X 10.6开始集成在苹果系统中，文泉驿米黑在Linux的各大发行版中均较为常见，而思源黑体是近期Google和Adobe合作推出的一款开源字体，很多电脑上也安装了这一字体。这样一来，在绝大部分操作系统中就可以显示美观的字体了。</p>
<h2 id="代码等宽字体优化"><a href="#代码等宽字体优化" class="headerlink" title="代码等宽字体优化"></a>代码等宽字体优化</h2><p>Hexo默认的等宽字体是Google的Source Code Pro，我认为为了一个等宽字体去牺牲网站的访问速度实在是有点不值得，而且系统中也会提供一些较为美观的等宽字体。所以相比于绞尽脑汁去获取Google的等宽字体，不如弃用这个在国内残念的字体，然后用与之前类似的方法来列出备选的系统自带字体。要编辑的文件同样是<code>themes/landscape/source/css/_variables.styl</code>这一文件，将其中第24行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">font-mono = "Source Code Pro", Consolas, Monaco, Menlo, Consolas, monospace</div></pre></td></tr></table></figure>
<p>改成如下内容：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">font-mono = Consolas, Monaco, Menlo, monospace</div></pre></td></tr></table></figure>
<p>最后我们要删除引用Google字体的代码，要编辑的文件是<code>themes/landscape/layout/_partial/after-footer.ejs</code>，将其中的下列代码删除。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"http://fonts.googleapis.com/css?family=Source+Code+Pro"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>重新生成博客，一切都和谐了。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/tricks/hexo-optimizations-for-mainland-china/">http://kuangqi.me/tricks/hexo-optimizations-for-mainland-china/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo博客系统的作者来自台湾，因此在这个系统中也使用了一些不符合大陆实际情况的服务，除了留言板、分享按钮等无关大雅的东西之外，直接影响网站打开速度和呈现效果的东西就是来自Google的字体和JavaScript库了，由于Google在大陆基本处于被阻断的状态，所以我们有必要对其中涉及Google服务的地方进行替换。另外，如果使用Windows系统访问，会发现页面上的字体默认为宋体，丑陋的字体也严重影响了访客浏览的体验，我们也需要对跨平台的字体呈现效果进行优化。&lt;/p&gt;
&lt;p&gt;Hexo的Landscape主题对Google的引用主要有2个，第一是使用了在Google上托管的jQuery库，第二是使用了Google的Source Code Pro字体。在Google被封锁后，大部分网友推荐使用360的CDN，也就是useso.com的库，但我经过测试后发现360的CDN在国外的访问速度极慢。网友之所以推荐360的CDN，是因为它可以简单的直接替换Google的服务，只需要改一下域名，URL的其余部分都无需改动。而我发现提供jQuery的国内互联网厂商比比皆是，而提供Google Code Pro字体的除了360还没有找到。因此我希望能够将这两个问题分别解决，而不是用useso一替换了之。&lt;/p&gt;
    
    </summary>
    
      <category term="工巧匠心" scheme="http://kuangqi.me/categories/tricks/"/>
    
    
  </entry>
  
  <entry>
    <title>为Hexo博客添加目录</title>
    <link href="http://kuangqi.me/tricks/enable-table-of-contents-on-hexo/"/>
    <id>http://kuangqi.me/tricks/enable-table-of-contents-on-hexo/</id>
    <published>2015-02-09T14:02:24.000Z</published>
    <updated>2016-11-29T15:02:00.175Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo博客系统的核心支持生成目录（Table of Contents），但其默认的主题Landscape并不支持目录的显示。我们只需对Landscape的主题文件稍作修改并添加一点目录的CSS就可以在文章前面显示友好的目录了。</p>
<h2 id="修改Landscape主题的ejs文件"><a href="#修改Landscape主题的ejs文件" class="headerlink" title="修改Landscape主题的ejs文件"></a>修改Landscape主题的ejs文件</h2><p>我们首先要编辑文章显示页面的模板，也就是<code>themes/landscape/layout/_partial/article.ejs</code>文件。为了将目录生成在正文之前，我们首先在这个文件中找到<code>&lt;%- post.content %&gt;</code>，并在<strong>这一行之前</strong>加入如下代码：</p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Table of Contents --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (!<span class="attr">index</span> &amp;&amp; <span class="attr">post.toc</span>)&#123; %&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"toc"</span> <span class="attr">class</span>=<span class="string">"toc-article"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">strong</span> <span class="attr">class</span>=<span class="string">"toc-title"</span>&gt;</span>文章目录<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">toc</span>(<span class="attr">post.content</span>) %&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure>
<p>这段代码的含义清晰明了，<code>if</code>语句中有两个条件，<code>!index</code>是为了不在首页的文章摘要中生成目录，<code>post.toc</code>确保了只在显式地标记了<code>toc: true</code>的文章中生成目录。若这两个条件满足，则创建一个目录的<code>&lt;div&gt;</code>。</p>
<p>修改完这个文件之后，找一篇包含了多个子标题的文章，并在文章开头的front-matter中添加一句<code>toc: true</code>，在浏览器中访问这篇文章，应该可以看到文章的开头处已经有了带链接的目录。但是这样的目录实在太难看，我们还需要添加相应的CSS来将其指定为我们想要的样式。</p>
<h2 id="为目录编写CSS文件"><a href="#为目录编写CSS文件" class="headerlink" title="为目录编写CSS文件"></a>为目录编写CSS文件</h2><p>要指定目录的样式，我们要修改的文件是<code>themes/landscape/source/css/_partial/article.styl</code>。在文件的最后，添加如下代码：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*toc*/</span></div><div class="line"><span class="selector-class">.toc-article</span></div><div class="line">  <span class="selector-tag">background</span> <span class="selector-id">#eee</span></div><div class="line">  <span class="selector-tag">border</span> 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#bbb</span></div><div class="line">  <span class="selector-tag">border-radius</span> 10<span class="selector-tag">px</span></div><div class="line">  <span class="selector-tag">margin</span> 1<span class="selector-class">.5em</span> 0 0<span class="selector-class">.3em</span> 1<span class="selector-class">.5em</span></div><div class="line">  <span class="selector-tag">padding</span> 1<span class="selector-class">.2em</span> 1<span class="selector-tag">em</span> 0 1<span class="selector-tag">em</span></div><div class="line">  <span class="selector-tag">max-width</span> 28%</div><div class="line"></div><div class="line"><span class="selector-class">.toc-title</span></div><div class="line">  <span class="selector-tag">font-size</span> 120%</div><div class="line"></div><div class="line"><span class="selector-id">#toc</span></div><div class="line">  <span class="selector-tag">line-height</span> 1<span class="selector-tag">em</span></div><div class="line">  <span class="selector-tag">font-size</span> 0<span class="selector-class">.9em</span></div><div class="line">  <span class="selector-tag">float</span> <span class="selector-tag">right</span></div><div class="line">  <span class="selector-class">.toc</span></div><div class="line">    <span class="selector-tag">padding</span> 0</div><div class="line">    <span class="selector-tag">margin</span> 1<span class="selector-tag">em</span></div><div class="line">    <span class="selector-tag">line-height</span> 1<span class="selector-class">.8em</span></div><div class="line">    <span class="selector-tag">li</span></div><div class="line">      <span class="selector-tag">list-style-type</span> <span class="selector-tag">none</span></div><div class="line"></div><div class="line">  <span class="selector-class">.toc-child</span> </div><div class="line">    <span class="selector-tag">margin-left</span> 1<span class="selector-tag">em</span></div></pre></td></tr></table></figure>
<p>第一段的<code>toc-article</code>指定了目录整个<code>&lt;div&gt;</code>的背景色、边框色、倒角半径、各种间距以及最大的宽度。注意这里最好指定目录的最大宽度，我将其设为了<code>28%</code>，也就是文章正文那个框的宽度的<code>28%</code>，也可以设为一个固定的长度，比如在笔记本电脑上<code>16em</code>就是个不错的宽度，但为了能适配各种不同尺寸的屏幕，最好还是设置为百分比。如果不指定最大宽度，遇到比较长的标题时，生成的目录会非常难看。这个最大宽度的设置是我在网上其他添加目录的方法中没有见到的。</p>
<p>第二段的<code>toc-title</code>指的就是“文章目录”那四个字，这四个字要比其他字大一些，将其字号设为其他字的<code>120%</code>。</p>
<p>第三段的<code>#toc.toc</code>指定了目录列表的一些细节，将<code>font-size</code>设为<code>0.9em</code>会让目录的字比文章的字稍小一些。最后的<code>.toc-child</code>指定了二级目录的缩进量。</p>
<p>再次生成页面，应该已经可以显示比较美观的目录了。</p>
<h2 id="收尾工作"><a href="#收尾工作" class="headerlink" title="收尾工作"></a>收尾工作</h2><p>通常情况下我们不需要为每一篇文章都添加目录，因为大部分文章的长度还是相对较短，或者结构简单而没有添加小标题。在我的博客上，需要添加目录的长文还是相对较少的。因为我选择了默认不生成目录，而手动为需要目录的文章添加显式地标记。</p>
<p>下面我就需要编辑每一篇需要添加目录的文章，在文章开头的front-matter中加入<code>toc: true</code>。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/tricks/enable-table-of-contents-on-hexo/">http://kuangqi.me/tricks/enable-table-of-contents-on-hexo/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo博客系统的核心支持生成目录（Table of Contents），但其默认的主题Landscape并不支持目录的显示。我们只需对Landscape的主题文件稍作修改并添加一点目录的CSS就可以在文章前面显示友好的目录了。&lt;/p&gt;
&lt;h2 id=&quot;修改Landscape主题的ejs文件&quot;&gt;&lt;a href=&quot;#修改Landscape主题的ejs文件&quot; class=&quot;headerlink&quot; title=&quot;修改Landscape主题的ejs文件&quot;&gt;&lt;/a&gt;修改Landscape主题的ejs文件&lt;/h2&gt;&lt;p&gt;我们首先要编辑文章显示页面的模板，也就是&lt;code&gt;themes/landscape/layout/_partial/article.ejs&lt;/code&gt;文件。为了将目录生成在正文之前，我们首先在这个文件中找到&lt;code&gt;&amp;lt;%- post.content %&amp;gt;&lt;/code&gt;，并在&lt;strong&gt;这一行之前&lt;/strong&gt;加入如下代码：&lt;/p&gt;
    
    </summary>
    
      <category term="工巧匠心" scheme="http://kuangqi.me/categories/tricks/"/>
    
    
  </entry>
  
  <entry>
    <title>在为Hexo博客添加文章时自动打开编辑器</title>
    <link href="http://kuangqi.me/tricks/open-macdown-when-add-a-new-post/"/>
    <id>http://kuangqi.me/tricks/open-macdown-when-add-a-new-post/</id>
    <published>2015-02-09T07:25:42.000Z</published>
    <updated>2016-11-29T15:02:00.185Z</updated>
    
    <content type="html"><![CDATA[<p>为Hexo添加博客时需要在终端输入命令<code>hexo new post &quot;Post title&quot;</code>，输入之后需要手动定位到<code>source/_posts</code>中的相关文件，这个目录比较深，定位比较麻烦，而<code>_posts</code>目录下可能有上百个文件，找到刚刚添加的那个也得费点劲，如果能在键入新建文章的命令之后能自动打开刚刚新建的文件，那样就方便多了。</p>
<p>GitHub上也有人也提出了<a href="https://github.com/hexojs/hexo/issues/1007" target="_blank" rel="external">同样的想法</a>，Hexo的作者给出了一个解决方法，就是在Hexo博客的根目录下的<code>scripts</code>目录中新建一个JavaScript脚本（如果没有<code>scripts</code>目录则手动创建一个），在其中捕获<code>new</code>事件。</p>
<a id="more"></a>
<p>我最喜欢的Markdown编辑器是MacDown，于是我在<code>scripts</code>目录下建立了一个名为<code>macdown.js</code>的文件，这个文件名可以随意起，内容如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">target</span>)</span>&#123;        exec(<span class="string">'open -a MacDown '</span> + target);        &#125;);</div></pre></td></tr></table></figure>
<p>下面来测试一下~我在终端中输入<code>hexo new post &quot;open macdown when add a new post&quot;</code>，果然MacDown蹦了出来，太酷了！于是我就在蹦出的MacDown窗口中写下了这篇文章^_^</p>
<p>P.S. 据说在Hexo 3中这段代码还会有所不同，详见GitHub上的Issue，我现在用的还是Hexo 2.8，等更新了之后再实验一下。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/tricks/open-macdown-when-add-a-new-post/">http://kuangqi.me/tricks/open-macdown-when-add-a-new-post/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为Hexo添加博客时需要在终端输入命令&lt;code&gt;hexo new post &amp;quot;Post title&amp;quot;&lt;/code&gt;，输入之后需要手动定位到&lt;code&gt;source/_posts&lt;/code&gt;中的相关文件，这个目录比较深，定位比较麻烦，而&lt;code&gt;_posts&lt;/code&gt;目录下可能有上百个文件，找到刚刚添加的那个也得费点劲，如果能在键入新建文章的命令之后能自动打开刚刚新建的文件，那样就方便多了。&lt;/p&gt;
&lt;p&gt;GitHub上也有人也提出了&lt;a href=&quot;https://github.com/hexojs/hexo/issues/1007&quot;&gt;同样的想法&lt;/a&gt;，Hexo的作者给出了一个解决方法，就是在Hexo博客的根目录下的&lt;code&gt;scripts&lt;/code&gt;目录中新建一个JavaScript脚本（如果没有&lt;code&gt;scripts&lt;/code&gt;目录则手动创建一个），在其中捕获&lt;code&gt;new&lt;/code&gt;事件。&lt;/p&gt;
    
    </summary>
    
      <category term="工巧匠心" scheme="http://kuangqi.me/categories/tricks/"/>
    
    
  </entry>
  
  <entry>
    <title>Ultimaker Original 3D打印机DIY手记</title>
    <link href="http://kuangqi.me/embedded/build-a-ultimaker-original-printer/"/>
    <id>http://kuangqi.me/embedded/build-a-ultimaker-original-printer/</id>
    <published>2015-02-02T08:11:46.000Z</published>
    <updated>2016-11-29T15:02:00.171Z</updated>
    
    <content type="html"><![CDATA[<p>一时兴起决定自己DIY一台3D打印机，现在网上的开源3D打印机还是不少的，基于DLP、激光的虽然高大上，但是机构精密、调试复杂，成本也比较高，所以我们基本还是考虑选一个<a href="http://en.wikipedia.org/wiki/Fused_deposition_modeling" target="_blank" rel="external">FDM技术</a>的。FDM技术就是将加热熔融的塑料丝从挤出嘴（喷头）中挤出，然后移动喷头来一层层地构建三维的实体。具体技术细节就不赘述了。</p>
<h2 id="方案选择"><a href="#方案选择" class="headerlink" title="方案选择"></a>方案选择</h2><p>既然选择了相对简单的FDM技术，在机型的选择上就一定要高大上，简陋的RepRap系列、并联臂结构的机型就不考虑了。至少应该有个外壳，看起来像个完整的产品，如果线缆横飞，机构外露，感觉就低端了很多，更像一个不成熟的实验品。目前商业化的机型当中开源的不多，大概只有Ultimaker和MakerBot两种，MakerBot只有Thing-O-Matic一款开源机型，后来就走向了闭源。而Ultimaker的大部分机型基本都是开源的，包括最初的Ultimaker Original以及比较新的Ultimaker 2.</p>
<p>更重要的是，Ultimaker系列3D打印机采用了更先进的机构设计，主要体现就是其远程挤出机。挤出机当中有步进电机、齿轮、轴承、弹簧、滚花螺栓等机械部件，算是一组相对较大的机构。MakerBot的设计是将挤出机背在打印头上，因此MakerBot的打印头比较笨重，因而跑不快。Ultimaker的设计是在机器的背面设计了一个远程挤出机，将打印材料通过一根鲍登管以送丝的方式送入打印头，这样就把挤出机从活动的打印头上剥离了出来，打印头也就轻便了许多，这个设计使得Ultimaker的打印头移动速度可以达到300mm/s，这是MakerBot的90mm/s望尘莫及的。因此我们就打算组装一台Ultimaker。</p>
<a id="more"></a>
<p>本着“高大上”的指导方针，我们先下载了Ultimaker 2的图纸，感觉还是挺完整的，不过开始买材料时才发现有点过于高大上了。。。首先是外壳，铝塑复合板淘宝上结果很少，亚克力是不常用的6mm厚度，而且还要雕刻，不只是简单的激光切割。问了很多厂家，基本就是答复做不了，或者文件格式不对，或者是报一个很离谱的价格。相比而言，Ultimaker Original则要亲民得多，木质的外壳价格相对合理，加工也比较方便，由于推出的时间久一些，网上的一些零配件也多，一些难以处理的非标准铝件、注塑件也有成品可以买。官方对Ultimaker Original的支持力度似乎也很大，各种升级套装，比如热床升级、挤出机升级、双喷头升级等等。一些新的实验特性都会现在Ultimaker Original上实验，稳定后应用到其他机型上。也正如官方所说，Ultimaker Original是一款非常适合hack的机型，你可以方便地在喜欢的地方打个孔，安装一些新的东西。而最让我感到难以置信的是Ultimaker Original的性能参数，除了打印体积比Ultimaker 2稍小之外，各种精度速度都与Ultimaker 2一致，Z轴分辨率达到了0.02mm，比MakerBot的0.1mm高了一个数量级。对于其官方自称的“世界级”3D打印机，我认为还是名副其实的。</p>
<h2 id="买成品-vs-自己做"><a href="#买成品-vs-自己做" class="headerlink" title="买成品 vs. 自己做"></a>买成品 vs. 自己做</h2><p>淘宝上还是有不少商家在卖Ultimaker的专用配件，比如“Ultimaker轴承套装”、“Ultimaker光轴套装”、“Ultimaker同步带、同步轮套装”、“Ultimaker主板”等等，而且这些东西的要价可都不低。如果只买一套，也许会便宜一些，像我打算买两套，一算根本不划算。比如主板，要价85～100+不等，其实那个根本就不是主板，就是一个Arduino Mega的转接板，上面的零件无非就是各种插座、开关外加几个LED和电阻电容。成本肯定不到30元。网上要价这么贵，以至于我以为这个主板是包含Arduino Mega的，但咨询后发现不含Arduino，这让我很生气，于是决定自己来制作这个主板，到嘉立创做了PCB打样，10块板子98元，两套做下来比买成品还要便宜一些，而且还多出了一堆配件。热电偶控制板更是如此，一个来自Analog的高大上的热电偶控制芯片AD597，这片SOP8的小芯片就要20多元，着实不便宜，不过黑店更牛，配上一片指头肚大的PCB和2个连接器，就敢叫价40元，实在呵呵。又是一样的步骤，做PCB打样，然后自己买芯片组装。。。40元12块PCB包邮，88元买了4个芯片，那种2.54mm的凤凰座要1元一个，有点小贵，做4块就比买成品便宜了。</p>
<p>同样的道理，Ultimaker的光轴套装也开出了90元的高价，也不知道是啥材料，硬度如何。上网找了一个专门卖光轴的商家，含运费155元订了两套，45号钢淬火工艺硬轴，感觉很棒。同步带和同步轮也类似，都是找了专门卖这种配件的商家买的，没有试图去“一站式配齐”。</p>
<p>这里还有件轶事，当时买螺丝的时候直接照着清单买的，根本就没关注这些螺丝分别用在什么地方，买了一些定位螺栓（set screw），需要10个我买了50个。后来才知道这个螺丝是用来固定同步带轮的，谁家的同步带轮会不配螺丝呢？于是就觉得这些螺丝浪费了。买回来的同步带轮一看，不仅没有自带定位螺栓，居然还打了2个洞！！！于是原计划的10个螺丝就变成了20颗，做两台就是40颗，50颗螺丝刚刚够用，好险……</p>
<h2 id="电子系统"><a href="#电子系统" class="headerlink" title="电子系统"></a>电子系统</h2><p>由于缺钱和任性，整个电子系统基本都是自己一点一点手工制作的。电子系统狭义上来说，由以下几个部分组成</p>
<ul>
<li>Arduino Mega 2560电路板，上面有MCU，作为控制器</li>
<li>Arduino Mega Shield 1.5.7，这就是所谓的主板，其实只是一个转接板。</li>
<li>A4988步进电机驱动器模块</li>
<li>UltiPanel电路板，用于脱机打印和人机交互，上面有2004液晶、SD卡槽和旋转编码器</li>
<li>AD597热电偶信号放大器</li>
</ul>
<p>从广义上说，应该还包含：</p>
<ul>
<li>步进电机</li>
<li>热电偶传感器</li>
<li>加热管</li>
<li>限位开关</li>
<li>电源</li>
</ul>
<p>Arduino Mega 2560这个淘宝上太多了，价格也比较透明了，47元买了两块成品，没必要自己做了。A4988驱动芯片是QFN封装的，又是大电流的器件，PCB的铜厚要求2oz，做特殊工艺估计不便宜，QFN封装手工焊的也不可靠，尤其是那个散热焊盘焊不着，刚好成品不贵，所以也买成品了。电源去买了个19V，135W的一体机电源，拿在手里很大很有分量，感觉不错。热电偶信号板本来没放在眼里，后来一查淘宝被吓到了，才发现这玩意成品这么贵。。。打样的PCB都寄到手了，只做了Shield和UltiPanel，根本就没在意还有这么一小块，只好重新找了个离北京近的厂家再打样一次。</p>
<h2 id="主板"><a href="#主板" class="headerlink" title="主板"></a>主板</h2><p>主板全部都是直插的元件，很久不焊直插了，焊起来真费劲。还好我采取了“渐进式”焊接，PCB是最早寄到的，先焊了排针排母和一些电阻，后来随着MOSFET、电容等器件陆续寄到，每天都焊接当天收到的元件，这样化整为零，花了几天的时间组装了两套主板。如果一次性焊好，估计会很累吧……主板上几乎没有超过2元钱的元件，最贵的应该是那个奇葩的<strong>弯脚钮子船型开关</strong>，似乎是花了8元，MOSFET大概一块五，其余都是几毛几分的便宜货。</p>
<p>比较有意思的是DC电源接口，这个机器是利用常见的笔记本电源供电的，接口的规格是5.5*2.5，也就是外径5.5mm，内径2.5mm。我的元件储备当中并没有这个规格的插座。因为我们平常做的都是小电子，包括Arduino在内，一般都用路由器电源类似的东西供电，接口的规格是5.5*2.1。本想电源买回来剪掉原配插头，重新做一个2.1mm的接口，后来觉得不靠谱，也不太舍得把崭新的电源剪掉，于是老老实实地去中发买了2.5mm的DC插座，被所要了1元/个的高价，不过是小东西，也无所谓了。</p>
<h2 id="UltiPanel控制器"><a href="#UltiPanel控制器" class="headerlink" title="UltiPanel控制器"></a>UltiPanel控制器</h2><p>相比来说，虽然UltiPanel上面没几个元件，但故事却要多一些。8块钱的进口旋转编码器、9块钱的进口SD卡座都刷新了我的世界观。这个小小的控制器制作过程也颇为波折。</p>
<p>第一次把UltiPanel的所有器件焊接好后感觉问题不大，就打算直接把PCB塞进了木质的外壳里。图纸里要求的15mm长的塑料套管，由于型号规格比较奇葩，我买的是15mm的六角尼龙柱，里面是带螺纹的，把30mm长的螺丝拧过15mm的螺纹是一种非常呵呵的体验。15mm长的螺纹会带来巨大的摩擦力，要用钳子夹住尼龙柱非常用力地拧下去，拧完一个手就没劲了，一共要拧4个&gt;_&lt;。装完后发现屏幕距离外壳还有一个小的缝隙，感觉15mm的垫柱似乎有点长，于是就拿了垫主机主板用的16mm垫柱手工剪去了大概1.5mm，费了九牛二虎之力再把15mm螺柱拆下来换成剪短后的垫柱，感觉完美极了。遂将UltiController整个组装好，结果发现SD卡插入很吃力，而且无法自己弹出来，而这就是因为那个垫柱比设计要求的短了不到1mm……彻底无语，再次拆开，再次费九牛二虎之力拧上那个残念的带螺纹的垫柱，手已废。</p>
<p>安装好后烧了程序，进行了一个测试，Arduino Mega + Shield + UltiPanel三块板子，LCD显示出字了，很兴奋，不过提示了一个<code>Err: MINTEMP</code>。猜想应该是温度错误，因为热电偶控制器的PCB还没有寄到，随后发现LCD的字会消失一会儿，然后重新出现，字消失期间无法操作，后来发现是主板在不停地复位。猜想是由于温度错误触发了看门狗，于是用一个10k的电位器做了个分压，把信号接到测温度的ADC接口上。果然不复位了，提示<code>Ultimaker Ready.</code></p>
<h2 id="SD卡和电平转换芯片"><a href="#SD卡和电平转换芯片" class="headerlink" title="SD卡和电平转换芯片"></a>SD卡和电平转换芯片</h2><p>随后我就发现了一个奇怪的现象，SD卡虽然插入了，但仍然提示<code>No SD Card</code>，而且我在通电情况下插入和拔出SD卡，还能提示<code>Card inserted</code>和<code>Card removed</code>。上网查找了一下资料，说最好要用标准SD卡，不要用SDHC，而手头的卡确实是SDHC。于是断定是卡的问题，第二天就把这个没用的SD卡送人了。随即在淘宝上买了一张标称为“低速卡、兼容老相机”的SD卡，结果收到货后发现还是SDHC，而且插上去还是不能用……这就很可疑了，并不是说SDHC就一定不能用，网上的说法是，有些厂商没有在SDHC卡上正确地实现SPI接口的协议（SD卡一般通过SDIO接口通信），SanDisk和Lexar两个大厂商的卡，居然连SPI协议都实现不正确？可能性不大。估计是电路本身的问题了。</p>
<p>除了卡以外，最可疑的就是那个国产的电平转换芯片了。又仔细看了一下BOM，上面要求的是NXP的74HC4050D，我勒个去？好像不仅仅是国产山寨这么简单了，我买芯片的时候买的型号是CD4050，不是74HC4050D，我以为这两个型号差不多，事实上也确实差不多。我后来同时下载了NXP的这两个型号的芯片数据手册，发现只是工作电压有一点小的差别，而且我使用的电压都在规定值以内，至今我仍然认为这两个芯片在给SD卡电平转换时是等效的。不过错了就是错了，也不知道那个国产山寨CD4050的指标是不是跟NXP的一致，目前这个芯片最可疑了，所以我做了两手准备：又淘宝了一个确定是标准SD而不是SDHC的卡，然后找了一个北京中发电子城的卖家，买了NXP原装的74HC4050D。第二天去中发的实体店拿了74HC4050D，新买的SD卡还没到货，回来换上了新芯片，一试，果了个然！Lexar的SDHC卡成功读出来了，想必送人的那个SanDisk的卡也是能用的。</p>
<p>又过了一天，新买的金士顿的非SDHC的标准卡也寄到了，当然也是能用的，不过我发现那个卡片似乎很旧，上面有些污渍，金手指上也有划痕，想必是个二手货。于是上淘宝威胁了一下要给差评，卡片原来要价20元，加运费5元一共25元，由于放假要回家，也不想退货了，就要求直接退15元钱，相当于卡5元+运费5元买个二手货，其实也无所谓。卖家当然不愿意了，不过也是自觉理亏，卖了个萌就不点我了，于是我就默默等待那个退款申请过期，获得了15元的退款;-)</p>
<h2 id="限位开关不得不吐的槽"><a href="#限位开关不得不吐的槽" class="headerlink" title="限位开关不得不吐的槽"></a>限位开关不得不吐的槽</h2><p>另外一个有故事的器件就是限位微动开关。图纸上规定的是M3螺纹孔，我买的是欧姆龙的高级货，纯银触点4000万次寿命，每个的价格3.8元，不算便宜了。收到货后发现螺丝拧不进去，那个开关上的安装孔要比M3小一些，而且没有螺纹。看了欧姆龙的数据手册，发现那个孔的内径是2.35mm，特别奇葩。我还在中发问了有没有M3螺纹孔的，答曰没有，还带了一句“我们卖的都是标准的”。我这才意识到是Ultimaker的图纸太奇葩了。既然没有合适的开关适合我的螺丝，不如就去买适合的螺丝来配这个开关，买了一些M2.35的螺丝和专用螺母，花了一个下午的时间做好了双绞的接线和连接器，开开心心地进行整机总装了。</p>
<p>装好后发现了个大问题，官方图纸上那个安装孔是带螺纹的，所以不需要螺母，我用螺母固定了开关后，螺母的高度会阻碍X轴前滑块的移动，滑块上有一个小小的突起，用于压下限位器的金属片，而由于螺母的存在，那个突起的耳朵撞上金属片之前，滑块本体会先撞上螺母，还好我在通电之前用手推动滑块发现了这个问题，如果是通电之后出现这个问题，一定会出现电机被卡死，而系统本身还毫不知情的情况，因为限位器一直不会被压下，所以机器应该会一直试图归零滑块。</p>
<p>出现这个问题的限位器只是安装在前面板上的两个X轴限位器，其他的限位器设计的空间还足够容纳一个螺母。不想买新的限位器了，于是就尝试将限位器的孔扩到3mm左右，然后利用螺丝慢慢旋进去，给塑料的壁上刻上丝。上来就拧裂了俩开关，损失惨重，还好所有的零件我都至少买了两份。于是学乖了，螺丝旋进一点之后，反着拧，把塑料屑旋出来，如此反复，终于做好了两个能用的开关。我仍然不想去找M3螺纹的开关，因为它不标准。不行就去找个手动的丝锥来为限位开关攻丝吧。</p>
<h2 id="总装调试"><a href="#总装调试" class="headerlink" title="总装调试"></a>总装调试</h2><p>似乎该解决的问题都已经解决了。整机组装之后执行了Cura中的测试，测试了通信、温控、限位器以及XYZ三个轴的移动，测试都是正常的。随后打印了SD卡里的一个文件，置零、升温、送丝、回抽似乎所有的动作都是正常的。只可惜没有买打印材料，只能先看看热闹，等有了打印材料再具体调试了。</p>
<h2 id="需要解决的问题"><a href="#需要解决的问题" class="headerlink" title="需要解决的问题"></a>需要解决的问题</h2><p>买了两套材料，打算组装一台双头的、一台单头的。现在组装了一台单头的，发现留给第二台的材料已经不够了，有些在第一台组装时遇到的问题，希望也能在装第二台时解决一下，记录如下：</p>
<ul>
<li>椴木板加工问题<ul>
<li>外壳后面板（编号：1003）厚度不足</li>
<li>丝杠螺母持片（编号：1103）厚度不足</li>
<li>平台臂C2部件（编号：1109）缺失一个</li>
</ul>
</li>
<li>限位开关安装孔小且没有螺纹，且数量不够</li>
<li>688轴承还剩10个，额外的送料机还需要用2个，之前不知道，因此要装双头的还缺2个轴承</li>
<li>3M 2090蓝色胶带没货</li>
<li>PLA打印材料没买</li>
<li>热缩管不够了，应该再买些2mm～3mm的热缩管</li>
<li>热电偶的线太长</li>
<li>加热管的线太短</li>
<li>打印头风扇的风向似乎反了</li>
<li>Z轴顶端的限位器位置需要调整</li>
<li>A4988步进电机驱动器的需要调节</li>
<li>平台需要调平</li>
<li>丝杠需要润滑</li>
</ul>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/embedded/build-a-ultimaker-original-printer/">http://kuangqi.me/embedded/build-a-ultimaker-original-printer/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一时兴起决定自己DIY一台3D打印机，现在网上的开源3D打印机还是不少的，基于DLP、激光的虽然高大上，但是机构精密、调试复杂，成本也比较高，所以我们基本还是考虑选一个&lt;a href=&quot;http://en.wikipedia.org/wiki/Fused_deposition_modeling&quot;&gt;FDM技术&lt;/a&gt;的。FDM技术就是将加热熔融的塑料丝从挤出嘴（喷头）中挤出，然后移动喷头来一层层地构建三维的实体。具体技术细节就不赘述了。&lt;/p&gt;
&lt;h2 id=&quot;方案选择&quot;&gt;&lt;a href=&quot;#方案选择&quot; class=&quot;headerlink&quot; title=&quot;方案选择&quot;&gt;&lt;/a&gt;方案选择&lt;/h2&gt;&lt;p&gt;既然选择了相对简单的FDM技术，在机型的选择上就一定要高大上，简陋的RepRap系列、并联臂结构的机型就不考虑了。至少应该有个外壳，看起来像个完整的产品，如果线缆横飞，机构外露，感觉就低端了很多，更像一个不成熟的实验品。目前商业化的机型当中开源的不多，大概只有Ultimaker和MakerBot两种，MakerBot只有Thing-O-Matic一款开源机型，后来就走向了闭源。而Ultimaker的大部分机型基本都是开源的，包括最初的Ultimaker Original以及比较新的Ultimaker 2.&lt;/p&gt;
&lt;p&gt;更重要的是，Ultimaker系列3D打印机采用了更先进的机构设计，主要体现就是其远程挤出机。挤出机当中有步进电机、齿轮、轴承、弹簧、滚花螺栓等机械部件，算是一组相对较大的机构。MakerBot的设计是将挤出机背在打印头上，因此MakerBot的打印头比较笨重，因而跑不快。Ultimaker的设计是在机器的背面设计了一个远程挤出机，将打印材料通过一根鲍登管以送丝的方式送入打印头，这样就把挤出机从活动的打印头上剥离了出来，打印头也就轻便了许多，这个设计使得Ultimaker的打印头移动速度可以达到300mm/s，这是MakerBot的90mm/s望尘莫及的。因此我们就打算组装一台Ultimaker。&lt;/p&gt;
    
    </summary>
    
      <category term="软硬兼施" scheme="http://kuangqi.me/categories/embedded/"/>
    
    
  </entry>
  
  <entry>
    <title>自动随机切换Hexo博客的banner图片</title>
    <link href="http://kuangqi.me/tricks/hexo-banner-auto-switcher/"/>
    <id>http://kuangqi.me/tricks/hexo-banner-auto-switcher/</id>
    <published>2014-07-08T16:24:19.000Z</published>
    <updated>2016-11-29T15:02:00.177Z</updated>
    
    <content type="html"><![CDATA[<p>个人网站最重要的是什么？个性！hexo自带的landscape是个不错的主题，首先呈现在眼前的就是高度为300像素的大banner，一个精美的banner无疑会一下抓住访客的眼球，建立起对全站的第一印象。</p>
<p>landscape主题的banner虽然很大，但是只能是一张静态图片，略显死板。如果我们能对其稍加改造，让banner图片自动地随机切换为一些预设的图片，一定会是一件很酷的事情。下面我们就来动手实现这个设想！</p>
<a id="more"></a>
<h2 id="添加随机切换图片的脚本"><a href="#添加随机切换图片的脚本" class="headerlink" title="添加随机切换图片的脚本"></a>添加随机切换图片的脚本</h2><p>我们首先要在<code>themes/landscape/layout/_partial/</code>下新建一个ejs文件，我将其命名为<code>switch-banner.ejs</code>，其中是用于切换banner图片的Javascript代码，该文件内容如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    &lt;% <span class="keyword">if</span> (theme.switch_banner)&#123; %&gt;</div><div class="line">    <span class="keyword">var</span> number_of_banners = <span class="number">6</span>;</div><div class="line">    <span class="keyword">var</span> randnum = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * number_of_banners + <span class="number">1</span>);</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"banner"</span>).style.backgroundImage = <span class="string">"url(/css/images/banner"</span> + randnum + <span class="string">".jpg)"</span>;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> &#123; %&gt;</span></span></div><div class="line">    document.getElementById("banner").style.backgroundImage = "url(/css/images/banner.jpg)";</div><div class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这段代码比较简单，随机生成一个1～6的随机整数，然后通过这个整数合成一个URL。我一共找了6张不同的banner图片，如果你的图片张数不同，也可以相应地修改<code>number_of_banners</code>数值。banner图片要放到<code>themes/landscape/source/css/images/</code>目录下，命名为<code>banner*.jpg</code>，其中的星号是一个数字。6张图片必须连续地使用1～6这6个数字。</p>
<p><strong>2015年02月13日更新</strong></p>
<p>每次刷新都更换图片可能会占用较多的资源，也会影响访问速度。更科学的做法是隔一段时间自动换一张图片，而不是每次刷新都换。我的想法是每个小时将所有图片轮换一次，目前有6张图片，也就相当于每10分钟换一张。修改后的<code>switch-banner.ejs</code>如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    &lt;% <span class="keyword">if</span> (theme.switch_banner)&#123; %&gt;</div><div class="line">    <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">    <span class="keyword">var</span> m = d.getMinutes();</div><div class="line">    <span class="keyword">var</span> num = <span class="built_in">Math</span>.ceil((m + <span class="number">1</span>) / (<span class="number">60</span> / <span class="xml"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.banner_count</span> %&gt;</span>));</span></div><div class="line">    document.getElementById("banner").style.backgroundImage = "url(/css/images/banner" + num + ".jpg)";</div><div class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> &#123; %&gt;</span></div><div class="line">    document.getElementById("banner").style.backgroundImage = "url(/css/images/banner.jpg)";</div><div class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>代码也比较简单，通过JavaScript的<code>Date</code>对象的<code>getMinutes()</code>来获取当前时间的分钟数，这是一个0～59的数，然后经过一点小算术映射到图片的文件名的编号，注意处理边界情况。</p>
<p>这里还有一个小修改，就是将图片的张数改成了可配置的，而不是硬编码的。这就需要在landscape模板的配置文件中设置一个数字。在<code>themes/landscape/_config.yml</code>中添加一行<code>banner_count: 6</code>。请根据实际图片的张数来修改这个数字。</p>
<h2 id="修改模板调用上述脚本"><a href="#修改模板调用上述脚本" class="headerlink" title="修改模板调用上述脚本"></a>修改模板调用上述脚本</h2><p>下面要修改布局文件来调用这段脚本。在<code>themes/landscape/layout/_partial/header.ejs</code>的最后一行（<code>&lt;/header&gt;</code>标记）之前加入一行<code>&lt;%- partial(&#39;switch-banner&#39;) %&gt;</code>即可。</p>
<p>最后，我们需要修改landscape模板的配置文件来开启这个特性。在<code>themes/landscape/_config.yml</code>中添加一行<code>switch_banner: true</code>。重新生成博客，多刷新几次，看看效果吧！</p>
<p>虽然实现了期望中的效果，但是我们发现浏览器还是会去请求原来的老banner，也就是<code>themes/landscape/source/css/images/banner.jpg</code>，这个文件比较大，会影响网页的打开速度。要避免浏览器请求这个文件，还需要修改一个CSS，打开<code>themes/landscape/source/css/_partial/header.styl</code>，找到<code>#banner</code>这一节，将其中的<code>background: url(banner-url) center #000</code>改成<code>background: center #000</code>，浏览器就不会再去请求已经废弃的<code>banner.jpg</code>了。如果在<code>_config.yml</code>中关掉了自动切换，我们的<code>switch-banner.ejs</code>脚本还是可以请求这个文件的，所以老的<code>banner.jpg</code>不用删掉。</p>
<h2 id="制作banner图片时的注意事项"><a href="#制作banner图片时的注意事项" class="headerlink" title="制作banner图片时的注意事项"></a>制作banner图片时的注意事项</h2><p>为了适应不同尺寸的显示器，CSS中对banner图片对齐方式的设定为<code>center</code>。我们假设图片是比较宽的条形（我制作的图片均为1920×800像素），<strong>图片左右会两端会对齐到网页边缘，而上下部分会被切掉，只露出中间的高度为300像素的一条。</strong>不论显示器多大，图片露出来的高度始终为300像素，而宽度则取决于显示器尺寸和窗口大小。又因为图片是等比例缩放的，所以换句话说，窗口越大，我们看到的图片内容就越少。如果你不明白这个道理，请取消网页的最大化，然后改变网页的宽度，观察banner图片的变化，就明白了~</p>
<p>正是由于这个原因，我们精心挑选的图片在一些显示器上会被剪裁的一塌糊涂。为了能在各种尺寸的显示器上都达到较好的显示效果，我们应该尽量将需要呈现的主体放在图片的中间位置（垂直方向的中间，水平方向无所谓），高度不要超过300像素太多。否则在大显示器上，就会出现明显的剪裁。对于不满足要求的图片，我们可以通过Photoshop对其进行一些处理，移动其主体的位置。移动之后，我们还可以通过Photoshop中的“内容感知缩放”（Content-Aware Scale）来填充移动后产生的空白。当然我们也可以选择一些风景画、抽象画等对剪裁不敏感的图片。</p>
<p>最后，由于图片尺寸较大，会占用较多的网络带宽，可能会对网页的打开速度带来影响。所以我们应该设置一个较高的JPEG压缩比，在Photoshop中将质量参数设为5或者6，将图片的大小控制在100KB出头是比较理想的。对于一些由色块构成的抽象画，则可以设置更高的压缩比。总之，建议大家尝试着调整压缩比，找到一个文件比较小，又不明显影响图片质量的压缩比。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/tricks/hexo-banner-auto-switcher/">http://kuangqi.me/tricks/hexo-banner-auto-switcher/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人网站最重要的是什么？个性！hexo自带的landscape是个不错的主题，首先呈现在眼前的就是高度为300像素的大banner，一个精美的banner无疑会一下抓住访客的眼球，建立起对全站的第一印象。&lt;/p&gt;
&lt;p&gt;landscape主题的banner虽然很大，但是只能是一张静态图片，略显死板。如果我们能对其稍加改造，让banner图片自动地随机切换为一些预设的图片，一定会是一件很酷的事情。下面我们就来动手实现这个设想！&lt;/p&gt;
    
    </summary>
    
      <category term="工巧匠心" scheme="http://kuangqi.me/categories/tricks/"/>
    
    
  </entry>
  
  <entry>
    <title>无法更改文件打开方式的解决办法</title>
    <link href="http://kuangqi.me/tricks/fix-open-with-dialog/"/>
    <id>http://kuangqi.me/tricks/fix-open-with-dialog/</id>
    <published>2014-07-08T15:49:32.000Z</published>
    <updated>2016-11-29T15:02:00.175Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间将Cadence 16.5更新到16.6之后，之前指定过打开方式的brd、pad、dra等文件无法双击打开，试图重新指定打开方式也无效。在“打开方式”窗口中点击“浏览”按钮，定位到<code>C:\Cadence\SPB_16.6\tools\pcb\bin\allegro.exe</code>之后，Allegro的图标并未出现在“打开方式”的列表中。</p>
<p>导致这个问题的原因是我们之前添加过<code>allegro.exe</code>，此程序的路径变更（从SPB_16.5目录变成了SPB_16.6目录）之后，就会导致“打开方式”无法添加。解决这个问题的方法是：</p>
<a id="more"></a>
<p>在“运行”中输入regedit打开“注册表编辑器”，定位到<code>HKEY_CLASSES_ROOT\Applications</code>分支，在其中找到<code>allegro.exe</code>、<code>pad_designer.exe</code>等主键，将其删除。之后就可以按正常的方法指定相应文件的打开方式了。当然也可以直接修改这些键下的键值，将其改成正确的程序路径。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/tricks/fix-open-with-dialog/">http://kuangqi.me/tricks/fix-open-with-dialog/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间将Cadence 16.5更新到16.6之后，之前指定过打开方式的brd、pad、dra等文件无法双击打开，试图重新指定打开方式也无效。在“打开方式”窗口中点击“浏览”按钮，定位到&lt;code&gt;C:\Cadence\SPB_16.6\tools\pcb\bin\allegro.exe&lt;/code&gt;之后，Allegro的图标并未出现在“打开方式”的列表中。&lt;/p&gt;
&lt;p&gt;导致这个问题的原因是我们之前添加过&lt;code&gt;allegro.exe&lt;/code&gt;，此程序的路径变更（从SPB_16.5目录变成了SPB_16.6目录）之后，就会导致“打开方式”无法添加。解决这个问题的方法是：&lt;/p&gt;
    
    </summary>
    
      <category term="工巧匠心" scheme="http://kuangqi.me/categories/tricks/"/>
    
    
  </entry>
  
  <entry>
    <title>在JavaScript中实现类似于Python的range()函数</title>
    <link href="http://kuangqi.me/programming/range-function-in-javascript/"/>
    <id>http://kuangqi.me/programming/range-function-in-javascript/</id>
    <published>2014-05-12T15:41:53.000Z</published>
    <updated>2016-11-29T15:02:00.186Z</updated>
    
    <content type="html"><![CDATA[<p>Python中的<code>range()</code>函数（<a href="https://docs.python.org/2/library/functions.html#range" target="_blank" rel="external">文档</a>）可以生成由一个范围内的整数有序排列所构成的数组，这在很多情况下是十分方便的。而JavaScript中并没有这样一个函数，除了每次手写<code>for</code>循环之外，我们还可以手动实现自己的<code>range()</code>，提高可读性的同时实现了代码的复用。在StackOverflow上的<a href="http://stackoverflow.com/questions/8273047/javascript-function-similar-to-python-range" target="_blank" rel="external">一篇帖子</a>中，对这个问题给出了很好的回答。整理如下：</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">range</span>(<span class="params">start, stop, step</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span>(stop) == <span class="string">'undefined'</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// one param defined</span></div><div class="line">        stop = start;</div><div class="line">        start = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span>(step) == <span class="string">'undefined'</span>)</div><div class="line">    &#123;</div><div class="line">        step = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ((step &gt; <span class="number">0</span> &amp;&amp; start &gt;= stop) || (step &lt; <span class="number">0</span> &amp;&amp; start &lt;= stop))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> [];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> result = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = start; step &gt; <span class="number">0</span> ? i &lt; stop : i &gt; stop; i += step)</div><div class="line">    &#123;</div><div class="line">        result.push(i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面测试这个函数，在JavaScript控制台中输入如下代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">range(<span class="number">1</span>, <span class="number">10</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>应该会输出1，2，3，4，5，6，7，8，9这九个数字。</p>
<p>这个函数的行为几乎跟Python中的<code>range()</code>完全一样，是我见到的最完善的实现，大家可以将这段代码收藏起来备用。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/programming/range-function-in-javascript/">http://kuangqi.me/programming/range-function-in-javascript/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python中的&lt;code&gt;range()&lt;/code&gt;函数（&lt;a href=&quot;https://docs.python.org/2/library/functions.html#range&quot;&gt;文档&lt;/a&gt;）可以生成由一个范围内的整数有序排列所构成的数组，这在很多情况下是十分方便的。而JavaScript中并没有这样一个函数，除了每次手写&lt;code&gt;for&lt;/code&gt;循环之外，我们还可以手动实现自己的&lt;code&gt;range()&lt;/code&gt;，提高可读性的同时实现了代码的复用。在StackOverflow上的&lt;a href=&quot;http://stackoverflow.com/questions/8273047/javascript-function-similar-to-python-range&quot;&gt;一篇帖子&lt;/a&gt;中，对这个问题给出了很好的回答。整理如下：&lt;/p&gt;
    
    </summary>
    
      <category term="编程之美" scheme="http://kuangqi.me/categories/programming/"/>
    
    
  </entry>
  
  <entry>
    <title>如何在Allegro PCB Editor中正确地添加丝印</title>
    <link href="http://kuangqi.me/embedded/silkscreen-in-allegro/"/>
    <id>http://kuangqi.me/embedded/silkscreen-in-allegro/</id>
    <published>2014-04-30T16:39:55.000Z</published>
    <updated>2016-11-29T15:02:00.188Z</updated>
    
    <content type="html"><![CDATA[<p>在Allegro PCB Editor中，很多Class和Subclass都包含了丝印层，那么要如何添加和管理丝印层，又应该如何正确地生成丝印层的光绘文件呢？我们常用的丝印层位于下列Class/Subclass当中。</p>
<h2 id="Board-Geometry-Silkscreen"><a href="#Board-Geometry-Silkscreen" class="headerlink" title="Board Geometry - Silkscreen"></a>Board Geometry - Silkscreen</h2><p>板级的丝印层，一般用于添加板子上的说明性文字标注、版权信息、产品或公司Logo等等。</p>
<h2 id="Package-Geometry-Silkscreen"><a href="#Package-Geometry-Silkscreen" class="headerlink" title="Package Geometry - Silkscreen"></a>Package Geometry - Silkscreen</h2><p>器件级的丝印层，用于器件本身的标注，比如标注集成电路的1号引脚、标注电解电容和二极管的极性等等。这些丝印信息一般情况下由器件封装自带，所以很少在PCB中手动修改，如果封装中的丝印信息有误，应该直接修改器件封装中的信息，这样才便于复用。</p>
<a id="more"></a>
<h2 id="Components-RefDes-Silkscreen"><a href="#Components-RefDes-Silkscreen" class="headerlink" title="Components - RefDes - Silkscreen"></a>Components - RefDes - Silkscreen</h2><p>这个才是真正的专门用于器件的索引编号的丝印层。与坑爹的自动丝印层（Autosilk）不同，这个层的信息可以可靠地保持，调整后的索引编号不会随着元件位置的变动而变动。</p>
<h2 id="Manufacturing-Autosilk"><a href="#Manufacturing-Autosilk" class="headerlink" title="Manufacturing - Autosilk"></a>Manufacturing - Autosilk</h2><p>自动丝印层，也就是由软件自动生成的丝印层。在“于博士”的Cadence教程当中，就将这个层作为了主要的丝印层。这样做可能是为了照顾初学者。这个层由软件自动生成，软件生成的丝印层非常乱，所有的索引编号都需要手动调整。然而，当你对元件以及元件周围的线路做出任何调整时，附近的丝印会重新自动生成，自己精心调整的丝印就会重新变得乱七八糟，这就使得这个层非常坑爹。</p>
<p>生成的内容杂乱，手动调整复杂、甚至无法可靠地保持调整后的状态。这个层在实际生产中显然没有什么实用价值，因此<strong>不推荐使用</strong>。</p>
<hr>
<p>下面来讨论一下丝印的光绘文件中都应该包含哪些层。想必经过上述描述，思路已经比较清晰了。实际PCB上的丝印其实可以分成三大类：</p>
<ol>
<li>板上的说明性文字、Logo、版权信息等</li>
<li>辅助元件安装的正负极标志、光学定位点、1号引脚标记等</li>
<li>元器件的索引编号</li>
</ol>
<p>另外，为了方便在制造时审阅丝印文件，有时也将板框加入到丝印层中。综上，在生成丝印的光绘文件时，推荐使用下列组合</p>
<ul>
<li>Board Geometry<ul>
<li>Silkscreen_Top/Silkscreen_Bottom</li>
<li>Outline(可选)</li>
</ul>
</li>
<li>Package Geometry<ul>
<li>Silkscreen_Top/Silkscreen_Bottom</li>
</ul>
</li>
<li>Components<ul>
<li>RefDes<ul>
<li>Silkscreen_Top/Silkscreen_Bottom</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/embedded/silkscreen-in-allegro/">http://kuangqi.me/embedded/silkscreen-in-allegro/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Allegro PCB Editor中，很多Class和Subclass都包含了丝印层，那么要如何添加和管理丝印层，又应该如何正确地生成丝印层的光绘文件呢？我们常用的丝印层位于下列Class/Subclass当中。&lt;/p&gt;
&lt;h2 id=&quot;Board-Geometry-Silkscreen&quot;&gt;&lt;a href=&quot;#Board-Geometry-Silkscreen&quot; class=&quot;headerlink&quot; title=&quot;Board Geometry - Silkscreen&quot;&gt;&lt;/a&gt;Board Geometry - Silkscreen&lt;/h2&gt;&lt;p&gt;板级的丝印层，一般用于添加板子上的说明性文字标注、版权信息、产品或公司Logo等等。&lt;/p&gt;
&lt;h2 id=&quot;Package-Geometry-Silkscreen&quot;&gt;&lt;a href=&quot;#Package-Geometry-Silkscreen&quot; class=&quot;headerlink&quot; title=&quot;Package Geometry - Silkscreen&quot;&gt;&lt;/a&gt;Package Geometry - Silkscreen&lt;/h2&gt;&lt;p&gt;器件级的丝印层，用于器件本身的标注，比如标注集成电路的1号引脚、标注电解电容和二极管的极性等等。这些丝印信息一般情况下由器件封装自带，所以很少在PCB中手动修改，如果封装中的丝印信息有误，应该直接修改器件封装中的信息，这样才便于复用。&lt;/p&gt;
    
    </summary>
    
      <category term="软硬兼施" scheme="http://kuangqi.me/categories/embedded/"/>
    
    
  </entry>
  
  <entry>
    <title>《Arduino实战》译者序</title>
    <link href="http://kuangqi.me/essay/arduino-in-action-translators-preface/"/>
    <id>http://kuangqi.me/essay/arduino-in-action-translators-preface/</id>
    <published>2014-03-22T16:51:49.000Z</published>
    <updated>2016-11-29T15:02:00.170Z</updated>
    
    <content type="html"><![CDATA[<p>每个人的心中都会藏着一个关于改变世界的小小梦想，每一个敢于向这个目标迈出哪怕只是一小步的人，都是我心目中的英雄。然而有这么一些人，他们会为软件编写一些小插件，他们为操作系统订制个性的主题，他们改装键盘和鼠标，为它们添加酷炫的LED灯……他们不满足于商场买回来的成品，总觉得那些工业化生产的东西缺少一点个性和人情味，他们不妥协，他们用自己的方法在现实世界中修修补补并乐此不疲，他们有一个相同的名字——创客。创客不必是身怀绝技的科技精英，也不必是腰缠万贯的富翁，有人用多彩的十字绣装点日常的衣物，有人用璀璨的水钻制作精致的手机壳，有人在橡皮上雕刻个性的图案，将它印在书本的扉页上……他们都在对身边世界进行小小的改造，他们都是创客。只要你心怀梦想，只要你不甘平庸，只要你有想法并付诸实践，你就是创客。欢迎你加入创客的大家庭！</p>
<a id="more"></a>
<p>然而，小小的翅膀并不能撑起大大的梦想。飞速运转的工业化设备就像一片原野，尽管有富饶的水土，尽管孕育着千万的生命，却将平民创客的呼喊淹没在呼啸而过的风中。幸运的是，创客的先行者们搭建了许多可以让平民创客施展拳脚的平台，Arduino就是其中之一。Arduino是一个很小的平台，一张信用卡的大小，小到可以将其放在掌心；Arduino又是一个巨大的舞台，全球数以百万计的玩家共同组成了庞大的Arduino社区，这里每个人都乐于分享，这里每个人都是主角。庞大的用户群创造了海量的资源，让Arduino成为一只羽翼丰满的鸿鹄，带着你的梦想扶摇直上！</p>
<p>也正是得益于Arduino社区的孵化，最终让《Arduino实战》一书借着创客运动的春风，呈现在了各位读者的面前。本书的英文原版由三位作者合著。与诸多同类书籍不同的是，本书作者当中除了有传统意义上的电子工程师、硬件创客以外，还有专业的创新技术专家、交互设计师和艺术家等。作者丰富的背景使得本书的内容变得异彩纷呈。本书所涵盖内容的广泛性、实用性和艺术性在国内乃至国际范围内都堪称同类图书之最。</p>
<p>除了“流水灯”等少数几个经典保留项目之外，本书还制作了五音阶电子琴、可穿戴路标灯、小型气象站等趣味性和实用性更强的项目。更可贵的是，本书还介绍了一些在同类图书中非常罕见且具有较强实用价值的技术，比如利用Cosm平台进行云端数据交换的示例，就渗透了近年来大红大紫的“物联网”技术思想；而通过iOS编程与Arduino板卡通信的示例，则顺应了移动计算的大方向。</p>
<p>对于Arduino板卡本身来说，其硬件外设和计算资源都非常有限。因此，“学Arduino”不能只学Arduino已经成为了人们的共识。由于Arduino的软硬件平台均以开源许可证发布，全世界的Arduino玩家已经为其开发了浩如烟海的软件库和硬件扩展模块，使得Arduino的功能得以无限地扩展。所以，学习Arduino要注重两个“扩展”：第一，要学会让各种电路组件成为Arduino的扩展，例如在本书第5章就介绍了直流电机、单极型步进电机、双极型步进电机、伺服电机和无刷电机这5种电动机。这些电动机的不同特性使其适用于不同的场合，通过这一章的学习，读者就可以基本上扫清在制作各种小型机器人时遇到的跟电动机有关的问题。第二，要学会让Arduino成为计算机的扩展，例如在本书第13章就介绍了Arduino与运行在计算机上的Python、Pure Data、Processing等编程语言整合，借助PC机的计算能力，可以完成许多仅凭Arduino自身完成不了的应用。大部分同类图书都在第一个“扩展”上浅尝辄止，而本书则做到了两全其美。本书的写作风格风趣活泼，实例教程妙趣横生，在有限的篇幅内很好地把握了内容的深度和广度，既可以作为初学者的入门教程，也可以作为进阶玩家的参考手册。</p>
<p>由于作者丰富的背景，本书涉及的内容也十分广泛，这就为本书的翻译工作带来了挑战。除了电子方面的专业名词以外，本书中还出现了在计算机视觉、iOS开发、USB协议、网络通信等方面的概念，所幸我对这些技术还略有涉猎。更夸张的是，书中还出现了一些音乐、军事、设计等方面的术语，而这些的翻译只能通过搜索或请教别人来完成。为了搞懂一个短语的含义，我甚至阅读了作者本人撰写的学术论文。</p>
<p>翻译的过程是一个再创作的过程，在尊重原文的基础上，也在尽可能地注意了汉语的语言习惯，对一些长句进行了拆分，还对一些句式和词性做了转换。另外，由于文化背景的差异，作者在文中提到的一些事物在国外可能妇孺皆知，但国人可能感到陌生，翻译过程中也针对这些内容撰写了数十条译注，希望能为国内的读者带来一些方便。然而人非圣贤，即使是这本优秀的图书也并非完美无瑕，译者在原版图书中也发现了一些错误和疏漏，其中大部分已在译稿中予以修正，但也有一部分出于尊重原文的考虑予以保留，并将译者的个人见解以译注的形式给出，以供读者参考。</p>
<p>在百余天的翻译过程中，遇到的困难和挫折是令我始料未及的。幸运的是，我的工作受到了来自家人、朋友、同学和老师的关注、支持和鼓励，是他们的鞭策使我最终完成了这本译著。首先要感谢我的父母，他们在假期为我提供了“衣来伸手，饭来张口”式的生活照料，他们对我的工作给予了高度关注和鼎力支持，他们是我最大的粉丝和最忠实的读者。我想感谢国家级大学生创新创业训练项目为本书相关研究提供经费支持，也要感谢我在北京师范大学的良师益友：感谢我的导师孙波教授以及项目组成员陶最、陈亚冰为本书相关研究付出的努力，感谢李朱峰老师的热情帮助，感谢我的室友王俊升和陆济川与我探讨并解决了很多问题，感谢北师大先进计算与软件研究中心的所有同学和老师，特别是胡久林、黄小芳、陈会杰几位学长的理解和包容。感谢在我之前著书立说，成一家之言的宋若溪、周颖萱和联骏老师对本书的关注，他们是我的偶像和榜样。感谢人民邮电出版社的杨海玲以及更多为本书付出辛勤劳动的编辑们。感谢一直以来关注和鼓励我的张万祥、田宏、李思瑶以及更多无法一一列出的朋友。</p>
<p>尽管如此，由于译者本人能力和精力的限制，本书的仍不能在每个方面都做到尽善尽美。我非常愿意听到来自读者朋友的批评和建议，并渴望与志同道合的朋友共同探索、共同进步。读者可以通过关注我的新浪微博（<a href="http://weibo.com/kqwd" target="_blank" rel="external">http://weibo.com/kqwd</a>）或者访问我的个人主页（<a href="http://kuangqi.me">http://kuangqi.me</a>）来与我取得联系。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/essay/arduino-in-action-translators-preface/">http://kuangqi.me/essay/arduino-in-action-translators-preface/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每个人的心中都会藏着一个关于改变世界的小小梦想，每一个敢于向这个目标迈出哪怕只是一小步的人，都是我心目中的英雄。然而有这么一些人，他们会为软件编写一些小插件，他们为操作系统订制个性的主题，他们改装键盘和鼠标，为它们添加酷炫的LED灯……他们不满足于商场买回来的成品，总觉得那些工业化生产的东西缺少一点个性和人情味，他们不妥协，他们用自己的方法在现实世界中修修补补并乐此不疲，他们有一个相同的名字——创客。创客不必是身怀绝技的科技精英，也不必是腰缠万贯的富翁，有人用多彩的十字绣装点日常的衣物，有人用璀璨的水钻制作精致的手机壳，有人在橡皮上雕刻个性的图案，将它印在书本的扉页上……他们都在对身边世界进行小小的改造，他们都是创客。只要你心怀梦想，只要你不甘平庸，只要你有想法并付诸实践，你就是创客。欢迎你加入创客的大家庭！&lt;/p&gt;
    
    </summary>
    
      <category term="我笔我心" scheme="http://kuangqi.me/categories/essay/"/>
    
    
  </entry>
  
  <entry>
    <title>在Hexo博客中添加微博秀</title>
    <link href="http://kuangqi.me/tricks/add-weibo-show-in-hexo/"/>
    <id>http://kuangqi.me/tricks/add-weibo-show-in-hexo/</id>
    <published>2014-03-22T04:23:40.000Z</published>
    <updated>2016-11-29T15:02:00.168Z</updated>
    
    <content type="html"><![CDATA[<p>在博客上添加一个微博秀是件挺酷的事情，但作为一名前端小白，这事儿着实让我折腾了一阵。下面所有操作以默认的landscape主题为例。</p>
<p>首先，我们要登录<a href="http://app.weibo.com/tool/weiboshow" target="_blank" rel="external">新浪微博开放平台</a>来获取微博秀的代码。然后新建<code>themes/landscape/layout/_widget/weibo.ejs</code>这个文件，将刚刚获取到的代码添加到这个文件中。最后编辑<code>themes/landscape/_config.yml</code>，在<code>widgets:</code>标签后面的适当位置添加<code>- weibo</code>。这样微博秀应该就可以显示在你的博客上了。</p>
<p>如果显示区域空白，有可能是因为你使用<code>localhost</code>访问导致的。使用本地IP地址<code>127.0.0.1</code>来访问就没问题了。</p>
<p>正常情况下，这篇文章就应该结束了，但对于一个强迫症患者来说，这篇文章才刚刚开始……</p>
<a id="more"></a>
<p>上述方法添加的微博秀没有标题文字，也不像landscape的其他widget那样具有圆角矩形、带内阴影的边框，使得这个组件与整个的博客主题格格不入。那要如何才能让微博秀更“和谐”呢？</p>
<p>首先，获取微博代码时就要进行一些设置，为了将微博秀“嵌入”到widget中，我们要关掉各种边框和标题栏。更重要的是，我们要将微博秀的背景色设置成与主题一致的<code>#dddddd</code>。我还顺便调整了一下其他的配色，使其更适合灰色的背景。调整后的配色和模块设置如下图：</p>
<p><img src="/images/weibo-show-1.png" alt=""></p>
<p>获取到的代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"550"</span> <span class="attr">class</span>=<span class="string">"share_self"</span>  <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">src</span>=<span class="string">"http://widget.weibo.com/weiboshow/index.php?language=&amp;width=0&amp;height=550&amp;fansRow=1&amp;ptype=1&amp;speed=0&amp;skin=2&amp;isTitle=0&amp;noborder=0&amp;isWeibo=1&amp;isFans=0&amp;uid=1839031723&amp;verifier=2dad15cd&amp;colors=dddddd,dddddd,4473924,0069a4,dddddd&amp;dpc=1"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div></pre></td></tr></table></figure>
<p>下面我们就给微博秀加上标题和圆角矩形的边框，我们可以仿照其他widget的代码，来调用现有的风格。下面代码以landscape主题为例，其他主题的设置方法也类似，可以挑一个主题自带的简单的widget，将其改为<code>weibo.ejs</code>。例如我就从<code>archive.ejs</code>下手，其代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">site.posts.length</span>)&#123; %&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"widget-wrap"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"widget-title"</span>&gt;</span>Archives<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"widget"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">%-</span> <span class="attr">list_archives</span>() %&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure>
<p>我将它复制了一份，改为<code>weibo.ejs</code>。然后删掉<code>if</code>语句，将<code>&lt;iframe&gt;</code>代码放到恰当位置，修改标题为“Weibo show”。根据<code>archive.ejs</code>修改的<code>weibo.ejs</code>如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">true</span>)&#123; %&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"widget-wrap"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"widget-title"</span>&gt;</span>Weibo show<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"widget"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"500"</span> <span class="attr">class</span>=<span class="string">"share_self"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">src</span>=<span class="string">"http://widget.weibo.com/weiboshow/index.php?language=&amp;width=0&amp;height=550&amp;fansRow=1&amp;ptype=1&amp;speed=0&amp;skin=2&amp;isTitle=0&amp;noborder=0&amp;isWeibo=1&amp;isFans=0&amp;uid=1839031723&amp;verifier=2dad15cd&amp;colors=dddddd,dddddd,4473924,0069a4,dddddd&amp;dpc=1"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure>
<p>重新生成博客，你就会发现微博秀的外面也具有了像其他默认widget一样的圆角矩形边框。但是还有一个小问题，那就是这个外框带有一个<code>padding</code>值，使得微博秀显示在其中小了一圈，我们希望将微博秀贴边显示。这个padding值正是由<code>widget</code>这个class的CSS设定的。我们要根据原有的widget的CSS来建立一个适合于微博秀的CSS class。</p>
<p>编辑<code>themes/landscape/source/css/_partial/sidebar.styl</code>，将其中原有的<code>.widget</code>的前半部分复制一份，放到文件的最后，重新起一个名字，然后将<code>padding</code>一行删掉。即在<code>sidebar.styl</code>文件的最后添加如下代码：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.widget-weibo</span></div><div class="line">  <span class="selector-tag">color</span>: <span class="selector-tag">color-sidebar-text</span></div><div class="line">  <span class="selector-tag">text-shadow</span>: 0 1<span class="selector-tag">px</span> <span class="selector-id">#fff</span></div><div class="line">  <span class="selector-tag">background</span>: <span class="selector-tag">color-widget-background</span></div><div class="line">  <span class="selector-tag">box-shadow</span>: 0 <span class="selector-tag">-1px</span> 4<span class="selector-tag">px</span> <span class="selector-tag">color-widget-border</span> <span class="selector-tag">inset</span></div><div class="line">  <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">color-widget-border</span></div><div class="line">  <span class="selector-tag">border-radius</span>: 3<span class="selector-tag">px</span></div></pre></td></tr></table></figure>
<p>然后将<code>weibo.ejs</code>中原来的<code>widget</code>改成上面刚创建的<code>widget-weibo</code>。修改后的代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">true</span>)&#123; %&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"widget-wrap"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"widget-title"</span>&gt;</span>Weibo show<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"widget-weibo"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"500"</span> <span class="attr">class</span>=<span class="string">"share_self"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">src</span>=<span class="string">"http://widget.weibo.com/weiboshow/index.php?language=&amp;width=0&amp;height=550&amp;fansRow=1&amp;ptype=1&amp;speed=0&amp;skin=2&amp;isTitle=0&amp;noborder=0&amp;isWeibo=1&amp;isFans=0&amp;uid=1839031723&amp;verifier=2dad15cd&amp;colors=dddddd,dddddd,4473924,0069a4,dddddd&amp;dpc=1"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure>
<p>再次生成博客页面，你会发现一切都和谐了！</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/tricks/add-weibo-show-in-hexo/">http://kuangqi.me/tricks/add-weibo-show-in-hexo/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在博客上添加一个微博秀是件挺酷的事情，但作为一名前端小白，这事儿着实让我折腾了一阵。下面所有操作以默认的landscape主题为例。&lt;/p&gt;
&lt;p&gt;首先，我们要登录&lt;a href=&quot;http://app.weibo.com/tool/weiboshow&quot;&gt;新浪微博开放平台&lt;/a&gt;来获取微博秀的代码。然后新建&lt;code&gt;themes/landscape/layout/_widget/weibo.ejs&lt;/code&gt;这个文件，将刚刚获取到的代码添加到这个文件中。最后编辑&lt;code&gt;themes/landscape/_config.yml&lt;/code&gt;，在&lt;code&gt;widgets:&lt;/code&gt;标签后面的适当位置添加&lt;code&gt;- weibo&lt;/code&gt;。这样微博秀应该就可以显示在你的博客上了。&lt;/p&gt;
&lt;p&gt;如果显示区域空白，有可能是因为你使用&lt;code&gt;localhost&lt;/code&gt;访问导致的。使用本地IP地址&lt;code&gt;127.0.0.1&lt;/code&gt;来访问就没问题了。&lt;/p&gt;
&lt;p&gt;正常情况下，这篇文章就应该结束了，但对于一个强迫症患者来说，这篇文章才刚刚开始……&lt;/p&gt;
    
    </summary>
    
      <category term="工巧匠心" scheme="http://kuangqi.me/categories/tricks/"/>
    
    
  </entry>
  
  <entry>
    <title>Xcode 5 + iOS 7免证书(iDP)真机调试与生成IPA全攻略</title>
    <link href="http://kuangqi.me/ios/ios-development-without-idp/"/>
    <id>http://kuangqi.me/ios/ios-development-without-idp/</id>
    <published>2014-03-14T10:47:36.000Z</published>
    <updated>2016-11-29T15:02:00.180Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，在Xcode上开发的程序只能在模拟器中运行，如果要放到真机上则要花费99美金购买开发者证书iDP。这严重阻碍了我等草根开发者探索的脚步。写个小程序，同学间分享一下这个小小的愿望都不能满足，自然不能善罢甘休。</p>
<p>在没有iDP的情况下，要想将程序放到iPhone上调试，并最终发布IPA用于分享，需要以下几个步骤：</p>
<ol>
<li>自己为自己颁发一个证书用于为生成的程序签名</li>
<li>修改工程配置以及Xcode的配置文件和二进制文件以阻止其验证和签名</li>
<li>通过自定义生成步骤，用伪造的证书为应用程序签名</li>
<li>使用一点小trick来生成IPA文件</li>
</ol>
<a id="more"></a>
<p>开发环境使用的是目前为止最新的稳定版软件：Mac OS X Lion 10.9.2 + Xcode 5</p>
<p>目前本人已经测试并证实有效的平台有：</p>
<ul>
<li>Xcode 4.1：<ul>
<li>iPod touch 4 iOS 4.3.3</li>
</ul>
</li>
<li>Xcode 4.2：<ul>
<li>iPod touch 4 iOS 4.3.3</li>
<li>iPod touch 4 iOS 5.0</li>
<li>iPod touch 4 iOS 5.0.1</li>
</ul>
</li>
<li>Xcode 4.2.1：<ul>
<li>iPod touch 4 iOS 4.3.3</li>
<li>iPod touch 4 iOS 5.0.1</li>
<li>iPhone 4S iOS 5.0.1(5A406)</li>
</ul>
</li>
<li>Xcode 4.3<ul>
<li>iPhone 4S iOS 5.0.1(5A406)</li>
</ul>
</li>
<li>Xcode 4.3.2<ul>
<li>iPhone 4S iOS 5.1.1</li>
</ul>
</li>
<li>Xcode 4.4.1 for Mountain Lion<ul>
<li>iPhone 4S iOS 5.1.1</li>
</ul>
</li>
<li>Xcode 4.5 for Mountain Lion<ul>
<li>iPhone 4S iOS 5.1.1</li>
</ul>
</li>
<li>Xcode 4.6 for Mountain Lion<ul>
<li>iPhone 4S iOS 6.1</li>
</ul>
</li>
</ul>
<p>另外，操作系统的版本貌似对调试影响不大，这期间用过的系统有Mac OS X 10.6~10.9.2，都没有问题。当然您需要先越狱您的设备并通过Cydia安装AppSync。</p>
<h2 id="创建证书"><a href="#创建证书" class="headerlink" title="创建证书"></a>创建证书</h2><p>创建证书的过程比较简单，打开实用工具-钥匙串访问。然后在菜单栏里点击钥匙串访问-证书助理-创建证书来打开向导。第一个步骤比较重要，必须要把名称命名为iPhone Developer，将类型设定为代码签名，将”让我覆盖这些默认值”选中。之后的步骤无需更改，一路点击“确定”和“继续”来完成这个向导就可以。</p>
<p><img src="/images/ios-development-1.png" alt=""></p>
<h2 id="修改Xcode的配置文件"><a href="#修改Xcode的配置文件" class="headerlink" title="修改Xcode的配置文件"></a>修改Xcode的配置文件</h2><p>下面的步骤稍微有点繁琐，您应该了解UNIX命令行的基本操作，并了解一种命令行文本编辑器，本文使用的是vim。尽管这里会给出完整的代码，但是关于修改和保存代码的基本操作，不再赘述。下面的操作请先将Xcode按<code>Command+Q</code>完全关闭。</p>
<ol>
<li><p>进入iPhone SDK目录</p>
<pre><code>cd /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS7.0.sdk/
</code></pre><p> 不同版本的Xcode只是最后的版本号不同。在Xcode 5.0中是<code>iPhoneOS7.0.sdk</code>，未来版本可能版本高一些，早期版本的就低一些。这个请大家自己改动。</p>
</li>
<li><p>备份原文件</p>
<pre><code>sudo cp SDKSettings.plist SDKSettings.plist.orig
</code></pre></li>
<li><p>编辑配置文件</p>
<p> 在不同版本的Xcode中，这个配置文件的编码方式并不相同。有的版本是XML格式，有的版本则是二进制格式的。为了方便修改，我们可以直接用Xcode打开这个文件。首先要打开这个文件所在目录：</p>
<pre><code>open .
</code></pre><p> 在弹出的Finder窗口中双击<code>SDKSettings.plist</code>，会启动Xcode的图形界面，我们展开<code>DefaultProperties</code>分支，将下面的<code>CODE_SIGNING_REQUIRED</code>和<code>ENTITLEMENTS_REQUIRED</code>两个属性改为<code>NO</code></p>
</li>
<li><p>编辑另外一个配置文件</p>
<pre><code>cd /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform
sudo cp Info.plist Info.plist.orig
open .
</code></pre><p> 在弹出的Finder窗口中双击打开<code>Info.plist</code>。将全部的<code>XCiPhoneOSCodeSignContext</code>修改成<code>XCCodeSignContext</code>，共有3处。分别在<code>DefaultProperties</code>分支下、<code>RuntimeRequirements</code>分支下和<code>OverrideProperties</code>分支下。</p>
</li>
</ol>
<p>至此，对SDK中配置文件的修改就完成了</p>
<h2 id="准备自定义的生成后脚本"><a href="#准备自定义的生成后脚本" class="headerlink" title="准备自定义的生成后脚本"></a>准备自定义的生成后脚本</h2><p>连接互联网后执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir /Applications/Xcode.app/Contents/Developer/iphoneentitlements</div><div class="line"><span class="built_in">cd</span> /Applications/Xcode.app/Contents/Developer/iphoneentitlements</div><div class="line">curl -O http://www.alexwhittemore.com/iphone/gen_entitlements.txt</div><div class="line">mv gen_entitlements.txt gen_entitlements.py</div><div class="line">chmod 777 gen_entitlements.py</div></pre></td></tr></table></figure>
<p>热心网友指出，这里可能涉及到权限问题。我做的时候貌似没有出啥问题，如果您在执行这段代码时遇到Permission denied提示的话，请将相应的语句前面加上sudo以获取超级权限。</p>
<p>如果您已经联网，则请直接转到步骤4，如果您没有联网，那么请在相应目录手动创建<code>gen_entitlements.py</code>并授予其执行权限，这个文件的内容为:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> struct</div><div class="line"></div><div class="line"><span class="keyword">if</span> len(sys.argv) != <span class="number">3</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Usage: %s appname dest_file.xcent"</span> % sys.argv[<span class="number">0</span>]</div><div class="line">    sys.exit(<span class="number">-1</span>)</div><div class="line"></div><div class="line">APPNAME = sys.argv[<span class="number">1</span>]</div><div class="line">DEST = sys.argv[<span class="number">2</span>]</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> DEST.endswith(<span class="string">'.xml'</span>) <span class="keyword">and</span> <span class="keyword">not</span> DEST.endswith(<span class="string">'.xcent'</span>):</div><div class="line">    <span class="keyword">print</span> <span class="string">"Dest must be .xml (for ldid) or .xcent (for codesign)"</span></div><div class="line">    sys.exit(<span class="number">-1</span>)</div><div class="line"></div><div class="line">entitlements = <span class="string">"""</span></div><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</div><div class="line">&lt;plist version="1.0"&gt;</div><div class="line">&lt;dict&gt;</div><div class="line">    &lt;key&gt;application-identifier&lt;/key&gt;</div><div class="line">    &lt;string&gt;%s&lt;/string&gt;</div><div class="line">    &lt;key&gt;get-task-allow&lt;/key&gt;</div><div class="line">    &lt;true/&gt;</div><div class="line">&lt;/dict&gt;</div><div class="line">&lt;/plist&gt;</div><div class="line">""" % APPNAME</div><div class="line"></div><div class="line">f = open(DEST,<span class="string">'w'</span>)</div><div class="line"><span class="keyword">if</span> DEST.endswith(<span class="string">'.xcent'</span>):</div><div class="line">    f.write(<span class="string">"\xfa\xde\x71\x71"</span>)</div><div class="line">    f.write(struct.pack(<span class="string">'&gt;L'</span>, len(entitlements) + <span class="number">8</span>))</div><div class="line">f.write(entitlements)</div><div class="line">f.close()</div></pre></td></tr></table></figure>
<h2 id="修改工程设置"><a href="#修改工程设置" class="headerlink" title="修改工程设置"></a>修改工程设置</h2><p>特别注意：本阶段之前的修改配置文件、准备脚本等，只需要做一次。但本阶段的操作，对每个需要真机调试的工程都要做一遍。</p>
<p>这个步骤的主要作用是支持真机调试，如果不做这个步骤，仍然可以通过步骤5来生成ipa在真机上运行，但是无法使用Xcode内置的调试器对在真机上运行的程序进行单步跟踪。如果您的程序在点击Run真机调试时秒退，请检查此步骤是否正确完成。</p>
<ol>
<li><p>禁用Xcode自动的签名操作</p>
<p> 将工程配置中所有的Code Signing选项全部设为Don’t Code Sign，如图。可能需要先点击“All”让这个选项显示出来</p>
<p> <img src="/images/ios-development-2.png" alt=""></p>
</li>
<li><p>添加自定义的生成后脚本<br>在Build Phases中添加一个Build Phase，输入以下脚本</p>
<pre><code>export CODESIGN_ALLOCATE=/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/codesign_allocate
if [ &quot;${PLATFORM_NAME}&quot; == &quot;iphoneos&quot; ] || [ &quot;${PLATFORM_NAME}&quot; == &quot;ipados&quot; ]; then
/Applications/Xcode.app/Contents/Developer/iphoneentitlements/gen_entitlements.py &quot;my.company.${PROJECT_NAME}&quot; &quot;${BUILT_PRODUCTS_DIR}/${WRAPPER_NAME}/${PROJECT_NAME}.xcent&quot;;
codesign -f -s &quot;iPhone Developer&quot; --entitlements &quot;${BUILT_PRODUCTS_DIR}/${WRAPPER_NAME}/${PROJECT_NAME}.xcent&quot; &quot;${BUILT_PRODUCTS_DIR}/${WRAPPER_NAME}/&quot;
fi
</code></pre><p> 对于Xcode 5，要在Editor菜单下的Add Build Phase项中添加，Build Phase，如图：</p>
<p> <img src="/images/ios-development-3.png" alt=""></p>
<p> 对于Xcode 4，在右下角的“加号”处添加，如图：</p>
<p> <img src="/images/ios-development-4.png" alt=""></p>
<p> 至此配置全部完成，下面就可以插上iPhone，重新选择生成目标来测试一下在线调试了！如果是第一次使用该设备调试，请先在Organizer中将设备切换为开发模式，具体操作请见常见问题5。</p>
</li>
</ol>
<h2 id="旁门左道生成IPA文件"><a href="#旁门左道生成IPA文件" class="headerlink" title="旁门左道生成IPA文件"></a>旁门左道生成IPA文件</h2><p>如果我的程序调试好了，怎么才能发给别人用呢？正常情况下IPA文件是从Xcode的Organizer中输出的，但是我们没有证书，这样输出会产生错误。我们只能用个小trick来完成这个操作了。</p>
<p>先将代码生成为Release目标，然后打开工程的输出文件夹，通常情况下这个目录是<br><code>/Users/你的用户名/Library/Developer/Xcode/DerivedData/以工程名打头的文件夹/Build/Products/Release-iphoneos</code>很纠结吧~这个目录下有个.app的文件，就是生成的程序了。把这个.app拖到iTunes中，它会出现在应用程序那个列表中，然后再把它从iTunes的那个列表中拖出来（比如拖到桌面），发生了什么？哈哈，它就这样变成.ipa了！</p>
<p>把这个.ipa发给朋友，大家就可以跟您一起分享这个程序了。</p>
<h2 id="答疑解惑"><a href="#答疑解惑" class="headerlink" title="答疑解惑"></a>答疑解惑</h2><ol>
<li><p>我是初学者，请问什么是权限？执行权限（x权限）是什么意思？什么是脚本？如何加执行权限？sudo是什么命令？vim是什么，如何在vim中保存更改？你说的目录我没找到怎么办？我有些步骤没看明白，能不能加QQ交流？</p>
<p> 解答：首先感谢您关注我的博客。这里要提醒各位初学者朋友，Xcode提供了非常完善的模拟器调试环境，模拟器调试要比真机调试方便得多，也简单得多，使用模拟器调试程序是iOS开发的常态。真机调试通常是在产品快要完工时才进行的，看一下程序在实际机器上的视觉效果等等。还有依赖于加速度计的程序要测试一下加速度计的程序有没有问题。所以初学者并不需要一开始就进行真机调试。初学者配置真机调试的主要目的可能并非学习技术，而是满足好奇心、追求成就感甚至是为了向朋友炫耀等等。而这些目的并不值得您花费这么大的精力来阅读本文。</p>
<p> 因此本文是给有一定基础的朋友看的，各种命令是免不了的。UNIX中的基本命令比如cp，mv，cd，chmod，sudo啥的还有vim编辑器，如果您都没听说过，强烈建议您不要尝试本文提到的修改。一旦改错了轻则Xcode挂掉，重则系统崩溃。如果遇到解决不了的问题欢迎留言询问，务必给出详细的错误信息，否则无法判断。博主恕不解答类似于如何执行脚本代码，如何赋予执行权限，如何使用vim编辑器（如何保存）等与iOS开发无关的UNIX基础问题。博主非常乐意以文会友，结识有思想、有创意、有技术的大牛。博主也会不定时到博客上对热心网友提出的问题进行简单的解答。但并没有充足的时间通过QQ对文中的步骤进行手把手的解释和指导。这里先向有这种需求的朋友说声抱歉了！</p>
</li>
<li><p>各种错误，错误信息中包含“No such file or directory”这句话</p>
<p> 解答：错误信息的含义非常清楚，就是“没有这个文件或者目录”。这类错误通常是由于您拷贝代码时不全或者开发环境安装错误等问题导致的。请再次检查报错的目录是否存在，检查代码与本文给出的是否严格一致，各种检查吧~总之是低级错误</p>
</li>
<li><p>联机调试时程序秒退，或者无法安装到设备，或者任何时候报错，错误信息中包含“code signing”、“CERT”、“signature”或者“certificate”字样的（最常见的错误）</p>
<p> 解答：证书错误或者签名错误，肯定是因为您没有严格文中的步骤做。提醒您检查的地方有：</p>
<ul>
<li>第一步中的plist文件是否已经正确修改</li>
<li>有没有设置为Don’t Code signing</li>
<li>生成后事件的代码是否已经正确粘贴</li>
<li>那个Python脚本是否已经成功执行</li>
<li>设备是否已经越狱并安装AppSync</li>
<li><p>第一步的iPhone Developer证书是否已经正确创建</p>
<p>  其中最可能出问题的就是生成后事件代码（文中的那个Run Script）没有正确执行。可能是您忘记了添加Run Script并粘贴那段代码，也可能是您没复制全，或者复制到了啥特殊字符导致执行出错。查看那个脚本执行结果的方法是在Xcode左侧的侧边栏里，点最靠右的一个标签（Show the Log navigator），看最近的一个Build日志（不是Debug日志），找到一行Run custom shell script “Run Script”那一行，正常情况下那一行跟其他行一样，是不能展开的。如果那一行左边有个小箭头，点击后能展开的话，说明执行出错，展开后的信息即为出错的信息。请认真查看错误信息并修正脚本中的错误。如果Build日志里根本没有Run custom shell script “Run Script”，那说明您忘记添加Build script了。。。</p>
<p>  Run Script经常报的一条错误是“replacing existing signature”。。。这个提示的意思是“替换已有的签名”，出现这个提示的原因是，你并没有成功的阻止Xcode使用默认的方法为应用程序签名。因为这个破解的原理就是阻止Xcode为app签名，而用script中的自定义过程手动为app签名。当script为app签名时，发现app已经被Xcode签名过了，就会报这个错误。出这个错误后提醒您检查的地方有两个：</p>
<ul>
<li>SDKSettings.plist中需要修改的地方是否已经正确修改</li>
<li>工程设置里是否将那5个签名的选项全部设为Don’t Code signing</li>
</ul>
</li>
</ul>
</li>
<li><p>iPad能用吗？</p>
<p> 解答：上述所有步骤无需修改可直接用于iPad开发。</p>
</li>
<li><p>为什么我的Build for Archiving选项是灰色的？</p>
<p> 解答：是因为您没有把设备插到电脑上。或者设备未开启开发模式。开启开发模式的方法是：插上设备，点Xcode右上角的Organizer图标（在Xcode 5中，点击Window菜单下的Organizer项），选中您的设备，看一下设备名称左侧的小灯是什么颜色的。若是灰色代表未开启开发模式。此时在右边窗口中点击“Use for Development”即可。若是黄色请重新插拔设备，若是绿色代表设备已经开启开发模式</p>
<p> 点击Use for Development后，会要求输入Apple ID，这里点击取消即可。这时启用设备开发模式的进程会立即终止。设备名称旁边应该有一个黄灯。此时重新插拔设备，Organizer中会出现一个进度条），等这个进度条跑完，小灯就会变成绿色，开发模式已经启用。</p>
<p> 最近经常有人提问说，无论怎么搞，Organizer中的灯始终是黄色的。这种情况几乎可以百分之百的确定是您的Xcode版本不够高。如果您的设备是iOS 5.1.1，则必须使用Xcode 4.3.2或以上版本。同样的道理，iOS 5.0.1对应Xcode 4.3.1，iOS 5.0对应Xcode 4.3……</p>
</li>
<li><p>我的iOS版本/Xcode版与你的不同，能用吗？</p>
<p> 解答：本人测试过的环境和设备已经在文章开头给出。其他环境我没有测试过，也没有条件测试，因此当您的环境与我的不同时，别问我可不可用，您可以试一下，然后把结果告诉我，也为其他的网友提供方便，在此先谢谢您了！</p>
</li>
<li><p>真机调试时出现Error launching remote program: failed to get the task for process xxx错误</p>
<p> 解答：如果该错误出现在编译运行之后，且现象为设备上的程序闪退，则是由于签名错误导致的，这是由于您没有严格按照上述步骤来做导致的，请参考常见问题3。</p>
</li>
</ol>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/ios/ios-development-without-idp/">http://kuangqi.me/ios/ios-development-without-idp/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，在Xcode上开发的程序只能在模拟器中运行，如果要放到真机上则要花费99美金购买开发者证书iDP。这严重阻碍了我等草根开发者探索的脚步。写个小程序，同学间分享一下这个小小的愿望都不能满足，自然不能善罢甘休。&lt;/p&gt;
&lt;p&gt;在没有iDP的情况下，要想将程序放到iPhone上调试，并最终发布IPA用于分享，需要以下几个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自己为自己颁发一个证书用于为生成的程序签名&lt;/li&gt;
&lt;li&gt;修改工程配置以及Xcode的配置文件和二进制文件以阻止其验证和签名&lt;/li&gt;
&lt;li&gt;通过自定义生成步骤，用伪造的证书为应用程序签名&lt;/li&gt;
&lt;li&gt;使用一点小trick来生成IPA文件&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="果粉手札" scheme="http://kuangqi.me/categories/ios/"/>
    
    
  </entry>
  
  <entry>
    <title>在Mac OS X下刷新DNS缓存</title>
    <link href="http://kuangqi.me/ios/flush-dns-cache-on-osx/"/>
    <id>http://kuangqi.me/ios/flush-dns-cache-on-osx/</id>
    <published>2014-03-11T17:50:56.000Z</published>
    <updated>2016-11-29T15:02:00.176Z</updated>
    
    <content type="html"><![CDATA[<p>与Windows不同的是，各版本的Mac OS X系统刷新DNS缓存的方法是不一样的。</p>
<ol>
<li><p>对于Tiger或更低版本 Mac OS：</p>
<pre><code>sudo lookupd -flushcache
</code></pre></li>
<li><p>对于Leopard和Snow Leopard：</p>
<pre><code>sudo dscacheutil -flushcache
</code></pre></li>
<li><p>对于Lion、Mountain Lion和Mavericks：</p>
<pre><code>sudo killall -HUP mDNSResponder
</code></pre></li>
</ol>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/ios/flush-dns-cache-on-osx/">http://kuangqi.me/ios/flush-dns-cache-on-osx/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;与Windows不同的是，各版本的Mac OS X系统刷新DNS缓存的方法是不一样的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;对于Tiger或更低版本 Mac OS：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo lookupd -flushcache
&lt;/code&gt;&lt;/pre&gt;&lt;/l
    
    </summary>
    
      <category term="果粉手札" scheme="http://kuangqi.me/categories/ios/"/>
    
    
  </entry>
  
  <entry>
    <title>Allegro PCB Editor与十字花焊盘有关的技巧</title>
    <link href="http://kuangqi.me/embedded/allegro-pcb-thermal-pad/"/>
    <id>http://kuangqi.me/embedded/allegro-pcb-thermal-pad/</id>
    <published>2013-07-12T14:52:56.000Z</published>
    <updated>2016-11-29T15:02:00.168Z</updated>
    
    <content type="html"><![CDATA[<p>花焊盘又称热焊盘、热风焊盘等。其作用是减少焊盘在焊接中向外散热，以防止因过度散热而导致的虚焊。在Allegro中，添加GND铺铜后，默认就会为相关的焊盘创建十字连接。但有时候自动添加的连接并非我们理想中的连接，我们可以对其进行细致的调节，使其满足我们的需求。</p>
<h2 id="调节十字连线宽度"><a href="#调节十字连线宽度" class="headerlink" title="调节十字连线宽度"></a>调节十字连线宽度</h2><p>默认的连线宽度是约束管理器中设置的线宽最小值，但这个最小值看起来有些单薄，但如果增大约束管理器中的最小值，又可能导致高密度的芯片地线处产生DRC错误。点击Shape - Global Dynamic Params…，在弹出的Global Dynamic Shape Parameters对话框中点击Thermal relief connects选项卡，可以通过下方的Use fixed thermal width of项目指定十字连接的宽度，或者通过Use thermal width oversize of来指定十字连接的宽度在约束管理器线宽设定值的基础上再增加多少。</p>
<a id="more"></a>
<h2 id="调节热焊盘的连接方式或者删除热焊盘"><a href="#调节热焊盘的连接方式或者删除热焊盘" class="headerlink" title="调节热焊盘的连接方式或者删除热焊盘"></a>调节热焊盘的连接方式或者删除热焊盘</h2><p>同样在Global Dynamic Shape Parameters对话框的Thermal relief connects选项卡中，Thru pins、Smd pins、Vias三项可以分别设定通孔焊盘、表贴焊盘和过孔的热焊盘连接方式，设定为Full contact即为直接连接，不添加热焊盘。</p>
<h2 id="设置特定焊盘的热焊盘参数"><a href="#设置特定焊盘的热焊盘参数" class="headerlink" title="设置特定焊盘的热焊盘参数"></a>设置特定焊盘的热焊盘参数</h2><p>有时候为了可靠接地，我们可能需要设置特定的几个焊盘的接地方式，这在射频电路中可能会遇到，比如天线的接地等。设置的方法是选中指定的焊盘（Find调板中仅选中Pins然后点击需要设置的焊盘或者框选需要设置的连续多个焊盘），然后点击右键，在菜单中点Property edit，在弹出的对话框中添加相应的属性，即可为该焊盘单独指定热焊盘参数。比如<code>DYN_FIXED_THERM_WIDTH</code>代表连接线宽，<code>DYN_THERMAL_CON_TYPE</code>代表连接类型。</p>
<h2 id="为指定的一片铺铜设置特定的热焊盘参数"><a href="#为指定的一片铺铜设置特定的热焊盘参数" class="headerlink" title="为指定的一片铺铜设置特定的热焊盘参数"></a>为指定的一片铺铜设置特定的热焊盘参数</h2><p>通过Shape - Select Shape or Void/Cavity命令来选择需要设定的铺铜Shape，然后点击右键，选择Parameters，弹出的Dynamic Shape Instance Parameters对话框与上述全局设置对话栏类似，指定相应参数即可。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/embedded/allegro-pcb-thermal-pad/">http://kuangqi.me/embedded/allegro-pcb-thermal-pad/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;花焊盘又称热焊盘、热风焊盘等。其作用是减少焊盘在焊接中向外散热，以防止因过度散热而导致的虚焊。在Allegro中，添加GND铺铜后，默认就会为相关的焊盘创建十字连接。但有时候自动添加的连接并非我们理想中的连接，我们可以对其进行细致的调节，使其满足我们的需求。&lt;/p&gt;
&lt;h2 id=&quot;调节十字连线宽度&quot;&gt;&lt;a href=&quot;#调节十字连线宽度&quot; class=&quot;headerlink&quot; title=&quot;调节十字连线宽度&quot;&gt;&lt;/a&gt;调节十字连线宽度&lt;/h2&gt;&lt;p&gt;默认的连线宽度是约束管理器中设置的线宽最小值，但这个最小值看起来有些单薄，但如果增大约束管理器中的最小值，又可能导致高密度的芯片地线处产生DRC错误。点击Shape - Global Dynamic Params…，在弹出的Global Dynamic Shape Parameters对话框中点击Thermal relief connects选项卡，可以通过下方的Use fixed thermal width of项目指定十字连接的宽度，或者通过Use thermal width oversize of来指定十字连接的宽度在约束管理器线宽设定值的基础上再增加多少。&lt;/p&gt;
    
    </summary>
    
      <category term="软硬兼施" scheme="http://kuangqi.me/categories/embedded/"/>
    
    
  </entry>
  
  <entry>
    <title>CC3000驱动移植中的几个陷阱</title>
    <link href="http://kuangqi.me/embedded/cc3000-host-driver-porting-guide/"/>
    <id>http://kuangqi.me/embedded/cc3000-host-driver-porting-guide/</id>
    <published>2013-06-16T17:47:44.000Z</published>
    <updated>2016-11-29T15:02:00.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文档中的一个小错误"><a href="#文档中的一个小错误" class="headerlink" title="文档中的一个小错误"></a>文档中的一个小错误</h2><p><code>wlan_ioctl_get_scan_results</code>函数用于返回WLAN扫描的结果，每调用一次返回一个结果。返回的数据结构在文档中给出，但是这里文档写错了。。。Result entry前的56bytes应该是42bytes，而每次的结果总有有4+4+42=50(bytes)。把下面的结果加起来，也会发现各项的和是42而不是56. 这本来只是手册上的一个笔误，但在编程时，大家通常会使用一个结构体来接收返回的数据，如果这个字节数不对的话，就会影响内存对齐，从而导致返回的结果错误。这里，我使用的结构体定义如下：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">typedef struct _wlan_full_scan_results_args_t</div><div class="line">&#123;</div><div class="line">    /*</div><div class="line">        4 Bytes: number of networks found</div><div class="line">        4 Bytes: The status of the scan: 0 - agged results, 1 - results valid, 2 - no results</div><div class="line">        &#123;</div><div class="line">            1 bit isValid - is result valid or not</div><div class="line">            7 bits rssi - RSSI value;</div><div class="line">        &#125;</div><div class="line">        &#123;</div><div class="line">            2 bits: securityMode - security mode of the AP: 0 - Open, 1 - WEP, 2 WPA, 3 WPA2</div><div class="line">            6 bits: SSID name length</div><div class="line">        &#125;</div><div class="line">        2 bytes: the time at which the entry has entered into scans result table</div><div class="line">        32 bytes: SSID name</div><div class="line">        6 bytes: BSSID</div><div class="line">    */</div><div class="line">    uint32_t ap_count;</div><div class="line">    uint32_t ap_state;</div><div class="line">    uint32_t ap_vaild    : 1;</div><div class="line">    uint32_t ap_rssi     : 7;</div><div class="line">    uint32_t ap_security : 2;</div><div class="line">    uint32_t ap_ssidlen  : 6;</div><div class="line">    uint16_t ap_time;</div><div class="line">    char     ap_ssid[32];</div><div class="line">    uint8_t  ap_bssid[6];</div><div class="line">    uint8_t  reserved[2]; //for memory align</div><div class="line">&#125; wlan_scan_result;</div></pre></td></tr></table></figure>
<p>另外，这个函数读到最后一条结果时，再读会返回一个长度为0的结果，即前四个字节(number of networks found)为零，然后再读才会读出下一次扫描的结果。这一点手册上并没有指出，是我们在编程实践中自己发现的。</p>
<p><em>2014年3月19日注：目前最新版的CC3000官方API文档中这个错误已经得到了修正。</em></p>
<h2 id="两组中断控制函数的实现"><a href="#两组中断控制函数的实现" class="headerlink" title="两组中断控制函数的实现"></a>两组中断控制函数的实现</h2><p>如果前面一条是一个小坑的话，这一条绝对是一个大坑。<code>SpiPause</code> - <code>SpiResume</code>与<code>WlanInterruptDisable</code> - <code>WlanInterruptEnable</code>这两组中断控制函数是CC3000整个驱动移植工作中最tricky的部分。目前为止，我见过的CC3000的驱动实现中，不论是开源的、产品正在开发而尚未开源的实现，除了官方的例程以外，还没有人将这两组函数写对。甚至有人能通过降低SPI速率、修改IO中断方式等等办法，使得整个程序得以正常运行，将错误带到了产品中。只要有人说：“我的CC3000驱动有点问题，调了很久都不行。。。”之类的话，不用等他说完，就可以猜想他是把这两组函数写错了。</p>
<p>这两组函数非常容易错，错了又非常难以发现。这两组函数的实现已经成为了CC3000驱动移植的主要障碍。其主要原因如下：</p>
<ol>
<li>是官方的Porting Guide没有明确指出这两组函数的区别。很多人则想当然地认为这两组函数是一样的。甚至是一组中调用另一组。再看官方的实现，又有点不知所云，所以就忽略了这个问题。</li>
<li>忽略这个问题后，CC3000模块可以正常初始化，还可以正常扫描WiFi热点，有人还能正常进行Smart config，甚至有人还能正常打开socket并使用UDP协议发送数据！开发者根据CC3000驱动自下而上分层的架构来看，看到SPI已经可以进行正常通信，从而直接在心理上排除了SPI驱动实现有误的可能性，错误查来查去还是在原地兜圈子。</li>
<li>由于这两组函数实现有误导致的错误几乎成了一个人品问题，在不同速度MCU上的错误实现会导致不同的错误现象，以至于大家的描述不统一，很难从现象判断到底是哪儿错了，即使在网上根据错误现象搜索或者发帖求助，也很难得到有针对性的答案。</li>
</ol>
<p>为什么这两组函数写错了，会有这么神奇的问题呢？答案就是，这里的错误会导致程序的“竞态问题”，类似于数字电路基础中的“竞争冒险”。SPI速率、AP的品质和信号强度、IO口翻转速度、延时的误差等无关紧要的问题，都可能让竞态问题出现不同的现象。因此，出现的错误现象千奇百怪，貌似跟人品有关就不难解释了。说了这么多，下面就来解释一下这两组函数到底有什么区别：</p>
<p><code>WlanInterruptDisable</code>的作用是关闭IO口的外部中断，也就是IRQ的下降沿中断。关闭以后，IRQ下降沿的中断将被<strong>丢弃</strong>，在调用<code>WlanInterruptEnable</code>时，会重新使能中断，之后发生在该IO上的外部中断又再次可以响应。而中断被禁用期间，发生的中断都被丢弃，永远不再响应。这个函数一般人都写对了。</p>
<p><code>SpiPauseSpi</code>函数是暂时挂起IO口外部中断，也就是IRQ下降沿中断，如果在<code>SpiPauseSpi</code>调用之后，IRQ线上再有下降沿，该中断将一直<strong>保持Pending</strong>状态，暂时不调用中断服务程序，该中断必须在调用<code>SpiResumeSpi</code>被重新响应，而不能被丢弃。这里，很多很多很多人，都，写错了。。。</p>
<p>这种中断的响应方式比较特殊，像STM32就没有在标准驱动库中实现相应的API，而必须通过操作寄存器的方式来手工实现。相应寄存器的定义，既不在芯片Datasheet里，也不在那份大家熟知的STM32F1系列<em>Reference Manual(RM0008)</em>里，而是在很多STM32开发者都没有听说过的一份文档<em>PM0056——STM32F10xxx/20xxx/21xxx/L1xxxx Cortex-M3 programming manual</em>里。有很多MCU，甚至包括TI的MSP430，在硬件上根本就不支持这种响应方式，因此只能用一些猥琐的方法来实现。MSP430该函数的代码居然是向一个配置为输入的IO口写数据，足以让不熟悉MSP430的开发者挠头了。</p>
<h2 id="TI提供的CC3000-Host-Driver假设char类型是无符号的"><a href="#TI提供的CC3000-Host-Driver假设char类型是无符号的" class="headerlink" title="TI提供的CC3000 Host Driver假设char类型是无符号的"></a>TI提供的CC3000 Host Driver假设<code>char</code>类型是无符号的</h2><p>这个问题可能很多人都不会遇到，因为在嵌入式开发中char通常都是无符号的，基本所有的用于嵌入式平台的编译器默认情况下都会这样设定。而我则比较习惯PC上有符号的<code>char</code>，所以我手贱给GCC加了一个编译参数<code>-fsigned-char</code>……</p>
<p>TI的Host Driver就比较扯淡，它假设<code>char</code>是无符号的，并且在<code>char</code>有符号时就会因符号位在强制转换中的行为不同而出错。这个问题不容易排查，因为需要跟踪到TI实现的Host Driver里，而大家通常都会假设这个实现是没错的，能跟进去就是一种勇气了……我当时遇到这个问题时，不知道是哪儿的错误，就在很多回调函数中添加了串口打印的语句，通过串口输出，观察各个函数被调用的情况，结合现象，再加以大胆的猜想，才解决了这个问题。</p>
<h2 id="供电"><a href="#供电" class="headerlink" title="供电"></a>供电</h2><p><img src="/images/cc3000-porting-1.png" alt=""></p>
<p>这个是一个硬件问题，一个不应该犯的错误。目前大家用的最多的CC3000模块还是Jorjin的WG1300，而Jorjin的文档中并未给出该模块工作时所需的电流。在一些追求体积最小化的应用中，大家也普遍使用了SOT23-5封装的小型LDO，这类LDO的电流通常只有100mA左右。一个单片机才几十毫安的电流，一个WiFi又能大到哪里去呢？</p>
<p>看看德州仪器官方WiFi模块（TI的WiFi模块封装尺寸和引脚定义与WG1300完全相同，本人咨询Jorjin总代理后得知TI的官方模块正是由Jorjin设计并制造的，与WG1300相比在硬件上也是完全一样的，只是外壳上的字不同而已）的文档后，不禁大吃一惊！发送电流峰值275mA，接收峰值103mA，合起来有接近400mA的峰值电流！正是因为如此，我120mA的LDO被瞬间秒杀，电压从3.3V拉到了2.6V……我居然还不知道！因为STM32可以在2.6V下正常工作，我的还是在各种加断点、各种单步跟踪，完全没有意识到模块已经因电压过低死机了。。。看了一下Sparkcore的电路图，发现它用的LDO型号是MIC5219，一个SOT23-5封装，500mA的LDO，哈哈~</p>
<p>另外还有一个不算是坑，或者说只是一个小坑~就是<code>security.h</code>文件最后少了一段代码，在用C++编译时可能导致编译出错，并且把错误报到别的文件里，让人很困惑。。。缺少的代码如下，大家一看就懂了~</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#ifdef __cplusplus</div><div class="line">&#125;</div><div class="line">#endif</div></pre></td></tr></table></figure>
<hr>
<p>如果您在CC3000软硬件方面还有什么其他的困扰，欢迎联系我，QQ：284388369</p>
<p>本人可以提供关于驱动移植、固件更新、硬件设计、量产优化等方面的有偿技术指导。</p>
<p>不调试具体网络通信代码，只负责跑通官方BasicWiFiApplication，不承接外包项目。</p>
<hr>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/embedded/cc3000-host-driver-porting-guide/">http://kuangqi.me/embedded/cc3000-host-driver-porting-guide/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文档中的一个小错误&quot;&gt;&lt;a href=&quot;#文档中的一个小错误&quot; class=&quot;headerlink&quot; title=&quot;文档中的一个小错误&quot;&gt;&lt;/a&gt;文档中的一个小错误&lt;/h2&gt;&lt;p&gt;&lt;code&gt;wlan_ioctl_get_scan_results&lt;/code&gt;函数用于返回WLAN扫描的结果，每调用一次返回一个结果。返回的数据结构在文档中给出，但是这里文档写错了。。。Result entry前的56bytes应该是42bytes，而每次的结果总有有4+4+42=50(bytes)。把下面的结果加起来，也会发现各项的和是42而不是56. 这本来只是手册上的一个笔误，但在编程时，大家通常会使用一个结构体来接收返回的数据，如果这个字节数不对的话，就会影响内存对齐，从而导致返回的结果错误。这里，我使用的结构体定义如下：&lt;/p&gt;
    
    </summary>
    
      <category term="软硬兼施" scheme="http://kuangqi.me/categories/embedded/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac系统下的Wi-Fi扫描命令</title>
    <link href="http://kuangqi.me/ios/wifi-scaning-on-os-x/"/>
    <id>http://kuangqi.me/ios/wifi-scaning-on-os-x/</id>
    <published>2013-06-01T15:37:53.000Z</published>
    <updated>2016-11-29T15:02:00.191Z</updated>
    
    <content type="html"><![CDATA[<p>在Mac系统下扫描WiFi接入点，可以列出SSID，BSSID，RSSI等详细信息<br>命令如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -s</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/ios/wifi-scaning-on-os-x/">http://kuangqi.me/ios/wifi-scaning-on-os-x/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Mac系统下扫描WiFi接入点，可以列出SSID，BSSID，RSSI等详细信息&lt;br&gt;命令如下&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line
    
    </summary>
    
      <category term="果粉手札" scheme="http://kuangqi.me/categories/ios/"/>
    
    
  </entry>
  
  <entry>
    <title>Photoshop“历史”和“撤销”功能使用技巧</title>
    <link href="http://kuangqi.me/image-processing/history-panel-in-photoshop/"/>
    <id>http://kuangqi.me/image-processing/history-panel-in-photoshop/</id>
    <published>2013-05-23T05:34:32.000Z</published>
    <updated>2016-11-29T15:02:00.178Z</updated>
    
    <content type="html"><![CDATA[<p>今天看到有同学吐槽Photoshop的撤销功能不顺手，以至于到了骂Adobe的脑子被驴踢了的程度，底下的回复更是群情激昂，怒斥PS二逼。。。PS是一个庞大复杂的系统，经过二十多年的发展，其各项设计已经被精雕细琢，几乎无可挑剔了。所以如果你真的遇到PS特别特别不顺手，特别特别二逼的操作时，也许更应该考虑一下是否有更好的办法。下面我就针对“撤销”这一常用的操作新手容易遇到的一些问题做一个汇总和解答。</p>
<h2 id="1-为什么Ctrl-Z只能撤销一步？！"><a href="#1-为什么Ctrl-Z只能撤销一步？！" class="headerlink" title="1. 为什么Ctrl+Z只能撤销一步？！"></a>1. 为什么Ctrl+Z只能撤销一步？！</h2><p>这基本上是PS新手最经常问到的问题。Ctrl+Z快捷键的作用是交换当前状态和上一步的状态，这个快捷键跟Windows中其它软件，比如Word的快捷键类似却有所不同，所以如果用Word的思路考虑PS，那这个快捷键确实够二逼。不过这个快捷键这样设计是有道理的，因为撤销一步要比撤销多步更常用，而且切换对比这一步的效果跟刚才的效果这个功能也很常用。比如我画画的时候加了一笔，我想对比一下加这一笔好不好，那我就会反复的按Ctrl+Z来对比。而撤销多步的功能一般不常用，即使用到，也不是为了撤销两步三步，而是很多步，对于怎样方便的一下子撤销很多步，PS另作了考虑，这个我们一会儿再说。这个是统计规律，是从大量的设计师的设计实践中总结出来的，Ctrl+Z撤销一步的设置能一直保留十几年，是有其事实依据的。</p>
<a id="more"></a>
<h2 id="2-那我要撤销多步怎么办？或者说，我的世界观中的“撤销”在PS里该怎么做？"><a href="#2-那我要撤销多步怎么办？或者说，我的世界观中的“撤销”在PS里该怎么做？" class="headerlink" title="2. 那我要撤销多步怎么办？或者说，我的世界观中的“撤销”在PS里该怎么做？"></a>2. 那我要撤销多步怎么办？或者说，我的世界观中的“撤销”在PS里该怎么做？</h2><p>很简单，PS为这个操作分配了另外一个快捷键，Ctrl+Alt+Z。按它就可以撤销多步啦~还有顺便说一下，“重做”在PS里的快捷键是Ctrl+Shift+Z</p>
<h2 id="3-神马？为啥Ctrl-Alt-Z不管用？而且QQ还跑了出来！！"><a href="#3-神马？为啥Ctrl-Alt-Z不管用？而且QQ还跑了出来！！" class="headerlink" title="3. 神马？为啥Ctrl+Alt+Z不管用？而且QQ还跑了出来！！"></a>3. 神马？为啥Ctrl+Alt+Z不管用？而且QQ还跑了出来！！</h2><p>没错~！Ctrl+Alt+Z在默认情况下还是QQ“提取消息”的快捷键，而这个操作我平常实在是少用。我的习惯还是点击QQ在任务栏里的图标。所以为了不干扰PS，我关掉了QQ的这个快捷键。我建议大家也这么做。</p>
<h2 id="4-囧了，保存之后不能按Ctrl-Z撤销了。。。"><a href="#4-囧了，保存之后不能按Ctrl-Z撤销了。。。" class="headerlink" title="4. 囧了，保存之后不能按Ctrl+Z撤销了。。。"></a>4. 囧了，保存之后不能按Ctrl+Z撤销了。。。</h2><p>每次操作后，Ctrl+Z快捷键指向的功能都会变。比如用了笔刷，Ctrl+Z的功能就是“撤销笔刷”，然后又用了橡皮，Ctrl+Z就又变成“撤销橡皮”。所以按了保存后，Ctrl+Z就理应变成“撤销保存”，显然保存是即时写入硬盘的，不能撤销了。所以按保存后，Ctrl+Z就不指向任何功能了。所以刚保存完的时候，Ctrl+Z是没有功能的，这就给一些用户带来了困扰，认为保存操作清空了历史记录，事实不是这样，只是关掉了此刻的Ctrl+Z快捷键而已。</p>
<h2 id="5-那保存后我要撤销到保存前的某个状态怎么办？"><a href="#5-那保存后我要撤销到保存前的某个状态怎么办？" class="headerlink" title="5. 那保存后我要撤销到保存前的某个状态怎么办？"></a>5. 那保存后我要撤销到保存前的某个状态怎么办？</h2><p>我说过，保存对历史记录功能没有任何影响，因此你仍然可以使用Ctrl+Alt+Z来撤销到有记录的（默认是最近20步的）任何一个之前的状态。你还可以通过Window菜单下的History项调出“历史”调板，其中以文字方式记录了你最近的操作，你可以用鼠标点击这些状态，从而查看这些状态的预览，满意后在画布上继续操作即可。有操作后此状态后的所有状态会被新的状态覆盖。</p>
<h2 id="6-神马？会把之后的状态都覆盖？我不想这样啊！那我改了半天还是觉得撤销前的效果好咋办？"><a href="#6-神马？会把之后的状态都覆盖？我不想这样啊！那我改了半天还是觉得撤销前的效果好咋办？" class="headerlink" title="6. 神马？会把之后的状态都覆盖？我不想这样啊！那我改了半天还是觉得撤销前的效果好咋办？"></a>6. 神马？会把之后的状态都覆盖？我不想这样啊！那我改了半天还是觉得撤销前的效果好咋办？</h2><p>没事，在“历史”调板中打算动刀的状态上点一下，再点下面那个带有小加号的图标，就会以该状态为起点新建一个文档，然后你可以在新的文档里为所欲为，如果新的效果不好，你可以直接关掉新的文档不保存。而原来的文档中所有的状态都好好的。如果对新文档的效果满意，可以把相应的资源复制回原文档，或者干脆删掉原文档，以新文档为基础另起炉灶~</p>
<h2 id="7-我操作次数多了，历史记录只能记录30步，需要的步骤回不去了怎么办？"><a href="#7-我操作次数多了，历史记录只能记录30步，需要的步骤回不去了怎么办？" class="headerlink" title="7. 我操作次数多了，历史记录只能记录30步，需要的步骤回不去了怎么办？"></a>7. 我操作次数多了，历史记录只能记录30步，需要的步骤回不去了怎么办？</h2><p>如果这件事情已经发生了，那只能说很抱歉。不过你下一次可以通过一些操作来避免这种情况。PS的历史调板里提供了“快照”功能，点击“历史”调板中的小照相机图标，即可以当前的状态创建一个快照。这个快照无论操作多少步都是不会被覆盖掉的。所以你可以在任何时候撤销到这一个状态。文件打开的时候，PS会自动为你创建一个快照，所以点击“历史”调板的第一栏，就可以回到文件打开时的状态。</p>
<h2 id="8-快照功能不错，可我老是忘了创建，到用时才后悔，咋办？"><a href="#8-快照功能不错，可我老是忘了创建，到用时才后悔，咋办？" class="headerlink" title="8. 快照功能不错，可我老是忘了创建，到用时才后悔，咋办？"></a>8. 快照功能不错，可我老是忘了创建，到用时才后悔，咋办？</h2><p>点击“历史”调板的旁边的下拉菜单，可以找到“历史选项”，其中可以勾选在每次保存时都自动创建一个快照。完成一个效果就顺手保存一下，很多人都有这个习惯吧~顺带创建一个快照就方便多了吧~这个对话框中还有些其它的选项，比如把图层可见性的调整也记录下来等等。</p>
<h2 id="9-“历史”调板记录的步数太少了！怎么增大？"><a href="#9-“历史”调板记录的步数太少了！怎么增大？" class="headerlink" title="9. “历史”调板记录的步数太少了！怎么增大？"></a>9. “历史”调板记录的步数太少了！怎么增大？</h2><p>点击Edit菜单的Preferences下的Performance项，弹出的对话框中的History States就是历史记录的步数，可以把它改大一点。不过我不推荐大家修改这个步数，因为历史记录多了会消耗大量的系统资源。结合使用快照功能，20步的默认值实际上绰绰有余。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/image-processing/history-panel-in-photoshop/">http://kuangqi.me/image-processing/history-panel-in-photoshop/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天看到有同学吐槽Photoshop的撤销功能不顺手，以至于到了骂Adobe的脑子被驴踢了的程度，底下的回复更是群情激昂，怒斥PS二逼。。。PS是一个庞大复杂的系统，经过二十多年的发展，其各项设计已经被精雕细琢，几乎无可挑剔了。所以如果你真的遇到PS特别特别不顺手，特别特别二逼的操作时，也许更应该考虑一下是否有更好的办法。下面我就针对“撤销”这一常用的操作新手容易遇到的一些问题做一个汇总和解答。&lt;/p&gt;
&lt;h2 id=&quot;1-为什么Ctrl-Z只能撤销一步？！&quot;&gt;&lt;a href=&quot;#1-为什么Ctrl-Z只能撤销一步？！&quot; class=&quot;headerlink&quot; title=&quot;1. 为什么Ctrl+Z只能撤销一步？！&quot;&gt;&lt;/a&gt;1. 为什么Ctrl+Z只能撤销一步？！&lt;/h2&gt;&lt;p&gt;这基本上是PS新手最经常问到的问题。Ctrl+Z快捷键的作用是交换当前状态和上一步的状态，这个快捷键跟Windows中其它软件，比如Word的快捷键类似却有所不同，所以如果用Word的思路考虑PS，那这个快捷键确实够二逼。不过这个快捷键这样设计是有道理的，因为撤销一步要比撤销多步更常用，而且切换对比这一步的效果跟刚才的效果这个功能也很常用。比如我画画的时候加了一笔，我想对比一下加这一笔好不好，那我就会反复的按Ctrl+Z来对比。而撤销多步的功能一般不常用，即使用到，也不是为了撤销两步三步，而是很多步，对于怎样方便的一下子撤销很多步，PS另作了考虑，这个我们一会儿再说。这个是统计规律，是从大量的设计师的设计实践中总结出来的，Ctrl+Z撤销一步的设置能一直保留十几年，是有其事实依据的。&lt;/p&gt;
    
    </summary>
    
      <category term="绘云描鲤" scheme="http://kuangqi.me/categories/image-processing/"/>
    
    
  </entry>
  
  <entry>
    <title>23岁生日之最</title>
    <link href="http://kuangqi.me/essay/23rd-birthday/"/>
    <id>http://kuangqi.me/essay/23rd-birthday/</id>
    <published>2013-05-08T15:59:59.000Z</published>
    <updated>2016-11-29T15:02:00.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-最早"><a href="#1-最早" class="headerlink" title="1. 最早"></a>1. 最早</h2><p>李雪大神早在5月6日中午就发来祝福~荣登本年度最早祝福！</p>
<h2 id="2-“最”早"><a href="#2-“最”早" class="headerlink" title="2. “最”早"></a>2. “最”早</h2><p>陶富美童鞋早上8:04发来一条洋气的iMessage~荣登当日最早~</p>
<h2 id="3-最Geek"><a href="#3-最Geek" class="headerlink" title="3. 最Geek"></a>3. 最Geek</h2><p>昀牛祝我“密码日快乐”，我只想说一句——“你赢了！！！”。昀牛毫无疑问的荣获最Geek奖。。。</p>
<a id="more"></a>
<h2 id="4-最懒"><a href="#4-最懒" class="headerlink" title="4. 最懒"></a>4. 最懒</h2><p>王颖倩童鞋一条状态向三位同学传达了生日祝福，荣获最懒送祝福者称号~</p>
<h2 id="5-最不够意思-最够意思"><a href="#5-最不够意思-最够意思" class="headerlink" title="5. 最不够意思/最够意思"></a>5. 最不够意思/最够意思</h2><p>欢牛一早就发来祝福短信，遗憾的是随后1分钟又发了一条“程序出bug了，能不能过来调一下”。。。然后就没有然后了，木有礼物也木有surprise……</p>
<p>后来欢牛迫于昨晚跟我赌50块钱输了的压力与国创结项答辩后的轻松心情之下，居然斥巨资25元（原价49元，生日特惠25元）请我吃金釜山自助~！于是将最不够意思/最够意思双料大奖颁发给欢牛牛牛牛牛~~~</p>
<h2 id="6-最不耐烦"><a href="#6-最不耐烦" class="headerlink" title="6. 最不耐烦"></a>6. 最不耐烦</h2><p>陆牛显然已经忘了我生日这回事，不过早上经过新浪微博的提醒，还是不得不想起来了。然后他又收到了人人、飞信等各种提醒，于是说“为啥好像全世界都知道你过生日”。。。显然他希望通过苍白的玩笑掩盖他不仁不义的本质！授予“最不耐烦”奖，你必须服！</p>
<h2 id="7-最自动化"><a href="#7-最自动化" class="headerlink" title="7. 最自动化"></a>7. 最自动化</h2><p>今天我的Google Doodle变成了一堆生日蛋糕~出乎意料啦~</p>
<h2 id="8-最绝杀"><a href="#8-最绝杀" class="headerlink" title="8. 最绝杀"></a>8. 最绝杀</h2><p>若溪童鞋在今天还有5分钟结束时送上了“绝杀”祝福，荣获绝杀奖~~</p>
<p>当然还有很多一直有联系和很少联系的同学今天发来了生日祝福，没法一一提名了，这里一并致谢~！感谢你们记得我，在乎我。22岁，再见；23岁，走你~！</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/essay/23rd-birthday/">http://kuangqi.me/essay/23rd-birthday/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-最早&quot;&gt;&lt;a href=&quot;#1-最早&quot; class=&quot;headerlink&quot; title=&quot;1. 最早&quot;&gt;&lt;/a&gt;1. 最早&lt;/h2&gt;&lt;p&gt;李雪大神早在5月6日中午就发来祝福~荣登本年度最早祝福！&lt;/p&gt;
&lt;h2 id=&quot;2-“最”早&quot;&gt;&lt;a href=&quot;#2-“最”早&quot; class=&quot;headerlink&quot; title=&quot;2. “最”早&quot;&gt;&lt;/a&gt;2. “最”早&lt;/h2&gt;&lt;p&gt;陶富美童鞋早上8:04发来一条洋气的iMessage~荣登当日最早~&lt;/p&gt;
&lt;h2 id=&quot;3-最Geek&quot;&gt;&lt;a href=&quot;#3-最Geek&quot; class=&quot;headerlink&quot; title=&quot;3. 最Geek&quot;&gt;&lt;/a&gt;3. 最Geek&lt;/h2&gt;&lt;p&gt;昀牛祝我“密码日快乐”，我只想说一句——“你赢了！！！”。昀牛毫无疑问的荣获最Geek奖。。。&lt;/p&gt;
    
    </summary>
    
      <category term="我笔我心" scheme="http://kuangqi.me/categories/essay/"/>
    
    
  </entry>
  
  <entry>
    <title>STM32 RTC晶振起振指南</title>
    <link href="http://kuangqi.me/embedded/note-on-stm32-rtc-oscillator/"/>
    <id>http://kuangqi.me/embedded/note-on-stm32-rtc-oscillator/</id>
    <published>2013-04-28T06:10:21.000Z</published>
    <updated>2016-11-29T15:02:00.185Z</updated>
    
    <content type="html"><![CDATA[<p>STM32的RTC晶振经常出现不起振的问题，这已经是业界共识了。。。很多人在各种电子论坛上求助类似于“求高手指点！RTC晶振不起振怎么办”的问题，而其答案基本可以概括为“这次高手帮不了你了”</p>
<p>更有阴谋论者提出让人啼笑皆非的解释——STM32的RTC晶振不起振是ST与晶振厂商串通后故意搞出来的，目的是提高某晶振厂商高端晶振的销量。。。</p>
<p>最近做的几块板子也用到了STM32的RTC，前后两版一共做了大概6片，幸运的是并未遇到晶振不起振的现象。而我采用的是3毛钱一个的普通晶振，并未选用传说中低负载高精度晶振。。。后来在另外一片实验性质的板子上首次遇到了晶振不起振的问题，而且做了2片都不起振，这才让我意识到这个问题的严重性。</p>
<a id="more"></a>
<p>从上述现象来看，我认为对RTC晶振起振影响最大的因素应该是PCB的布线。但是遇到问题时通常是PCB已做好，甚至已经做了几百块，没有回头路了。于是大家更关注的问题似乎就是“如何补救”了。在网上搜索一下，你就会发现世界是如此美好！每个人的经验和建议都不一样，甚至是完全相反的！这种现象告诉我们，除了PCB布线，对晶振起振影响最大的似乎不是电气参数，而是另外一种不可忽略的因素——人品！</p>
<p>各种相互矛盾的经验也告诉我们，导致晶振不起振的原因是多种多样的，也是因“人”而异的。也许，我们无法找到一个绝对有效的经验一举解决STM32的RTC晶振这个让人头疼的问题，但我们可以从各种经验中找到一些线索，为最终摸索到适合自己这块板子的解决方案提供一些帮助和提示。</p>
<p>如果晶振不起振，尤其是你已经使用了传说中的爱普生6pF晶振后还是不行，也许你应该尝试对以下几个方面排列组合，找到适合你这块板子的，更容易起振的方式。</p>
<p>下面就罗列一下可能影响RTC晶振起振的因素</p>
<ol>
<li><p><strong>晶振的品牌和负载电容</strong><br>大家貌似都知道要用6pF的晶振，但我发现其实12.5pF的也可以用。大家都说KDS日本原装的好，我那个3毛钱的国产晶振貌似也没啥大问题。。。</p>
</li>
<li><p><strong>晶振外接的匹配电容</strong><br>有人说6pF的晶振要配6pF的电容。但有经验公式指出这个电容的值应该是晶振本身负载电容的两倍，6pF的晶振应该配10pF的匹配电容，当然12.5pF的就应该配20pF或者22pF的电容了~电容值不匹配可能造成晶振不起振。更神奇的是，有人指出去掉外接的匹配电容会使晶振起振！这似乎没啥道理，但在我的板子上，有且仅有这个方案是可行的！！！</p>
</li>
<li><p><strong>晶振并联的反馈电阻</strong><br>晶振可以并联一个高阻值的电阻，据说这样更容易起振。。。这个电阻的阻值有人说是1MΩ，有人说是5MΩ，也有人说是10MΩ，，，当然也有人说不能并联这个电阻，并联了反而不起振</p>
</li>
<li><p><strong>XTALout到晶振间串联电阻</strong><br>这种做法是官方的应用笔记指出的，而且给出了这个电阻的计算公式。对这个电阻的的必要性也是众说纷纭，同样存在两种矛盾的说法，即必须要有这电阻，否则不起振。还有一说不能有这个电阻，否则不起振。。。从官方的应用笔记来看，这个电阻的主要作用是保护晶振，以防晶振发热。由此看来这个这个电阻似乎并非影响晶振起振的主要因素，甚至可能让晶振更难起振。</p>
</li>
<li><p><strong>晶振的外壳是否接地</strong><br>这个就不用说了吧。。。晶振的外壳是金属的，做封装时可以把那个焊盘做成机械焊盘而悬空，也可以做成电气焊盘，然后连接到GND。对这个说法同样存在争议，有人说外壳必须接地，也有人说接地后反而不起振。</p>
</li>
<li><p><strong>提高Vbat引脚的电源质量</strong><br>这种说法是有一定道理的，因为RTC部分是由Vbat的来供电的。有人说Vbat引脚对电源质量要求比较高，如果纹波较大可能会影响晶振的起振。更有人说反而需要一些噪声，激励晶振产生正反馈从而顺利起振（本人对此表示呵呵）。。。但不管怎样，提高电源质量对大家都是好事~</p>
</li>
<li><p><strong>晶振周围的环境</strong><br>有人指出应该仔细清洗RTC晶振周围的电路，甚至是使用环氧树脂胶将晶振密封起来。这种说法得到了圈内著名的“香水城”版主的支持，看来也是有相当多的事实依据。</p>
</li>
<li><p><strong>减少晶振焊接时加热的时间</strong><br>有人认为长时间加热晶振进行焊接会对晶振本身带来影响，却不是彻底损坏晶振，从而使得晶振不容易起振。。。这种说法我没验证过，个人表示怀疑。。。</p>
</li>
<li><p><strong>焊接的焊锡量</strong><br>这个种说法感觉就更不靠谱了，但真的有人在晶振引脚上多加了点焊锡晶振就能起振了。从原理上说，多加点焊锡确实会改变晶振和PCB间的寄生参数，但我感觉影响微乎其微。。。可能晶振已经徘徊在临界值的边缘了，这种做法才会起到一点作用。</p>
</li>
<li><p><strong>使用有源晶振</strong><br>个人认为这是一劳永逸解决晶振不起振问题的不二法门！21IC的香水城版主对STM32的RTC晶振不易起振的原因做了一个解释，即出于低功耗的考虑，STM32对晶振的驱动功率比较低，所谓“好鼓不用重锤”，一些差的晶振就需要更高的驱动功率，所以不易起振。我认为这种解释是有道理的。使用有源晶振则不存在驱动功率的问题，如果问题确实是因为驱动功率造成的，那使用有源晶振毫无疑问可以彻底解决问题。而且目前网上还没看到说有源晶振不起振的求助帖。但是有源晶振通常比较昂贵，甚至要比一颗外置的RTC芯片还要贵。至于这个问题的取舍，就要看各位看官自己的想法了。</p>
</li>
</ol>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/embedded/note-on-stm32-rtc-oscillator/">http://kuangqi.me/embedded/note-on-stm32-rtc-oscillator/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;STM32的RTC晶振经常出现不起振的问题，这已经是业界共识了。。。很多人在各种电子论坛上求助类似于“求高手指点！RTC晶振不起振怎么办”的问题，而其答案基本可以概括为“这次高手帮不了你了”&lt;/p&gt;
&lt;p&gt;更有阴谋论者提出让人啼笑皆非的解释——STM32的RTC晶振不起振是ST与晶振厂商串通后故意搞出来的，目的是提高某晶振厂商高端晶振的销量。。。&lt;/p&gt;
&lt;p&gt;最近做的几块板子也用到了STM32的RTC，前后两版一共做了大概6片，幸运的是并未遇到晶振不起振的现象。而我采用的是3毛钱一个的普通晶振，并未选用传说中低负载高精度晶振。。。后来在另外一片实验性质的板子上首次遇到了晶振不起振的问题，而且做了2片都不起振，这才让我意识到这个问题的严重性。&lt;/p&gt;
    
    </summary>
    
      <category term="软硬兼施" scheme="http://kuangqi.me/categories/embedded/"/>
    
    
  </entry>
  
  <entry>
    <title>电子积木开发手记（新篇）</title>
    <link href="http://kuangqi.me/embedded/note-on-srduino/"/>
    <id>http://kuangqi.me/embedded/note-on-srduino/</id>
    <published>2013-04-22T16:36:41.000Z</published>
    <updated>2016-11-29T15:02:00.184Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2012年10月13日"><a href="#2012年10月13日" class="headerlink" title="2012年10月13日"></a>2012年10月13日</h2><p>很久没有写这个手记了，翻看了一下<a href="/embedded/note-on-electronic-bricks/">《电子积木开发手记》</a>，发表的时间是3月24日。至今已经有六个半月了。半年多的时间里，这个项目已经发生了翻天覆地的变化。除了“电子积木”这个目标没有变以外，我们的硬件平台被推翻重做，再次推翻、再次重做，如此重复了很多次。但是值得欣慰的事情还是有的，首先就是获得了国家十万元的经费支持，这是我们开发初期重要的资金来源，感谢国家！我们的第一版UxBoard主板是一份非常优秀的课程作业，让我们在《嵌入式系统》课程中都获得了95分以上的高分，但有点小遗憾的是这个硬件平台面临被推翻的危险，但它毕竟是我们的第一块PCB，还是值得纪念。我们受邀参加大学生创新创业展览会，这将是推广我们的产品和理念的第一步，是一个很好的机会。当然还有最重要的，那就是我们一直都在努力，在遇到困难时也没有想放弃，整个项目现在在有着良好的发展势头。</p>
<p>感慨了这么多，这毕竟是个技术笔记，还是来说说最近做的PCB</p>
<a id="more"></a>
<h3 id="PCB设计和制作"><a href="#PCB设计和制作" class="headerlink" title="PCB设计和制作"></a>PCB设计和制作</h3><p>这块PCB可谓屡经波折。。。组员不靠谱，鼓捣了半个月，最后啥都没做出来，人退出项目组了。。。好吧~都让你做了我还不放心呢~我自己做还不成吗？自学了Allegro，发现其实是会了不难难了不会。。。元件封装确实比较麻烦，好在有神器“LP Wizard”。不过设计PCB还是件很耗时的事情，最终送工厂打样的PCB文件的编辑时间超过了40个小时。学习软件的各种波折就不记录了，反正现在都会用了。只记得于博士的SPB教程中对钻孔文件的输出讲的不是很详细，或者我没看着，反正是我又去专门搜索的钻孔文件的输出方法。<br>做PCB最大的两点就是跟工厂斗智斗勇了。为了充分利用10*10的空间，我在这块空间里拼了4块板子。地球人都知道，拼板要加钱，而且还加的不少。。。我开始的如意算盘不出所料被工厂一眼识破，直接说要加钱。那能行吗！于是又改了一下边框，工厂立马表示不用加钱了。。。我只是把槽开的短了一些。。。工厂真是自欺欺人。。。<br>于是最终花100元做了4块拼板的10块板子~还要了很骚气的白油黑字，但做出来没有想象的好看。。。丝印有断线和黑子貌似不如白字牢固，弄上酒精一刮就掉了。。。</p>
<h3 id="焊接"><a href="#焊接" class="headerlink" title="焊接"></a>焊接</h3><p>最难焊的估计就是那个QFN28封装的CP2102了。。。最后还是采用的烙铁烤板子的方法。第一块板子居然被烤糊了，完全低估了烙铁的温度。。。STM32的MCU焊接还算顺利，至少目前没发现大问题。FT2232就命途多舛了。。。焊的第一块仿真器板子，电脑居然不认。我就估计是芯片焊接的问题，于是又重新加热管脚，还是不认。。。最后都要抓狂了，怀疑不是焊接的问题了。。。最后把芯片拆下来，残余焊锡清理干净，用手用力按压到板子上，一上电，认了。。。看来还是焊接的问题。。。我作为一个成功焊接过LQFP100的选手，居然囧在这个LQFP48上，实在是很无奈。。。</p>
<h3 id="EEPROM"><a href="#EEPROM" class="headerlink" title="EEPROM"></a>EEPROM</h3><p>FT2232D要求的EEPROM貌似比较严格，有些型号虽然也符合16bit结构，但是就是不能用。我提前知道这种情况，在淘宝上买芯片时也注意了区分。但是不怕就怕啊！SB的买家居然发错了货！我要的AT93C46D，给我发了个AT93C46A。。。其实理论上说，AT93C46A应该也是可以用的（AT93C46A固定为16bit组织，而AT93C46D可以选择8bit还是16bit，ORG脚悬空即为16bit，跟A一样，但是A就是不能用。。。），但实际不行，FT2232根本就没法跟它通信，一个字节都读不出来，一直是Blank Device。后来死马当活马医，把打算放到主板上的M93C86按上去试了试，发现居然读出了东西。虽然工作还是异常，但至少有东西了。。。于是紧急奔到中发，买了10片ST的M93C46. 回来一试，果然好了！</p>
<h3 id="编译STM32的驱动库"><a href="#编译STM32的驱动库" class="headerlink" title="编译STM32的驱动库"></a>编译STM32的驱动库</h3><p>编译居然出错了。。。真是太神奇了。。。看了一下错误，大概是因为工程目录下CMSIS库extern了系统库里定义的东西，但是extern的类型跟系统库里定义的类型不太一样。。。ST官方给出的解决方法是，删掉驱动库自带的CMSIS（据网友说是1.3版本），通过修改工程设置来使用IAR自带的CMSIS（据说是2.1版本）。但网友指出，如果换了IDE还会出问题。所以建议直接用ARM官方的CMSIS最新版替换掉工程目录下的旧版本。这个看起来很有道理的样子，有空尝试一下~</p>
<h3 id="硬件设计缺陷"><a href="#硬件设计缺陷" class="headerlink" title="硬件设计缺陷"></a>硬件设计缺陷</h3><p>仿真器好了就开始跟主板联调，结果仿真器没法仿真STM32. 很无奈。最后实在没办法了，为了确定是仿真器的问题还是目标板的问题，就找出了当时做的UxBoard主板，那上面是TI的Cortex-M4的MCU，试了一下居然可以仿真！看电路图，发现我很SB的把STM的nTRST引脚放到了JTAG的5脚上，而这个脚对应在仿真器那边是GND。。。于是结果就是JTAG的寄存器一直处于复位状态，但是由于nSRST的位置的对的，所以目标板的复位目测是正常的。。。其实10pin的JTAG接口不应该包含nTRST引脚，但是STM32有这么个引脚，总不能不引出吧~下次打算放到7号，7号在仿真器那边是不连接的。</p>
<p>还有件很囧的事情，就是L那个指示灯一直是亮着的！！！去网上找来Arduino Uno第一版的电路图，发现这个LED是直接连接，没有运放隔离。而Uno第三版就加上了运放隔离。但是MCU复位后引脚默认应该是高阻输入的，那个灯确实应该一直亮着，而且还会因手指的触摸而改变亮度。。。实在是太囧了，目测Uno第三版也会有这个问题，有机会找个板子试试。这样的设计实在有点不靠谱，不如把LED设计成低电平点亮的。。</p>
<p>当然目前为止真正称得上是错误的应该就算自动复位的设计了，我的设计貌似没有像想象中的那样工作，可能需要通过修改原理图来更正，不知道PCB上能否小改一下。。。<br>2012年10月13日，更新啦！今天早上起来就在分析自动复位这个问题。研究后决定把复位脚上接地的104电容拆掉（标号C4），拆掉后自动复位果然工作正常了！</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>拼的4块板子，其中有个万能转接板，那个不算，剩下的3块都是有电路的。</p>
<ol>
<li>Srduino主板做成功的测试有：<ul>
<li>CP2102串口回显</li>
<li>修改CP2102的字符串</li>
<li>STM32通过CP2102串口ISP</li>
<li>STM32通过J-Link和Stellaris ICDI下载程序（闪烁LED）</li>
<li>通过拆除电容C4，自动复位已经正常工作了<br>失败的测试：</li>
<li><em>通过CP2102自动为STM32复位。。。但CP2102的DTR和RTS电平能正常拉低。</em></li>
</ul>
</li>
<li>Stellaris ICDI成功的测试：<ul>
<li>通过OpenOCD的GDB Server驱动仿真STM32、LM4F232（仅支持JTAG）</li>
<li>通过IAR内置的Stellaris ICDI驱动仿真LM4F232（JTAG和SWD均可）<br>失败的测试：</li>
<li>用IAR内置的Stellaris ICDI驱动仿真STM32。</li>
<li>还有一个问题就是红色的DEBUG灯不会熄灭。。。</li>
</ul>
</li>
<li>STM8S最小系统：只测试了用SWID下载了一个闪烁LED的程序，成功了。</li>
</ol>
<hr>
<h2 id="2012年11月3日（Srduino-A3勘误）"><a href="#2012年11月3日（Srduino-A3勘误）" class="headerlink" title="2012年11月3日（Srduino A3勘误）"></a>2012年11月3日（Srduino A3勘误）</h2><p>Srduino A3 PCB调试过程中发现以下设计缺陷，将会在未来版本中更正</p>
<ol>
<li><p>自动复位电容C4原设计为100nF，实际应用中无法自动复位。此电容的正确容值应为10nF</p>
</li>
<li><p>IO板10pin JTAG排针5号脚，原设计为nTRST，而仿真板5脚为GND。直接使用排线连接两个排针会导致IO板一直处于复位状态。应将IO板的nTRST不引出，或者引出到未使用的7号脚位置。</p>
</li>
<li><p>IO板USB DEVICE接口的D+信号线未上拉，直接连接了MCU，会导致USB设备无法枚举。<del>此处应将D+信号线使用1.5k电阻上拉至3.3V。视实际应用，可能还需要添加三极管控制是否上拉，以便在合适的时候通知上位机重新枚举USB设备。</del></p>
<p> 编程过程需要对设备进行重枚举（USB Composite Device理论上可以实现CDC+DFU，但据Maple主页上的描述来看，这么做在Windows下会有问题。若无法实现CDC+DFU的Composite Device，则必须进行重枚举。此说法待验证。）官方Evaluation Board的做法是使用单片机的一个IO口和两个三极管控制1.5K电阻是否连接D+，但我们认为有更简单的方法。目前我们的做法是<strong>将1.5K电阻一段接D+，另一端接一空闲IO口。IO口推挽输出高电平即为USB接通，IO口开漏输出高电平（实为悬空）即为USB断开。从而完成USB重枚举。此方法目前工作正常。</strong></p>
</li>
<li><p>仿真板丝印错误，FT2232右上方丝印中，两列四行的表格中，第一列第三行原为RX，应为TX；第一列第四行原为TX，应为RX。</p>
</li>
<li><p>指示灯L，原设计为高电平点亮，但在芯片高阻态时，此指示灯会常亮，且可能因手指触碰运放引脚而改变其亮度。当相应引脚作为输出状态时，则工作正常。拟在下一个版本中将其改为低电平点亮。或许可以通过修改连接运放的极性来更正？</p>
</li>
<li><p>丝印层PLATFORM写成了PLANTFORM，PERFORMANCE写成了PROFORMANCE…….丢人都不知道丢到哪里去了。。。</p>
</li>
<li><p>下一版本考虑将IOREF旁边未连接的针脚用于连接Vbat，用于给RTC提供后备电源。</p>
</li>
<li><p>再次发现一处丝印层错误！！！Srduino板JTAG口TDO和TCK两个的位置标反了。。。</p>
</li>
<li><p>EEPROM型号确定为ST的M93C86</p>
</li>
<li><p>供电电路和电磁兼容性优化</p>
<ul>
<li>3.3V稳压器换小封装（SOT89或者SOT23-5）</li>
<li>增加电解电容滤波</li>
<li>根据实验结果将LM324更换为LM358或者LMV358，串口指示灯不用隔离，恢复直连</li>
<li>根据实验结果确定是否要对VDDA和VSSA设置独立的LDO稳压器</li>
<li>根据实验结果确定是否将模拟地VSSA直接连到GND</li>
<li>根据实验结果确定是否更换MOSFET的型号</li>
<li>修改USB口保护方案</li>
<li>修改运放电压比较器分压为1:1</li>
</ul>
</li>
<li><p>将BOOT0和RTS两个测试孔拉近</p>
</li>
</ol>
<hr>
<h2 id="2013年2月25日"><a href="#2013年2月25日" class="headerlink" title="2013年2月25日"></a>2013年2月25日</h2><p>我要先吐个槽！！！我真的觉得我够到了我的智商上限。。。我已经很努力的思考一些问题了，但是一定要经过足够长的时间，我才能找到正确的思路</p>
<h3 id="代码尺寸问题"><a href="#代码尺寸问题" class="headerlink" title="代码尺寸问题"></a>代码尺寸问题</h3><p>这个问题不再详谈了，已经写了一篇两三千字的文章了。那段时间实在是郁闷。。。动不动代码尺寸就爆了。。。Hello world就要90KB。。。完全不知道如何下手。。。一天晚上跟MM聊天，突然迸发出一个灵感，逆向思维。删代码，直到删到代码尺寸降下来为止。这个思路很有效，后来发现那次代码尺寸暴增是由纯虚函数导致的。导致代码膨胀的原因还有很多，我基本都碰上了，详情去看<a href="/embedded/reduce-the-code-size-in-embedded-cpp/">《如何在嵌入式C++开发中缩减代码尺寸》</a>这篇文章吧~完全是一部血泪史。。。</p>
<h3 id="EEPROM驱动"><a href="#EEPROM驱动" class="headerlink" title="EEPROM驱动"></a>EEPROM驱动</h3><p>一个调了一天的问题。。。结果是因为时钟线的频率太高了，超过了EEPROM芯片的最高速度。。。随手加了个循环浪费时间，频率降下来了，驱动就通了。很庆幸我能按照Datasheet一次性的时序逻辑写对，否则调试起来就真蛋疼了。。。</p>
<h3 id="USB虚拟串口移植"><a href="#USB虚拟串口移植" class="headerlink" title="USB虚拟串口移植"></a>USB虚拟串口移植</h3><p>又是一部血泪史。没得说，就是看官方的example代码。开始想偷懒，打算把程序拿过来随便改改整合进去，完全行不通，官方的文档又很学术，没啥具体的东西。只能看代码。。。有几个细节记录一下，首先就是拙计的英语。。。有个词组叫correct transfer，我以为这是一种特殊的传输，就像Control transfer、Bulk transfer等等这些词组，都是USB标准里规定的一种传输方式，有特定的工作模式。可是我翻遍了USB标注也没找到到底什么叫correct transfer。。。我那个郁闷啊。。。由于对correct transfer的理解错误，还导致了很多bug。。。终于，有一天，我意识到我SB了。。。correct transfer就是字面意思，就是正确传输。。。就说这次传输数据没发生错误，对方也收到了，这就叫正确传输了，correct transfer。。。。。。。。。。。。。。。。。。。。。。。。。。。。。</p>
<p>再有就是一个芯片或者USB库的一个bug了（不知道算不算bug。。。），就是<code>EPx_OUT_Callback</code>会收到长度为0的包。。。如果这时你闭着眼把Endpoint置为NAK状态，你就别想回来了。。。因为处理数据的函数无事可做，就不会重新将Endpoint置为<code>ACK</code>，当然又不会有新的数据发来，于是就歇菜了。。。解决方法，只能自己判断一下，长度是0的话就不要置为<code>NAK</code>。。。哦，好像系统会自动给你置为<code>NAK</code>，你必须手动置为<code>VALID</code>才行！！！我真的很幸运，第一个思路就是怀疑是数据包的长度出了问题，否则按照程序员“一定是我哪里搞错了”的思路，我无论如何也不会想到把断点加到Endpoint的callback里。。。</p>
<h3 id="Bootloader"><a href="#Bootloader" class="headerlink" title="Bootloader"></a>Bootloader</h3><p>血泪史啊！！！！我觉得核心库做的差不多了，通过虚拟串口复位也加上了，打算加上bootloader，走一下流程了。结果，傻逼了！！！</p>
<p>首先是Maple的bootloader太2B了，编译居然不能开优化！！！一个-O1的优化就会导致其不能运行。。。估计是哪儿该加volatile的地方没加，被优化坏了。。。决定先不管bootloader，先用着O0，改天有空再研究优化的问题。</p>
<p>接着就是最2B的事件了。。。加上bootloader之后，程序居然不能运行了！！！没有bootloader的时候好好的啊~连接脚本已经把起始地址改成相应的bootloader跳转的地址了，后来发现是中断向量表的位置没有在代码中设置。。。但设置了之后，程序还是不对劲。程序就是最简单的闪烁LED，但是LED闪烁64次后程序就会挂掉。。。我至今都非常不明白我是怎么发现是64次的。。。总之我神奇的发现了这个神气的现象，但我不能解释。。。</p>
<p>64是个比较特殊的数字，很多常量都设置成了64. 后来随手把串口rx队列长度改成了32，发现闪烁32次后停机。我就觉得闹鬼了，闪烁led是死循环，跟串口队列长度有毛线关系啊！终于，，，经过几个小时的思考和艰苦查找，我发现！！！闪烁的LED居然就是串口RX的指示灯！！！于是闪一下，串口就收到一个数据，数据就被放到队列里。。。然后64下之后，队列满了，程序就挂了。。。。。实在是太！二！了！！！！</p>
<hr>
<h2 id="2013年4月12日"><a href="#2013年4月12日" class="headerlink" title="2013年4月12日"></a>2013年4月12日</h2><h3 id="固件部分"><a href="#固件部分" class="headerlink" title="固件部分"></a>固件部分</h3><p>巧妙的分配单片机的定时器是非常有挑战性的。我们有望比Arduino做得更好！</p>
<h3 id="软件部分"><a href="#软件部分" class="headerlink" title="软件部分"></a>软件部分</h3><p>首次走通了全部的流程。已经可以在VIM中实现一键编译、复位并刷写了。<br>第一次手动编写了自己的Makefile，是不是很弱爆。。。</p>
<p>之前敲各种make敲到手软，但也只是知道Makefile这个东西而已。自己编写Makefile之前还试图用各种工具自动生成，结果越弄越乱。想到松哥之前说的一句话，不到10万行的项目根部不需要这种工具，遂放弃自动生成，改为手动编写。<br>Makefile大概有60行左右，包含了编译、连接、objdump和size以及reset和dfu-util调用等操作，用起来还是很方便的。</p>
<p>唯一要吐槽的地方是，我花了一天的时间写这个Makefile。。。我本以为中午就能搞定，结果在晚上9点终于调通了的时候，发现好像没吃晚饭。。。“马上就能做完”果然是程序员三大错觉之一！</p>
<h3 id="硬件部分"><a href="#硬件部分" class="headerlink" title="硬件部分"></a>硬件部分</h3><p>这个是最近的重头戏了吧。新版PCB的设计和打样，是我们开发进程中的重要一步。新版的PCB全面更换了阻容元件封装，优化了供电电路、还改动了USB接口、AD转换接口等位置，修复了在A3版中发现的所有bug。由于引脚映射发生了些许的变化，固件库也需要跟着升级一下。</p>
<p>另外为了最大限度利用PCB空间，我们还在这块板子中拼入了一个Srduino Mini，这是一个简化的Srduino，尺寸与51单片机类似。还拼入了一个数字音频扩展板，由飞利浦的经典I2S接口的DA芯片TDA1543进行音频解码，板上还包含了一个microSD卡槽。另外拼入了一个基于nRF24L01+的2.4G射频模块，参考了官方的设计，将0402封装的元件更换为了0603. 最后一个拼版是J-Link OB仿真器，之前仿制的开源仿真器实在是不能令人满意，在IDE兼容性、跨平台特性等诸多方面都存在问题。这次索性使用了山寨J-link。之前已经在一块废板上进行了测试，J-Link OB工作非常稳定。</p>
<p>这次PCB设计总结了之前版本的经验，吸取了教训。在丝印层方面，放弃了教学视频中提及的Autosilk，因为这个层经常因元件调整带来各种问题，使得刚刚修改好非常美观的布局变得面目全非。看名字也知道，这个层是由系统自动管理的。这次我们配合使用了Board Geometry中的Silkscreen、Package Geometry中的Silkscreen和Components中的RefDes的Silkscreen。分别用于管理板级的图案（例如Logo和说明文字）、元件本身的丝印图案（例如正负极标志）和元件的索引编号。实验证明，即使在调整好丝印之后再次改动布局和布线，也只有在改动中旋转了方向的器件的丝印需要手动转一下，其它内容几乎不需要再重新调整。这才应该是调整丝印的正常状态！之前版本之所以丝印出现那么多bug，就跟管理丝印的方法有关！</p>
<p>本版还常识使用Illustrator制作矢量图，直接导入Allegro作为Logo，但是最终没有成功。不过由矢量图直接输出指定尺寸的BMP图像还是很方便的。另外我们还发现了上一版的Logo存在一些较细的笔画印不出来的问题，这次也同时对图像的内容和BMP to IPF的参数进行了调整，有望彻底解决这个问题。</p>
<p>新版PCB已经箭在弦上，希望在接下来的封装验证、PCB打样和焊接调试中进展顺利！</p>
<hr>
<h2 id="2013年4月23日"><a href="#2013年4月23日" class="headerlink" title="2013年4月23日"></a>2013年4月23日</h2><p>这次PCB打样太给力了！下单后48小时就发货了，快递也给力，隔天就从深圳寄到北京了！</p>
<p>史无前例的6块板子拼板！省钱省到家了！不过事实也证明了，投入多少精力就会有多少回报。在Srduino B1版上，可是说我精雕细琢。因为之前有积累，这次也一举修复了之前在A3版上发现的所有硬件bug。目前为止Srduino B1没有发现啥明显的bug，希望不要再有bug了！</p>
<p>其他的拼板，因为画的时候就抱着试一试，允许失败的态度，所以自然就出现了一些比较无语的错误。。。下面将发现的所有的错误总结如下</p>
<h3 id="Srduino-B1板子"><a href="#Srduino-B1板子" class="headerlink" title="Srduino B1板子"></a>Srduino B1板子</h3><ol>
<li>microUSB钻孔直径过大，应为0.65mm，实际上有41mil，超过1.00mm</li>
<li>光学识别点中心没有铜</li>
<li>Top层丝印的Logo仍与想象的有一定出入，不过至少所有笔画都能看清了！不知道是否跟厂家印刷的精度有关。</li>
<li>下一版要把注册商标的标志(TM)和官方网站的链接加上去！还可以考虑弄个二维码~</li>
</ol>
<h3 id="Srduino-Mini板子"><a href="#Srduino-Mini板子" class="headerlink" title="Srduino Mini板子"></a>Srduino Mini板子</h3><ol>
<li>丝印Logo完全看不清楚</li>
</ol>
<h3 id="Digital-Audio板子"><a href="#Digital-Audio板子" class="headerlink" title="Digital Audio板子"></a>Digital Audio板子</h3><ol>
<li>3.5mm耳机插孔封装的封装错误：<ul>
<li>5个非电气孔没有打出来！</li>
<li>摆放边界没有预留合理的空间，隔着旁边的运放芯片太近！差点就插不上了</li>
<li>圆形的电气孔直径太小，费好大劲才能把插座插进去</li>
</ul>
</li>
<li>microSD卡槽封装的问题<ul>
<li>非电气孔直径过大！</li>
<li>若非电气孔直径合适，那电气焊盘预留的长度是否足够？</li>
</ul>
</li>
<li>低级错误：2*8pin的SPI&amp;I2S插口摆放的位置不对，无法与基板重合，相差了100mil，基本导致该PCB报废，只能用杜邦线连接</li>
</ol>
<h3 id="2-4GHz-RF板子"><a href="#2-4GHz-RF板子" class="headerlink" title="2.4GHz RF板子"></a>2.4GHz RF板子</h3><ol>
<li>通信不稳定，不确定是由于元件导致、程序导致还是PCB导致的。</li>
<li>16MHz直插晶振封装的摆放边界没有预留出合理的空间，几乎导致其金属外壳与旁边的焊盘短路，只好给它垫上一层胶带</li>
</ol>
<h3 id="JLink-ARM-OB板子"><a href="#JLink-ARM-OB板子" class="headerlink" title="JLink ARM OB板子"></a>JLink ARM OB板子</h3><ol>
<li>JTAG接口的方向错误，无法直接插到Srduino B1上，只能用一条排线连过去。不过貌似无伤大雅。下一版可以考虑去掉按键，而使用全尺寸的2*5牛角座</li>
<li>同样是晶振的问题，金属外壳几乎要与旁边的电容短路。</li>
</ol>
<h3 id="JTAG转接板子"><a href="#JTAG转接板子" class="headerlink" title="JTAG转接板子"></a>JTAG转接板子</h3><p>这个应该不会有bug吧。。。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/embedded/note-on-srduino/">http://kuangqi.me/embedded/note-on-srduino/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;2012年10月13日&quot;&gt;&lt;a href=&quot;#2012年10月13日&quot; class=&quot;headerlink&quot; title=&quot;2012年10月13日&quot;&gt;&lt;/a&gt;2012年10月13日&lt;/h2&gt;&lt;p&gt;很久没有写这个手记了，翻看了一下&lt;a href=&quot;/embedded/note-on-electronic-bricks/&quot;&gt;《电子积木开发手记》&lt;/a&gt;，发表的时间是3月24日。至今已经有六个半月了。半年多的时间里，这个项目已经发生了翻天覆地的变化。除了“电子积木”这个目标没有变以外，我们的硬件平台被推翻重做，再次推翻、再次重做，如此重复了很多次。但是值得欣慰的事情还是有的，首先就是获得了国家十万元的经费支持，这是我们开发初期重要的资金来源，感谢国家！我们的第一版UxBoard主板是一份非常优秀的课程作业，让我们在《嵌入式系统》课程中都获得了95分以上的高分，但有点小遗憾的是这个硬件平台面临被推翻的危险，但它毕竟是我们的第一块PCB，还是值得纪念。我们受邀参加大学生创新创业展览会，这将是推广我们的产品和理念的第一步，是一个很好的机会。当然还有最重要的，那就是我们一直都在努力，在遇到困难时也没有想放弃，整个项目现在在有着良好的发展势头。&lt;/p&gt;
&lt;p&gt;感慨了这么多，这毕竟是个技术笔记，还是来说说最近做的PCB&lt;/p&gt;
    
    </summary>
    
      <category term="软硬兼施" scheme="http://kuangqi.me/categories/embedded/"/>
    
    
  </entry>
  
  <entry>
    <title>如何在嵌入式C++开发中缩减代码尺寸</title>
    <link href="http://kuangqi.me/embedded/reduce-the-code-size-in-embedded-cpp/"/>
    <id>http://kuangqi.me/embedded/reduce-the-code-size-in-embedded-cpp/</id>
    <published>2013-02-07T16:27:14.000Z</published>
    <updated>2016-11-29T15:02:00.186Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做的一项工作是将Arduino Due的类库移植到STM32上，Arduino经过多年的积累，类库已经比较完善了，其中也不乏一些C++的高级或者动态特性。比如虚函数和抽象类、动态存储分配、函数和运算符重载等等。</p>
<p>一直以来，C++是否适用于资源极其有限的嵌入式系统就是一个备受争议的问题。实际应用中，我也确实遇到了诸多的问题。其中最突出的就是代码尺寸的问题。我选用的ARM单片机有64KB的Flash和20KB的SRAM空间，这在8051时代已经是高端大气上档次的豪华配置了，但当我们用C++编译器编译一下那些用C++写成的简单到不能再简单的代码，就会发现这点Flash空间简直就是战斗力只有五的渣渣。。。</p>
<p>正是由于这种现象，我最近几乎只能花一半的时间编程序，而另外的一半时间却要来设法缩减代码的尺寸。因为在最初的时候，一个闪烁LED并在串口输出一个字符串的程序就需要100K的Flash空间，实在是难以置信。</p>
<a id="more"></a>
<p>在此之前，我一直自认为可以熟练的使用GNU工具链进行高效的程序开发，虽然vim水平被大牛耻笑，但也偶尔可以耻笑别人。。。退一步说，至少可以耻笑编译器和编辑器都不能区分的初学者~然而在开源工具链方面的经验却在嵌入式开发中翻了车，极度膨胀的代码尺寸着实让我这个嵌入式新手挠头。</p>
<p>经过一周的研究，我也逐渐明白了嵌入式C++开发中代码膨胀的主要原因，以及缩减代码尺寸的一些重要技巧。</p>
<p>为了缩减嵌入式C++的代码，我们必须先要了解为什么一个极为简单的C++程序的代码会这么大。编译原理告诉我们的东西似乎不太够，因为我们写的那些代码根本不可能编译成那么大的目标代码，我们需要知道，C++编译器除了编译了我们写的代码，还在背后干了什么。</p>
<p>原来，C/C++作为一个具有工业强度的编程语言，除了我们在每本书上都能学到丰富的语言特性之外，还提供了具有极高效率、极佳健壮性和鲁棒性的底层类库。然而使用功能强大、容错性好且执行高效的代码是有代价的，那就是代码尺寸的膨胀。目前我们能够得到的绝大部分标准库，都将效率和健壮性作为设计时的主要考虑，而对代码尺寸则没有特别的追求。这也使标准库中的一些函数过于臃肿。例如最常用的<code>printf</code>和<code>scanf</code>函数，支持字节型、整形、浮点型等各种类型的格式化输入输出，十分方便。然而使用newlib中的printf函数将会占用37KB的Flash和5KB的SRAM空间，这对绝大多数Cortex-M系列的单片机来说都是不可接受的。</p>
<p>另外，C++还提供的异常(exception)、运行时类型识别(RTTI)以及动态存储分配机制，这些机制是C++的语言特性，但是却是通过库函数实现的。这些特性的使用，会引入stdc++标准类库中的大量基础函数，这些函数在连接时通过连接器添加到目标代码中，是导致C++代码膨胀的重要原因。</p>
<p>我自己在之前对语言特性的理解一直是与库函数割裂开的。我之前的理解是：语言特性表现在关键字和表达式上，比如C++支持<code>class</code>、<code>virtual</code>、<code>new</code>、<code>delete</code>这些关键字，是语言本身的，仅仅与编译器有关的。C++里可以用<code>new</code>分配内存，是因为C++编译器认识这个关键字。而库函数就是比如<code>strcpy</code>、<code>strlen</code>之类，是与语言无关的。我可以自己写一个<code>strlen</code>，甚至可以用C#、Java等不同的语言来写。而我却不能为C++添加一个关键字，如果硬要加，只能改编译器。</p>
<p>但事实上这个理解是不准确的，C++的关键字不仅与编译器有关，也与标准库有关。这其实并不难理解，我们可以在C语言中用<code>malloc()</code>函数分配一片内存，这个函数后面对应了C标准库中的一大段代码，我们也是可以想象的。那当我们在C++中使用<code>new</code>分配内存时，<code>new</code>关键字的背后一定也对应了功能类似的一大段代码（实际上更加复杂的一段代码，因为<code>new</code>支持异常），那<code>new</code>对应的这段代码来自哪里呢？是编译器吗？显然不是。它来自C++的标准库。举个例子，<code>goto</code>关键字会被编译器直接编译成一个jmp指令，但<code>new</code>关键字则会被编译成一个函数调用，要调用的代码则在连接阶段，被连接器从标准库中揪过来。</p>
<p>明白了这些原理，我们就可以整理一下缩减嵌入式C++代码尺寸的一些思路了。Good design demands good compromises. 为了让C++更符合嵌入式系统的实际情境，我们需要放弃或者简化以上提到的很多特性，并通过编译参数的设置、优化掉不需要的代码，从而达到缩减代码尺寸的目的。</p>
<p>在正式开始介绍之前，先向各位同仁强烈推荐<a href="http://elegantinvention.com/blog/information/smaller-binary-size-with-c-on-baremetal-g/" target="_blank" rel="external">这篇文章</a>，本文的部分内容会翻译这篇文章。<a href="http://www.webalice.it/fede.tft/cpp_on_microcontrollers_tricks/cpp_on_microcontrollers_tricks.html" target="_blank" rel="external">另一篇文章</a>也针C++在嵌入式情境中的应用提出了有益的建议。ARM官方的<a href="http://blogs.arm.com/embedded/879-shrink-your-mcu-code-size-with-gcc-arm-embedded-47/" target="_blank" rel="external">一篇博文</a>对编译器和库函数的优化进行了简单的阐述。</p>
<p>关于GCC配置参数的优化，主要参考了ARM GCC 2012q4的文档和readme。当然本文还包含一些我自己的理解以及上述文章中没提到的一些技巧。</p>
<h2 id="回收未被调用的函数和数据所占用的空间"><a href="#回收未被调用的函数和数据所占用的空间" class="headerlink" title="回收未被调用的函数和数据所占用的空间"></a>回收未被调用的函数和数据所占用的空间</h2><p>在嵌入式编程中，我们通常会使用MCU厂商提供的外设驱动库来避免直接对寄存器进行操作，驱动库通常是被整个包含进来的，而我们可能只用到了其中很少的几个函数。因此回收未被调用的函数所占用的空间就很有必要了。通过为连接器传递<code>--gc-sections</code>参数（通常是用<code>-Wl,--gc-sections</code>）可以令连接器回收未被使用的section。但一个section可能会包含很多个函数，所以单独使用这个参数可能还不能取得最好的效果。另外为编译器加上<code>-ffunction-sections</code>和<code>-fdata-sections</code>两个参数，可以强制编译器为每个函数和数据分配独立的section，这样每个冗余的函数都可以独立的被回收了。</p>
<p>在使用C++标准库函数时，这个技巧尤为重要。因为C++标准库在编译时都已经使用了<code>-ffunction-sections</code>参数，所以这个技巧可以非常显著的缩减C++程序的尺寸。</p>
<h2 id="禁用C-的异常机制"><a href="#禁用C-的异常机制" class="headerlink" title="禁用C++的异常机制"></a>禁用C++的异常机制</h2><p>异常的捕获和处理需要大量的代码，默认情况下这些代码都会编译到目标文件中。如果不需要使用异常机制，可以在编译阶段禁用它们。禁用异常的编译参数是<code>-fno-exceptions</code></p>
<h2 id="禁用C-的运行时类型识别-RTTI-机制"><a href="#禁用C-的运行时类型识别-RTTI-机制" class="headerlink" title="禁用C++的运行时类型识别(RTTI)机制"></a>禁用C++的运行时类型识别(RTTI)机制</h2><p>运行时类型信息是很有爱的~它允许我们在运行时根据代码的具体情况进行更安全的类型转换。如果禁用这个机制，我们将不能使用<code>dynamic_cast&lt;&gt;()</code>和<code>typeid()</code>。有趣的是，由RTTI增加的代码是比较少的（不到1KB），所以通常我们可以不用担心这点空间。如果一定要禁用这个机制，方法是添加编译参数<code>-fno-rtti</code></p>
<h2 id="重载new和delete运算符"><a href="#重载new和delete运算符" class="headerlink" title="重载new和delete运算符"></a>重载new和delete运算符</h2><p>默认的<code>new</code>和<code>delete</code>运算符在堆(heap)空间不足时会抛出<code>std::bad_alloc</code>异常。这意味着，即使使用了<code>-fno-exceptions</code>参数，在我们使用new分配内存的时候仍能看到代码的尺寸显著增大。</p>
<p>好在重载<code>new</code>和<code>delete</code>的方法很简单，也许我们更希望通过自己实现的调试代码来捕获内存分配时出现的错误。自己实现的调试跟踪代码，有几种方法，比如通过USART串口将错误返回到PC机，或者利用支持semihosting的仿真器来获得错误信息。下面就给出自己实现<code>new</code>和<code>delete</code>的样例代码。出处在<a href="http://pastebin.com/7VKUuTJa" target="_blank" rel="external">http://pastebin.com/7VKUuTJa</a></p>
<p>该网址貌似需要翻墙才能访问，为方便国内的朋友，我就把代码粘过来了</p>
<p>更新：笔者使用这个版本的重载时，代码尺寸不降反增，因此这个技巧的有效性还请大家验证。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">/* tinynew.cpp</div><div class="line">   </div><div class="line">   Overrides operators new and delete</div><div class="line">   globally to reduce code size.</div><div class="line">   </div><div class="line">   Public domain, use however you wish.</div><div class="line">   If you really need a license, consider it MIT:</div><div class="line">   http://www.opensource.org/licenses/mit-license.php</div><div class="line">   </div><div class="line">   - Eric Agan</div><div class="line">     Elegant Invention</div><div class="line"> */</div><div class="line"></div><div class="line">#include &lt;new&gt;</div><div class="line">#include &lt;malloc.h&gt;</div><div class="line"></div><div class="line">void* operator new(std::size_t size) &#123;</div><div class="line">    return malloc(size);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void* operator new[](std::size_t size) &#123;</div><div class="line">    return malloc(size);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void operator delete(void* ptr) &#123;</div><div class="line">    free(ptr);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void operator delete[](void* ptr) &#123;</div><div class="line">    free(ptr);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* Optionally you can override the &apos;nothrow&apos; versions as well.</div><div class="line">   This is useful if you want to catch failed allocs with your</div><div class="line">   own debug code, or keep track of heap usage for example,</div><div class="line">   rather than just eliminate exceptions.</div><div class="line"> */</div><div class="line"></div><div class="line">void* operator new(std::size_t size, const std::nothrow_t&amp;) &#123;</div><div class="line">    return malloc(size);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void* operator new[](std::size_t size, const std::nothrow_t&amp;) &#123;</div><div class="line">    return malloc(size);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void operator delete(void* ptr, const std::nothrow_t&amp;) &#123;</div><div class="line">    free(ptr);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void operator delete[](void* ptr, const std::nothrow_t&amp;) &#123;</div><div class="line">    free(ptr);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//eof</div></pre></td></tr></table></figure>
<h2 id="给出一个-cxa-pure-virtual-的实现"><a href="#给出一个-cxa-pure-virtual-的实现" class="headerlink" title="给出一个__cxa_pure_virtual()的实现"></a>给出一个<code>__cxa_pure_virtual()</code>的实现</h2><p>如果我们在代码的任何位置使用了纯虚函数，即使已经使用<code>-fno-exceptions</code>禁用了异常，我们仍能发现代码尺寸显著的增加了（大概会增大40KB！！！）</p>
<p>我碰到了这种现象并且花了很久的时间去跟踪。当我们查看目标代码的反汇编代码清单时（通过<code>objdump -h -C -S</code>导出），我们会发现貌似异常处理的代码又回来了。。。</p>
<p>为了搞明白到底是什么东西这么大，我尝试使用<code>-nostdlib</code>连接参数，这会禁用整个的C++标准库（libstdc++），然后我提供了内容为空的<code>malloc</code>、<code>realloc</code>、<code>free</code>等我们常用的标准库函数，最后g++报错的是一个我从没听说过的东西：<code>__cxa_pure_virtual()</code></p>
<p>“哈哈”，我想，“一定就是这个东西！”。通过查看该函数的<a href="http://gcc.gnu.org/svn/gcc/tags/gcc_4_4_3_release/libstdc++-v3/libsupc++/pure.cc" target="_blank" rel="external">源代码</a>。这个网址是GNU官方的，给出的代码正是这个函数在GNU C++标准库中的开源实现。我们本地的标准库是经过预编译的，所以这个代码在本地是看不到的，我们发现这个函数调用了<code>std::terminate()</code>，这个（跟异常机制有关）调用将我们那点可怜的Flash蚕食殆尽，完全将白纸黑字的<code>-fno-exceptions</code>爆出翔~</p>
<p>实际上，当我调用一个纯虚函数时（纯虚函数不能被调用，因为纯虚函数没有实现），系统就会帮我们调用<code>__cxa_pure_virtual()</code>，从而使程序报错。跟<code>new</code>和<code>delete</code>一样，我们也希望通过自己实现的调试跟踪代码来获得有意义的反馈。这个实现很简单粗暴，需要注意的是要添加<code>extern &quot;C&quot;</code>，以防止函数名被修饰（Mangling）。关于C++的函数名修饰，请详见<a href="http://en.wikipedia.org/wiki/Name_mangling" target="_blank" rel="external">维基百科相关条目</a></p>
<p>具体实现如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">extern &quot;C&quot; void __cxa_pure_virtual() &#123; while(1); &#125;</div></pre></td></tr></table></figure>
<h2 id="重载标准库的异常处理函数"><a href="#重载标准库的异常处理函数" class="headerlink" title="重载标准库的异常处理函数"></a>重载标准库的异常处理函数</h2><p>当我们使用异常机制时，代码尺寸会暴增，导致这一现象的原因则是C++标准库提供的冗长的异常处理函数。当有未捕获的异常时，这个函数就会被调用。这个函数做的事情仅仅是打印出发生异常的函数名，但是却需要对函数名进行重组（demangle），而重组函数名的代码是非常复杂的。要如果确实需要异常机制，我们可以重载C++提供的冗长的异常处理函数，代码如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">namespace __gnu_cxx</div><div class="line">&#123;</div><div class="line">    void __verbose_terminate_handler()</div><div class="line">    &#123;</div><div class="line">        abort();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个函数必须不能返回，这里简单的终止了程序，我们也可以在里面添加一些别的操作，比如在串口上输出一个错误信息，然后进入一个死循环等等。重点是，通过重新定义这个函数，我们阻止了原始版本的实现被连接到目标代码中，从而显著减小了目标代码的尺寸。</p>
<h2 id="给出一个-init的实现并使用-fno-use-cxa-atexit编译参数和-nostartfiles连接参数"><a href="#给出一个-init的实现并使用-fno-use-cxa-atexit编译参数和-nostartfiles连接参数" class="headerlink" title="给出一个_init的实现并使用-fno-use-cxa-atexit编译参数和-nostartfiles连接参数"></a>给出一个<code>_init</code>的实现并使用<code>-fno-use-cxa-atexit</code>编译参数和<code>-nostartfiles</code>连接参数</h2><p>一般情况下，芯片厂商提供的example中会包含芯片的启动代码(Startup code)，这样我们就没有必要使用系统库提供的初始化程序，我们给出一个空的<code>_init</code>实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">extern &quot;C&quot; void _init(void)&#123;&#125;</div></pre></td></tr></table></figure>
<p>另外，我们还可以使用<code>-fno-use-cxa-atexit</code>来去掉编译时自动加上的一些异常处理函数</p>
<p>至此，程序对标准库的移动和异常处理的依赖被全部解除，我们可以在连接时使用<code>-nostartfiles</code>来避免连接标准库相关的代码。</p>
<h2 id="使用高版本的编译器和精简版的标准库"><a href="#使用高版本的编译器和精简版的标准库" class="headerlink" title="使用高版本的编译器和精简版的标准库"></a>使用高版本的编译器和精简版的标准库</h2><p>截止到本文成文时，ARM GCC工具链的最新版本是2012q4，其中包含了GCC 4.7.2. 这个版本的GCC包含了更高级的代码优化技术，在使用-Os优化参数时，生成的目标代码比之前的版本小2%</p>
<p>更重要的是，这个版本的工具链还附带了专门为嵌入式应用而优化的C标准库——Newlib-nano。其中提供了精简版的<code>printf</code>和<code>scanf</code>（默认情况下不支持浮点数，但可以通过编译参数开启），以及更适用于嵌入式环境（小内存）的<code>memset</code>、<code>malloc</code>等内存管理函数。这些函数占用的代码空间只有传统标准库的六分之一。Newlib-nano使用了<code>-fno-exception</code>参数进行编译，且优化设置为<code>-Os</code></p>
<p>根据ARM官方博客的介绍，使用精简版的标准库编写的Hello world程序中，代码尺寸缩减了80%，而在极端案例中的缩减会超过90%</p>
<p>要下载新版的工具链，可以前往ARM GCC的<a href="https://launchpad.net/gcc-arm-embedded/" target="_blank" rel="external">项目主页</a></p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/embedded/reduce-the-code-size-in-embedded-cpp/">http://kuangqi.me/embedded/reduce-the-code-size-in-embedded-cpp/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做的一项工作是将Arduino Due的类库移植到STM32上，Arduino经过多年的积累，类库已经比较完善了，其中也不乏一些C++的高级或者动态特性。比如虚函数和抽象类、动态存储分配、函数和运算符重载等等。&lt;/p&gt;
&lt;p&gt;一直以来，C++是否适用于资源极其有限的嵌入式系统就是一个备受争议的问题。实际应用中，我也确实遇到了诸多的问题。其中最突出的就是代码尺寸的问题。我选用的ARM单片机有64KB的Flash和20KB的SRAM空间，这在8051时代已经是高端大气上档次的豪华配置了，但当我们用C++编译器编译一下那些用C++写成的简单到不能再简单的代码，就会发现这点Flash空间简直就是战斗力只有五的渣渣。。。&lt;/p&gt;
&lt;p&gt;正是由于这种现象，我最近几乎只能花一半的时间编程序，而另外的一半时间却要来设法缩减代码的尺寸。因为在最初的时候，一个闪烁LED并在串口输出一个字符串的程序就需要100K的Flash空间，实在是难以置信。&lt;/p&gt;
    
    </summary>
    
      <category term="软硬兼施" scheme="http://kuangqi.me/categories/embedded/"/>
    
    
  </entry>
  
  <entry>
    <title>坑爹的搜狐软件源以及由软件源引发的连锁反应</title>
    <link href="http://kuangqi.me/essay/a-tragedy-caused-by-sohu-apt-repo/"/>
    <id>http://kuangqi.me/essay/a-tragedy-caused-by-sohu-apt-repo/</id>
    <published>2012-12-06T16:50:06.000Z</published>
    <updated>2016-11-29T15:02:00.167Z</updated>
    
    <content type="html"><![CDATA[<p>昨天由搜狐提供了ubuntu官方cn软件源挂了，该返回软件包内容的地方返回了一个中文的网页。而我一台Ubuntu 12.04 LTS的服务器、一台Ubuntu 12.10的PC都使用的是该软件源。由此引发的连锁反应一直持续到了今天。。。</p>
<p>昨天连上ssh，开开心心的apt-get update了一下，结果update的速度巨慢无比，一直在Waiting for header。以为是服务器的问题，于是在Ubuntu的PC上也update了一下，居然是类似的问题。我非常困惑为啥今天的update速度这么慢。回头一看服务器这边，已经结束了，报了一堆错误。但错误的大概意思是说没能成功，继续使用原来旧的数据。由于我急着给服务器装软件，就无视了那个错误，直接install了，没想到居然说这些软件没有认证，是否要强制安装，这可是官方的软件源啊，闹不住啊，于是取消了安装。再看PC这边，update也结束了，也报错了，但错误信息跟服务器不完全相同。于是我在一开始就没往软件源有问题这个方向去想。</p>
<a id="more"></a>
<p>接下来，我花费了超过4个小时的时间，几乎搜遍了整个网络，来试图修复我的apt-get，整个本地list全乱套了，又导致locale也出问题，又导致perl也报错。而此时我还不知道是搜狐的问题，因为程序员的第一反应是“我又哪儿搞错了”你们懂的。我执行了很多命令，有一些我自己都不知道是什么意思，还有一些看起来貌似就不太靠谱，瞎执行一气后，没有效果。。。后来在一个台湾的网站上，有人提到软件源可能正在维护，我连想都没想就忽略了这种可能。直到最后要吐血了，才想起用浏览器访问了一下那个软件源。结果可想而知！！！</p>
<p>骂了搜狐的坑爹软件源10分钟之后，我把两台机器的软件源都换成了163的镜像，把整个lists删掉重建了一下，终于好了。可以update了。晚上又重启了服务器，把内核更新了一下，感觉一切都和谐了~然而我不知道各种问题才刚刚开始。</p>
<p>晚上的晚些时候，我发现ssh连接服务器时中文乱码，我有些困惑，因为服务器上很少有中文的东西，我也不记得之前乱不乱码，我甚至怀疑这些一直都是乱码的，只不过今天我比较强迫，发现了这些不爽的地方。我根本没有怀疑是服务器的设置有问题，以为我下午花了那么大功夫，已经把服务器“修好了”。于是我又研究了一下，改了Mac里ssh的一个配置文件，乱码问题就解决了。我还得以洋洋的把修改Mac配置文件的方法发了<a href="/ios/fix-the-ssh-problem/">一篇博客</a>。。。</p>
<p>直到今天晚上，昀牛把一个错的离谱的scp命令发给我求指导，我才意外发现服务器上的刚刚下载的带中文的文件名都是乱码。而之前创建的中文文件名则显示正常。联系到之前发生的一系列坑爹情况，我终于确信是服务器的设置出了问题。3个小时之后，我终于意识到是我昨天执行那一堆乱七八糟命令把LC_CTYPE从en_US.UTF8改成了UTF8。我根本都不知道我是怎么改的，又费了好大劲改了回来。。。从目前来看，应该是真的好了。</p>
<p>总结一下，搜狐软件源挂了，我前后至少浪费了6~7个小时的时间去查找问题、尝试解决问题、解决尝试时误操作造成的问题和真的的解决问题。。。我已经无力吐槽了，我只能说，坑！爹！啊！</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/essay/a-tragedy-caused-by-sohu-apt-repo/">http://kuangqi.me/essay/a-tragedy-caused-by-sohu-apt-repo/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天由搜狐提供了ubuntu官方cn软件源挂了，该返回软件包内容的地方返回了一个中文的网页。而我一台Ubuntu 12.04 LTS的服务器、一台Ubuntu 12.10的PC都使用的是该软件源。由此引发的连锁反应一直持续到了今天。。。&lt;/p&gt;
&lt;p&gt;昨天连上ssh，开开心心的apt-get update了一下，结果update的速度巨慢无比，一直在Waiting for header。以为是服务器的问题，于是在Ubuntu的PC上也update了一下，居然是类似的问题。我非常困惑为啥今天的update速度这么慢。回头一看服务器这边，已经结束了，报了一堆错误。但错误的大概意思是说没能成功，继续使用原来旧的数据。由于我急着给服务器装软件，就无视了那个错误，直接install了，没想到居然说这些软件没有认证，是否要强制安装，这可是官方的软件源啊，闹不住啊，于是取消了安装。再看PC这边，update也结束了，也报错了，但错误信息跟服务器不完全相同。于是我在一开始就没往软件源有问题这个方向去想。&lt;/p&gt;
    
    </summary>
    
      <category term="我笔我心" scheme="http://kuangqi.me/categories/essay/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac OS X通过SSH连接Linux服务器时中文出现乱码的解决方法</title>
    <link href="http://kuangqi.me/ios/fix-the-ssh-problem/"/>
    <id>http://kuangqi.me/ios/fix-the-ssh-problem/</id>
    <published>2012-12-05T16:46:20.000Z</published>
    <updated>2016-11-29T15:02:00.175Z</updated>
    
    <content type="html"><![CDATA[<p>这个问题跟Mac的终端程序有关。修正方法是：</p>
<p>编辑Mac系统下<code>/etc/ssh_config</code>这个文件，将其中<code>SendEnv LANG LC_*</code>这一行前面加一个井号，注释掉，保存退出</p>
<p>再使用ssh连接远程Linux服务器时，中文就不会有问题了~</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/ios/fix-the-ssh-problem/">http://kuangqi.me/ios/fix-the-ssh-problem/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个问题跟Mac的终端程序有关。修正方法是：&lt;/p&gt;
&lt;p&gt;编辑Mac系统下&lt;code&gt;/etc/ssh_config&lt;/code&gt;这个文件，将其中&lt;code&gt;SendEnv LANG LC_*&lt;/code&gt;这一行前面加一个井号，注释掉，保存退出&lt;/p&gt;
&lt;p&gt;再使用ssh
    
    </summary>
    
      <category term="果粉手札" scheme="http://kuangqi.me/categories/ios/"/>
    
    
  </entry>
  
  <entry>
    <title>实验室电脑装Ubuntu手记</title>
    <link href="http://kuangqi.me/tricks/note-on-ubuntu-installation/"/>
    <id>http://kuangqi.me/tricks/note-on-ubuntu-installation/</id>
    <published>2012-10-31T09:32:05.000Z</published>
    <updated>2016-11-29T15:02:00.185Z</updated>
    
    <content type="html"><![CDATA[<p>自认为是*nix用户，不过从来没在自己的PC上装Ubuntu，终于有自己的机位了，装了一个Ubuntu Desktop 12.10</p>
<p>把遇到的一些问题记录一下</p>
<h2 id="apt-get不能用"><a href="#apt-get不能用" class="headerlink" title="apt-get不能用"></a>apt-get不能用</h2><p>不管是<code>install</code>还是<code>update</code>，任何命令都报错</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">E: Encountered a section with no Package: header</div><div class="line">E: Problem with MergeList /var/lib/apt/lists/security.debian.org_dists_squeeze_updates_contrib_i18n_Translation-en</div><div class="line">E: The package lists or status file could not be parsed or opened.</div></pre></td></tr></table></figure>
<p>解决方法是删掉之前坑爹的缓存</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -rf /var/lib/apt/lists/*</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="改主机名"><a href="#改主机名" class="headerlink" title="改主机名"></a>改主机名</h2><p>安装时偷懒，没改一个喜欢的主机名，等装好了再改就要费一点周折<br>首先要编辑<code>/etc/hostname</code>。这还不够，还要编辑<code>/etc/hosts</code></p>
<h2 id="安装L2TP-VPN插件"><a href="#安装L2TP-VPN插件" class="headerlink" title="安装L2TP VPN插件"></a>安装L2TP VPN插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Installation:</div><div class="line">sudo apt-add-repository ppa:seriy-pr/network-manager<span class="_">-l</span>2tp</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install network-manager<span class="_">-l</span>2tp-gnome</div><div class="line">!!!!!!!!!!!!!!!!!!</div><div class="line">sudo service xl2tpd stop</div><div class="line">sudo update-rc.d xl2tpd <span class="built_in">disable</span></div><div class="line">!!!!!!!!!!!!!!!!!!</div></pre></td></tr></table></figure>
<p>Ubuntu默认只带了PPTP VPN的软件，我的VPN是L2TP的，有这么个插件，可以装一下。装完后添加VPN的地方就会多一个L2TP的选项，可以把配置加进去，不过还是不能用。按照官网的说法，装完后执行斜体部分，就可以用了。不过我试了，不管用，后来重启了一下就好了~</p>
<h2 id="输入法相关"><a href="#输入法相关" class="headerlink" title="输入法相关"></a>输入法相关</h2><p>使用了iBus框架下的Sunpinyin。iBus开机启动的方法是：在Language Support中，将输入法选为ibus。另外sunpinyin弹出设置界面居然必须敲命令。。。太囧了。。。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/lib/ibus-sunpinyin/ibus-setup-sunpinyin</div></pre></td></tr></table></figure>
<h2 id="挂载ISO文件"><a href="#挂载ISO文件" class="headerlink" title="挂载ISO文件"></a>挂载ISO文件</h2><p>双击挂载居然不支持大文件，使用命令行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mount -o loop XXXX.iso /cdrom</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/tricks/note-on-ubuntu-installation/">http://kuangqi.me/tricks/note-on-ubuntu-installation/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自认为是*nix用户，不过从来没在自己的PC上装Ubuntu，终于有自己的机位了，装了一个Ubuntu Desktop 12.10&lt;/p&gt;
&lt;p&gt;把遇到的一些问题记录一下&lt;/p&gt;
&lt;h2 id=&quot;apt-get不能用&quot;&gt;&lt;a href=&quot;#apt-get不能用&quot; class=&quot;headerlink&quot; title=&quot;apt-get不能用&quot;&gt;&lt;/a&gt;apt-get不能用&lt;/h2&gt;&lt;p&gt;不管是&lt;code&gt;install&lt;/code&gt;还是&lt;code&gt;update&lt;/code&gt;，任何命令都报错&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;E: Encountered a section with no Package: header&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;E: Problem with MergeList /var/lib/apt/lists/security.debian.org_dists_squeeze_updates_contrib_i18n_Translation-en&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;E: The package lists or status file could not be parsed or opened.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解决方法是删掉之前坑爹的缓存&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;rm -rf /var/lib/apt/lists/*&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="工巧匠心" scheme="http://kuangqi.me/categories/tricks/"/>
    
    
  </entry>
  
  <entry>
    <title>董奇校长座谈会-我的发言稿（未删节）</title>
    <link href="http://kuangqi.me/essay/a-discussion-with-the-president-of-bnu/"/>
    <id>http://kuangqi.me/essay/a-discussion-with-the-president-of-bnu/</id>
    <published>2012-10-28T10:53:23.000Z</published>
    <updated>2016-11-29T15:02:00.167Z</updated>
    
    <content type="html"><![CDATA[<p>尊敬的董校长、各位领导、各位同学下午好，我是况琪，信息学院2009级计算机系本科生。今天要汇报的是我们在过去两年半的时间里，一直坚持研究开发并着力推进的一个科研项目，也就是我们的自习室空座位实时报告系统。我们的系统通过安装在自习室中的监控摄像机，获得教室的实时图像，通过计算机自动分析的手段，对教室中的空座位进行计数。将教室的空闲情况通过网站、手机、电子屏等方式传达给同学，指导同学去空闲的教室上自习。</p>
<p>这个项目是完全由学生自主命题，组织申请科研经费并在导师的指导下完成的。这个项目立项之初，就获得了超乎我们想象的关注。同学对我们的期望也是我们进步的动力。在我们的努力下，本项目相关研究先后获得北师大本科生科研基金、北京市大学生科学研究与创业行动计划、教育部大学生创新创业训练项目、100365首善行动-金隅嘉业科技创新支持行动等多项学校、国家和社会企业家的经费支持。我们的研究成果获得2009年度校级优秀项目、第19届、第20届两届京师杯竞赛一等奖第一名、第6届、第7届两届首都“挑战杯”竞赛一等奖、第12届全国挑战杯竞赛三等奖等学术奖项。另外还在中国专利年会、北京国际文博会等大型展会上获得两项与科技创新有关的社会奖项。</p>
<a id="more"></a>
<p>这个项目的提出和研究，其实与我所学的专业有关。在三年的时间里，我们专业的每个同学都修读了170多个学分的课程，前四学期平均每周的课时数都在40个以上，也就是说平均每天上课8小时。除去上课的时间，还需要完成各种课程的作业。繁重的课业负担使得我们经常要去上自习，其中“地毯式搜索”找自习室的经历可谓是不堪回首。作业多、自习难，所以我经常对周围的朋友大倒苦水，并将这种类型的吐槽活动作为心理调整的重要途径。只不过这种情况跟不在师大的高中同学比较难以解释，所以当他们追问我为啥还没有女朋友的时候，我只好无奈的说一句“没办法啊，长得太丑了”（此处应有笑声）——（这一段吐槽课多，应校团委要求加上，略显突兀啊！）<br>跑题了，拉回来。可能不少同学都听过一首叫《大学自习曲》的说唱歌曲。这首歌曲不但旋律轻快、内容搞笑，也非常准确的指出了导致自习难的两个原因。一是同学在空间上分布不均，经常会有一些教室很挤，有的教室却无人问津的情况。二是不能提前获知教室使用情况的临时变动，例如临时调课、学生活动等，可能刚坐下不久，又因临时情况而被清场。</p>
<p>为此，我们对全国70多所高校进行了调查、对北京8所高校进行走访、查阅了大量的文献资料并对市场上现有的座位管理查询系统进行了深入的分析。在我们的论文中，花费上千字的篇幅对调研的结果进行了阐述。简单来说，占座现象是找座难-找到座位需要占座-占座导致找座难的恶性循环。解决占座问题、并最终破解自习难问题，更重要的是了解和引导。所以我们的系统在一开始就将目标定位于“找座”，而不是“防占座”。因为我们知道，单方面的通过各种手段禁止同学占座，无异于扬汤止沸。通过科技手段禁止占座，更是南辕北辙。因为我们进行的调研工作，并不比一些决策者少。所以我可以在这里负责任的说，北师大图书馆近期花重金引进的防占座系统，根本就是一个高科技的玩笑。</p>
<p>为了解决自习难问题的两个症结，我们也提出了两个对策。针对问题一，即同学在教室的分布不均的情况，我们的对策是通过计算机分析教室的监控录像，发现人少的教室，并推荐给同学。为了实现这个目标，我们主要完成了图像分割、背景建模和目标追踪三方面的工作。图像分割就是从一张图像中找到桌子所在的区域，计算机先消除透视关系，生成教室的俯视图，再根据色彩的先验概率密度求得桌子的区域。我们对分割出的区域计数，即得到空座位数（图片展示）背景建模就是先建立描述空教室的数学模型，然后将有人教室的图片与之对比，找到不同的区域，即为人或者占座物品。（图片展示）目标追踪就是对运动的物体进行跟踪，当同学进出教室时，计算机可以获得进出的人数和方向，从而得到教室中现在的人数。（图片展示）</p>
<p>针对问题二，即教室临时被占用的情况，我们建立了一个类似微博的社交网络系统（图片展示），同学可以通过网页或者手机终端，把对教室的评价反馈给我们。当教室因临时情况不可用时，这些信息可以帮助同学避开临时被占用的教室。这里的推荐列表是我们的创新技术之一，它分别列出了最空的教室、同学们最满意的教室、以及我们的数学模型为同学生成的最适合自习的教室。我们还计划将每座楼最适合自习教室的显示到楼下的电子屏。在手机上查询这个列表的操作是一键式的，非常方便。如果能显示到电子屏，那找座位就是进楼前抬一下头而已。这个系统中所有的数据更新频率至少都可以达到每分钟一次。调研显示，我们的系统在建设成本、实时性、数据有效性、用户体验等诸多方面均优于现有系统。（表格展示）</p>
<p>值得一提的是，我们在两年间研发的很多技术，可以扩展应用到工业生产等其他领域。两年多的时间中，也有企业希望与我们合作。但是我们更希望我们的技术能应用于学校管理领域，为广大师生提供便利。例如跟踪人流量的程序，也可以用于校园道路车流量的监控，也许可以为缓解校园交通拥堵起到一定的辅助作用。对教室的人数检测，不仅可以用于找自习室，也可以用于了解一堂课到场的人数，这在思想政治、军事理论等一些大型公共课上的作用尤为突出。因此我们的技术也有望使得现行的教学巡视工作得以简化。</p>
<p>目前我们相关基础技术的研发已经基本完成，然而将这个系统最终推向实用，还面临的一些亟待解决的困难和障碍。<br>经济学中有个一著名的二八定律，这个定律在软件工程中同样适用。我们系统在前期基础研究的投入大概是4万元，完成了最核心的大概80%的工作。根据经验，这个投入只会占到总投入的20%左右。因此将其最终完善并成为一个产品的后续投入保守估计在15~20万元。</p>
<p>然而完成最终的成果转化，我们最大的障碍还并不是经费问题，恰恰相反，我们现在还面临着有钱没法花的问题。首先是学校严苛的财务制度，使得我们很多需要的实验设备和资料没法购买，一些正常花销却需要通过弄虚作假买发票的方式来填补。我们开发移动客户端软件需要的平板电脑、智能手机这些设备，其用途更是难以解释，只能靠自己掏腰包。而在一次次与学院会计斗智斗勇，解决诸如发票连号等问题上浪费时间成本，更是不可估量。</p>
<p>如果为经费报销而奔波只是劳力的话，那游说学校各级领导，请求政策上的支持才是真正的劳心。可以说，我们的项目在学术研究方面，两年半内经历了从无到有，从幼稚到成熟的几个飞跃。然而，其在校内推广使用，甚至只是进行中等规模的软件测试，这些条件至今仍不具备。尽管我们通过校团委和信息学院领导老师的牵线搭桥，拜访了教务处、保卫处、信息网络中心、校园电子屏系统集成商等学校职能部门的和相关企业的负责人，但这个项目推向实用化的脚步，至今仍在原点，未曾移动。就连我们做实验使用的教室录像等素材，都是未经学校允许，从教学楼的监控室中请技术人员拷贝出来的，或者是通过我们私自安装在学校公共教室后面的无线摄像机拍摄下来的。进行北京八所高校和大型商业区调研时，我们采取的办法也是携带小型相机，对测试场景进行“偷拍”。可以说，没有这些大胆的违规操作，这个项目在技术上的进展同样会是一张白纸。</p>
<p>回想两年半以前，我是一名大一新生，跟师兄师姐一起坐在快餐店的小桌前嚼着薯条，而这个项目，就是桌子上的一张白纸。而如今，这张纸已经成为一份超过1.5万字，长达34页的论文。我们把它摆上了信息学院教授、博导的桌前，摆上了京师杯专家评委乃至中科院院士的桌前、也摆上了《科学时报》（展示报纸）的编辑和读者的桌前、当然还有北师大刘书记、董校长的桌前。作为目前项目组中资格最老的成员，我为自己能够亲身经历并亲手推动我们的项目经历这样的蜕变，而感到由衷的慰藉。能取得这样的成绩，我对我自己和我们的项目组可以问心无愧，然而面对老师和同学，我却不能理直气壮。因为我最大的愿望，是将我们的成果，呈现在成千上万师大人的桌前，乃至全国还在为找自习室而备受困扰的莘莘学子的桌前。这张桌子，比之前的任何一张都要大，这种成就，比之前我们取得的任何一个，还令人向往。</p>
<p>我们不是在校园论坛上大发牢骚的所谓“有志青年”，我们不是在大街上奔走呼号打砸抢烧的无知愤青，我们不是杂志报刊上洋洋洒洒针砭时弊的评论家，我们更不是打着高科技幌子沽名钓誉的民间科学家。我们是北京师范大学的普通学生，我们用心观察生活，我们的理想就是能用我们的智慧和汗水，让周围的人或事，变得再完美那么一点点。我们不只会发牢骚，我们还花费两年半的时间提出并完成了一个解决方案。如果您也抱着跟我一样的理想，也许您可以尽举手之劳，让我们的共同的理想向前走一步，再走一步。谢谢大家！</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/essay/a-discussion-with-the-president-of-bnu/">http://kuangqi.me/essay/a-discussion-with-the-president-of-bnu/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尊敬的董校长、各位领导、各位同学下午好，我是况琪，信息学院2009级计算机系本科生。今天要汇报的是我们在过去两年半的时间里，一直坚持研究开发并着力推进的一个科研项目，也就是我们的自习室空座位实时报告系统。我们的系统通过安装在自习室中的监控摄像机，获得教室的实时图像，通过计算机自动分析的手段，对教室中的空座位进行计数。将教室的空闲情况通过网站、手机、电子屏等方式传达给同学，指导同学去空闲的教室上自习。&lt;/p&gt;
&lt;p&gt;这个项目是完全由学生自主命题，组织申请科研经费并在导师的指导下完成的。这个项目立项之初，就获得了超乎我们想象的关注。同学对我们的期望也是我们进步的动力。在我们的努力下，本项目相关研究先后获得北师大本科生科研基金、北京市大学生科学研究与创业行动计划、教育部大学生创新创业训练项目、100365首善行动-金隅嘉业科技创新支持行动等多项学校、国家和社会企业家的经费支持。我们的研究成果获得2009年度校级优秀项目、第19届、第20届两届京师杯竞赛一等奖第一名、第6届、第7届两届首都“挑战杯”竞赛一等奖、第12届全国挑战杯竞赛三等奖等学术奖项。另外还在中国专利年会、北京国际文博会等大型展会上获得两项与科技创新有关的社会奖项。&lt;/p&gt;
    
    </summary>
    
      <category term="我笔我心" scheme="http://kuangqi.me/categories/essay/"/>
    
    
  </entry>
  
  <entry>
    <title>关于ISP、IAP、DFU和bootloader</title>
    <link href="http://kuangqi.me/embedded/the-isp-iap-dfu-and-bootloader/"/>
    <id>http://kuangqi.me/embedded/the-isp-iap-dfu-and-bootloader/</id>
    <published>2012-08-27T11:46:22.000Z</published>
    <updated>2016-11-29T15:02:00.189Z</updated>
    
    <content type="html"><![CDATA[<p>这是嵌入式开发中常用的几个专业术语，其诞生的背景和其具体作用大概如下：</p>
<p>在很久很久以前，那是8051单片机流行的时代，做单片机开发都需要一个专用工具，就是单片机的编程器，或者叫烧写器。说“烧”写一点不为过，当年的经典芯片AT89C51在编程时需要十几伏的高电压，加在一个特定的引脚上，才能进入编程。对于某款芯片的编程，都有一个特定的时序，这个时序通常在芯片的datasheet里进行描述并以硬件实现。另外在编程器里的也有一个MCU，这其中使用软件产生这个时序，从而对目标芯片进行编程。电脑通过串口把程序发到编程器，编程器按照规定的时序把程序送入目标芯片。</p>
<a id="more"></a>
<p>但是这种编程模式有几个问题，首先就是需要为特定的芯片购买特定的编程器。这种编程器通常比较昂贵，且只能用于特定型号的MCU. 对于企业来说，编程器的成本算不了什么，但更大的问题是，编程时我们必须把待编程的芯片从产品上拆下来，插到编程器上，编程后再安装回产品中。这种方法对于双列直插式的芯片也许是可行的。但对于现在日益流行的表面贴装技术是很不可行的，尤其是BGA封装的芯片，通常需要专业设备才能拆卸，拆下后需要重新植球才能焊接。。。为了更新固件而将其从高密度的PCB板上拆下来，是非常不可行的。</p>
<p>为了能不把芯片拆下来就更新程序，人们发明了一种叫ISP的技术，即在系统编程。在系统编程就是通过串口或者其他通用的通用通信接口，为芯片编程。在产品上可以预留一个串口，需要更新时，只要把产品插到电脑上，通过串口把程序传到芯片里，就完成了更新操作。ISP技术的实现，其实就是依赖于芯片在出厂时预先烧写的bootloader程序，bootloader还有很多不同的叫法，比如ISP服务程序（STC宏晶的51单片机这么叫）、bootstrap（MSP430的BSL编程这么叫）等等。但本质上都是相同的。bootloader在芯片复位（或者上电）时，会优先于用户自己的代码启动。这段代码会首先检测芯片的指定引脚上有没有特定的信号，如果没有，则跳入用户程序执行。否则就按照bootloader特定的通信协议，与计算机进行握手，并最终触发计算机将新的程序通过通用接口（如串口）传送到芯片。然后bootloader通过软件的方式（当然需要硬件支持），擦除用户程序区，将新的程序写入到指定的位置。另外提到的是，bootloader是由各个芯片厂家自己写的，因此不是通用的。尽管都是用串口，但通信协议是不同的。比如像国产垃圾STC单片机，通信协议甚至是保密的。因此通常需要厂家提供的专用ISP软件（flash loader）才能给芯片编程。</p>
<p>另外，比ISP更先进一点的一个技术叫IAP，即在应用编程。IAP技术允许用户程序修改flash。说白了IAP就是允许用户自定义bootloader，或者说有2个bootloader，一个bootloader是芯片出厂时固化的，另一个是用户自定义的。自定义的bootloader在固化的bootloader之后启动。也许你就要问了，用户自定义的bootloader不就是用户程序吗？其实它跟普通用户程序的区别就是它不会那么容易的被擦除。。。一般是先用专用软件，调用固化的bootloader，来写入自定义的bootloader，然后自定义的bootloader利用能写flash的能力，来给芯片写入新的程序。<br>为什么需要自定义bootloader呢？默认的bootloader需要在固定引脚，通过串口，以固定的协议传送程序。如果你对这个过程的任何一点不满意，那你就要自定义bootloader喽~</p>
<p>再说说DFU，这个名词通常是针对USB设备说的。因为现在的设备基本都是USB了，没用串口的了。。。很多MCU也内置了USB的支持。DFU是Device Firmware Upgrade的缩写，在我的理解中，DFU模式就是支持USB的bootloader。。。DFU模式通常需要特定的驱动程序，因为现在的芯片USB接口通常工作于VCP（Virtual COM Port）模式，插到电脑上后会虚拟成一个串口设备。而DFU模式则于此不同。VCP模式下，PC端是一个串口驱动程序，MCU端是用户程序。而DFU模式下，PC端是DFU驱动程序，MCU端是bootloader。DFU模式的bootloader通常是用户自定义的，并通过固化的bootloader由串口刷入。</p>
<p>进入bootloader程序通常有两种方式，一种是硬件复位（或者掉电），即按板上的复位按钮。芯片复位后会先执行bootloader。第二种方式是以软复位的方式进入的，软复位通常是通过PC发送一串指定的指令，用户程序中会通过中断服务程序检测到并处理这些指令。满足触发条件后，芯片将执行软复位，并将指定的地址装入PC寄存器，从而通过软件的方式跳入bootloader程序。</p>
<p>最后我们来看一下Arduino和Maple板子的刷写方式。</p>
<p>Arduino板上有两个MCU，一个是我们都知道的执行程序的那个MCU，它里面刷写了Arduino自定义的bootloader。另外一个是USB接口附近的一个QFN封装的小芯片，它也是一片MCU，只不过是带USB支持的。在这里它完成USB转串口的功能。更重要的是，它可以监测PC发来的指令流，其中就包含了复位指令。收到USB发来的复位指令后，它会在目标MCU的复位脚加一个负脉冲，使得目标MCU复位，进而将下载指令流放到目标MCU的串口上。使得目标MCU的bootloader检测到，从而完成下载。<br>Maple只有一个MCU，因此从USB收到下载指令后，只不过复位的不是别的芯片，而是复位自己。将自己复位到DFU模式，从而利用bootloader从USB下载程序。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/embedded/the-isp-iap-dfu-and-bootloader/">http://kuangqi.me/embedded/the-isp-iap-dfu-and-bootloader/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是嵌入式开发中常用的几个专业术语，其诞生的背景和其具体作用大概如下：&lt;/p&gt;
&lt;p&gt;在很久很久以前，那是8051单片机流行的时代，做单片机开发都需要一个专用工具，就是单片机的编程器，或者叫烧写器。说“烧”写一点不为过，当年的经典芯片AT89C51在编程时需要十几伏的高电压，加在一个特定的引脚上，才能进入编程。对于某款芯片的编程，都有一个特定的时序，这个时序通常在芯片的datasheet里进行描述并以硬件实现。另外在编程器里的也有一个MCU，这其中使用软件产生这个时序，从而对目标芯片进行编程。电脑通过串口把程序发到编程器，编程器按照规定的时序把程序送入目标芯片。&lt;/p&gt;
    
    </summary>
    
      <category term="软硬兼施" scheme="http://kuangqi.me/categories/embedded/"/>
    
    
  </entry>
  
  <entry>
    <title>山寨J-Link V8仿真器与Cortex-M4开发板之不得不吐的槽</title>
    <link href="http://kuangqi.me/embedded/jlink-clone-and-cm4-board/"/>
    <id>http://kuangqi.me/embedded/jlink-clone-and-cm4-board/</id>
    <published>2012-05-16T05:22:23.000Z</published>
    <updated>2016-11-29T15:02:00.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载J-link仿真器驱动"><a href="#下载J-link仿真器驱动" class="headerlink" title="下载J-link仿真器驱动"></a>下载J-link仿真器驱动</h2><p>上了SEGGER的官方网站，找到了下载驱动的地方，点了让我输入序列号，我看仿真器的背面，没序列号啊~我只好点下面的一个我没序列号的链接，点进去它问你为啥没序列号，其中包括板载仿真器、OEM产品等等，我也不知道我为啥没序列号，只好点了一个其他原因。。。然后它让我保证，不将软件和仿真器用于非法用途，好吧，我保证。。。</p>
<p>下面的一幕我震惊了——网站上出现了十几张仿真器的图片，我以为是让你选自己是哪一款，我一眼就看到了我的那款，鼠标点了没反应，只好仔细看英文提示，结果人家说——这里是一个山寨仿真器大全，如果您使用的是以下这些图片中的仿真器，那基本可以确定你那个是山寨的。这些山寨仿真器基本都是在中国和俄罗斯制造的。如果你不确定你的是不是山寨，请联系XXXXX。。。。</p>
<a id="more"></a>
<p>我去！原来这些奇形怪状的东西都是山寨的，，，下面让我保证不将下载的软件用于这些山寨的仿真器。。。好吧，假设我的不是山寨的，我保证还不行么。。。终于，，，驱动下载下来了。。。</p>
<h2 id="连接J-link到目标板"><a href="#连接J-link到目标板" class="headerlink" title="连接J-link到目标板"></a>连接J-link到目标板</h2><p>老师的板子居然没有留标准的JTAG接口，而是自己设计了个排针。。。更奇葩的是，那个排针是2.0mm的，不是常见的2.54mm的。。。于是我的杜邦线插不上去，得到授权后，我非常暴力的把线焊到了排针的焊盘上，又自己做了一组2.54的20pin接口，跟仿真器连起来了。</p>
<p>连起来后，在电脑上居然提示参考电压不足。。。一测JTAG口的参考电压端，确实只有0.1V，看来硬件有问题。只好打电话给肖工，人家第一句话就是：你不会把电源接反了吧！</p>
<p>我去也太小看我了。。。接反电源应该是我小学时干的事情，现在不至于这么二。。。在肖工的指导下，我对照着供电的电路图，一路查回去，LDO输出3.3V，没电压，再查输入的5V，好像只有2V，再查电容……诡异的地方出现了，在一条线上的两个焊盘电源居然不一样！！再查，发现热保护管的一个引脚脱焊了。。。。。。更牛逼的是，当我用万用表的表笔测这个点时，恰好将脱焊的引脚压回了焊盘上，参数都是正常的，表笔抬起来时，那个引脚又离开焊盘一点点，于是另外一个点的电压又不正常了。。。那里有一坨焊锡，脱焊的引脚上也是，白茫茫一片，实在是很难发现。。。这种bug该如何吐槽！！</p>
<h2 id="J-link固件"><a href="#J-link固件" class="headerlink" title="J-link固件"></a>J-link固件</h2><p>装好驱动插上仿真器，直接就提醒我更新固件。我这种追新的人，怎么可能用旧版的固件！直接点了更新，还真是给力，不到半分钟就自动完成了刷固件的过程，然后仿真器就重启了，，，然后就没有然后了。。。</p>
<p>网上查了一下，貌似是因为驱动版本太高了，发现了我山寨的本质，于是就罢工了。。。于是去下载了号称稳定版的4.08驱动，手头还有另一个没刷固件的仿真器，这就开始了漫长的尝试过程</p>
<ul>
<li>驱动：<ul>
<li>4.46f</li>
<li>4.08i</li>
</ul>
</li>
<li>固件：<ul>
<li>仿真器自带的固件（2010年编译）</li>
<li>最新的固件（2012年编译）</li>
<li>从网上下载的固件（2009年编译）</li>
</ul>
</li>
</ul>
<p>驱动配固件，这一共有6种组合，每种组合还有J-link和RDI两种调试方法，还分JTAG和SWD两种接口。所以一共是这么二十多种组合吧，我基本全都试了一遍。有的根本找不到仿真器，有的没法启动调试，有的貌似对了但其实程序根本没刷进去。。。总之，旧版的驱动不认M4芯片，于是只能用新版，但新版的驱动会发现我是山寨的，于是固件要用旧版，于是就囧了。。。只有一种组合可以把程序刷进去并且运行，那就是4.46f驱动，2010年的旧固件，J-link调试，用SWD接口。。。。。。还有，IAR环境要用6.3最新版的。。。否则不支持M4芯片。。。就因为IAR的版本太低，我浪费了大概4个多小时。。。</p>
<p>但这种样也不太行，芯片被不停的复位，终于受不了了，放弃了。。。</p>
<p>今天直接杀到老师的公司，求肖工指导。肖工断定我仿真器的线接错了，我说不可能！肖工也太小看我了，上次说我接反电源的事情我还耿耿于怀呢。。。一共8根线，我照着官方的文档接的，这都能错我还用混吗！！我一直坚持我的仿真器有问题，让他替换一下。果然不出所料，他也没法用我的仿真器。。。</p>
<p>于是他点了自动提示的固件升级，我心想这下完蛋了，没有2010固件的仿真器了，情何以堪。升级完固件，居然好了！我擦~难道之前一直不行是因为仿真器固件太低了？瞄了一眼肖工的驱动版本，是4.36f，比我4.46f要稍低一些。拿着刷好固件的仿真器到自己的电脑上一试，果然好了，固件的编译日期是2011年的。</p>
<p>难道我纠结了2天的问题，就是因为固件版本错误？后来我觉得，那个固件应该不是从网上自动下载的，而是随着J-link驱动而安装的。4.36f驱动带的2011年固件是比较合适的，4.36f驱动也能认出M4芯片</p>
<h2 id="千金易得，开发板难求"><a href="#千金易得，开发板难求" class="headerlink" title="千金易得，开发板难求"></a>千金易得，开发板难求</h2><p>人家又让把板子留下了。。。怒了，决定自己做一块。。。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/embedded/jlink-clone-and-cm4-board/">http://kuangqi.me/embedded/jlink-clone-and-cm4-board/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下载J-link仿真器驱动&quot;&gt;&lt;a href=&quot;#下载J-link仿真器驱动&quot; class=&quot;headerlink&quot; title=&quot;下载J-link仿真器驱动&quot;&gt;&lt;/a&gt;下载J-link仿真器驱动&lt;/h2&gt;&lt;p&gt;上了SEGGER的官方网站，找到了下载驱动的地方，点了让我输入序列号，我看仿真器的背面，没序列号啊~我只好点下面的一个我没序列号的链接，点进去它问你为啥没序列号，其中包括板载仿真器、OEM产品等等，我也不知道我为啥没序列号，只好点了一个其他原因。。。然后它让我保证，不将软件和仿真器用于非法用途，好吧，我保证。。。&lt;/p&gt;
&lt;p&gt;下面的一幕我震惊了——网站上出现了十几张仿真器的图片，我以为是让你选自己是哪一款，我一眼就看到了我的那款，鼠标点了没反应，只好仔细看英文提示，结果人家说——这里是一个山寨仿真器大全，如果您使用的是以下这些图片中的仿真器，那基本可以确定你那个是山寨的。这些山寨仿真器基本都是在中国和俄罗斯制造的。如果你不确定你的是不是山寨，请联系XXXXX。。。。&lt;/p&gt;
    
    </summary>
    
      <category term="软硬兼施" scheme="http://kuangqi.me/categories/embedded/"/>
    
    
  </entry>
  
  <entry>
    <title>MSP430 Value Line MCU的时钟系统</title>
    <link href="http://kuangqi.me/embedded/the-clock-system-on-msp430g2/"/>
    <id>http://kuangqi.me/embedded/the-clock-system-on-msp430g2/</id>
    <published>2012-05-15T17:16:12.000Z</published>
    <updated>2016-11-29T15:02:00.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关闭看门狗"><a href="#关闭看门狗" class="headerlink" title="关闭看门狗"></a>关闭看门狗</h2><p>由于要使用仿真器调试，加断点后MCU被挂起，会导致看门狗被触发而将MCU复位。因此在调试阶段，我们需要先关闭看门狗。关闭看门狗的方法是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WDTCTL = WDTPW + WDTHOLD;</div></pre></td></tr></table></figure>
<p>WDTCTL是一个16位的寄存器，顾名思义，就是看门狗的控制寄存器。WDTHOLD是控制看门狗开关的标志位。给WDTHOLD置位即关闭看门狗。但是这个WDTPW是什么呢？查手册得知WDTPW是看门狗的密码，这是一个宏，被定义为了0x5A00，这个密码是干什么用的呢？原来，WDTCTL寄存器是一个非常特殊的寄存器，为了防止程序异常时意外关闭看门狗，对它进行赋值操作时必须将其新值的高8位设为0x5A这个特定的值，也就是“密码”。如果赋值时新值的高8位不是0x5A，会导致MCU立即被复位。总之，对WDTCTL进行任何修改操作时，都要加上WDTPW的值。</p>
<a id="more"></a>
<h2 id="时钟系统"><a href="#时钟系统" class="headerlink" title="时钟系统"></a>时钟系统</h2><p>对于玩51单片机的人来说，学习MSP430的时钟系统是很痛苦的，也很颠覆的。MSP430为了做到超低功耗，对时钟系统进行了精妙的设计。网上有文章专门讲解MSP430的时钟系统，还有生动的配图。但遗憾的是这些讲解都多多少少的存在问题甚至是错误的。既然说人家讲得不好，我也就斗胆说说自己的理解。对时钟系统最精确的描述当然就是手册里的框图了：</p>
<p><img src="/images/msp430g2-clock-system-1.jpg" alt=""> </p>
<p>我不喜欢看这种框图，觉得特别复杂，看起来累。但是静下心来看它时，你会发现其实它并不是那么复杂，很多困惑的问题也就迎刃而解了。唯一需要你了解的背景知识是，你必须要认识啥是多路选择器（Mux）。。。</p>
<p>首先，MSP430的时钟系统有这么几个概念。</p>
<ol>
<li><p>时钟源：产生震荡的时钟信号。MSP430中最多有4个时钟源，分别是：</p>
<ul>
<li>DCO（数控晶振）</li>
<li>VLO（超低功耗低频晶振）</li>
<li>LFXT1（低频外部晶振）</li>
<li><p>XT2（高频外部晶振）。</p>
<p>在Value Line产品中，并非支持全部的四种时钟源。以MSP430G2231为例，内置了DCO和VLO，XT1可以自己焊接，XT2不支持。</p>
</li>
</ul>
</li>
<li><p>时钟：供系统设备使用的时钟信号，通常是时钟源的原始信号经过分频后得到。MSP430有3个时钟，分别是：</p>
<ul>
<li>MCLK（主时钟，供CPU核心使用）</li>
<li>ACLK（辅助时钟，供外围设备使用）</li>
<li>SMCLK（子系统时钟，供外围设备使用）</li>
</ul>
</li>
<li><p>每个时钟都可以配置</p>
<ul>
<li>从指定的时钟源获得信号</li>
<li>对信号进行/1/2/4/8分频</li>
<li>时钟开关</li>
</ul>
</li>
</ol>
<p>上面的框图我们从中间横向的红线分开看，上面一部分是低频时钟，LFXT1Sx这两个标志位用于选择使用哪个时钟源来驱动系统的低频时钟。蓝色的线就是低频时钟源的输出。下面一部分是高频时钟，红色的细线是高频时钟的输出(对没有XT2的芯片来说)。需要注意的是，这条蓝色线接在LFXT1Sx对应的数据选择器的后面。也就是说，系统只能选择一个低频时钟。比如我选择VLO作为ACLK的时钟源，那蓝色那条线上就是VLO的时钟信号。那即使我有外部晶振，也不能选择LFXT1作为MCLK的时钟源。就是这种机制，很多人没有理解清楚（或者没有表达清楚），致使网上的大部分教程都在说，MCLK是从ACLK和DCO中二选一，这样说是不准确的。因为蓝色的线在ACLK的分频器之前，所以并不受ACLK分频设置的影响，因此蓝色线上跑的并不是ACLK时钟信号，而是ACLK的时钟源信号。</p>
<p>更准确的理解是这样的：MCLK仍然是从DCO、VLO、LFXT1和XT2（如果有的话）中四选一，ACLK仍然是从LFXT1和VLO中二选一，SMCLK仍然可以从DCO和XT2（如果有的话）中二选一（如果没有XT2就在DCO、LFXT1、VLO中三选一）。只不过有一个约束，那就是如果MCLK或者SMCLK想要选择VLO或者LFXT1，那就必须跟ACLK选的一样。</p>
<p>在绝大部分Value Line产品中（以MSP430G2231为例），你可以采用更简单的记法：低频时钟源从LFXT1和VLO中选一个，高频时钟源只有DCO一个。因此对系统时钟(MCLK, ACLK, SMCLK)来说，只有2个时钟源，一个低频一个高频。三个系统时钟都可以选择使用低频时钟源（图中蓝线）或者高频时钟源（图中红线）。</p>
<p><strong>（2012年7月11日勘误：MCLK和SMCLK可以从低频和高频中选一个，而ACLK只能选择低频）</strong></p>
<p>以下内容均以MSP430G2231和MSP430G2553芯片为例，即不存在XT2</p>
<h2 id="具体编程，对时钟源和系统时钟的配置和使用"><a href="#具体编程，对时钟源和系统时钟的配置和使用" class="headerlink" title="具体编程，对时钟源和系统时钟的配置和使用"></a>具体编程，对时钟源和系统时钟的配置和使用</h2><ol>
<li><p>低频时钟源配置——寄存器BCSCTL3 (Basic Clock System Control Register 3)<br> 配置低频时钟的时钟源其实就是修改上面图中的LFXT1Sx，这两个标志位位于BCSCTL3这个8位寄存器的第4、5位。</p>
<pre><code>//使用频率约为12kHz的VLO作为低频时钟源
BCSCTL3 |= LFXT1S_2;
</code></pre><p> 头文件中定义了LFXT1S_2，其实就是第4位为1，第5位为0. 含义是使用VLO</p>
<pre><code>// 使用Launchpad自带的32768Hz外部晶振，电容12.5pF
BCSCTL3 |= LFXT1S_0 + XCAP_3; 
</code></pre><p> 头文件中定义的LFXTS_0含义是使用外部晶振，同时设置 XCAP_3，含义是晶振的负载电容是12.5pF</p>
</li>
<li><p>高频时钟源的配置</p>
</li>
<li><p>系统时钟MCLK的时钟源选择——寄存器BCSCTL2 (Basic Clock System Control Register 2)</p>
<pre><code>// 清晶振错误标志位
IFG1 &amp;= ~OFIFG;
// 不懂。。。
__bis_SR_register(SCG1 + SCG0);
//系统时钟选择为低频，/8分频
BCSCTL2 |= SELM_3 + DIVM_3;
</code></pre></li>
</ol>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/embedded/the-clock-system-on-msp430g2/">http://kuangqi.me/embedded/the-clock-system-on-msp430g2/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关闭看门狗&quot;&gt;&lt;a href=&quot;#关闭看门狗&quot; class=&quot;headerlink&quot; title=&quot;关闭看门狗&quot;&gt;&lt;/a&gt;关闭看门狗&lt;/h2&gt;&lt;p&gt;由于要使用仿真器调试，加断点后MCU被挂起，会导致看门狗被触发而将MCU复位。因此在调试阶段，我们需要先关闭看门狗。关闭看门狗的方法是：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;WDTCTL = WDTPW + WDTHOLD;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;WDTCTL是一个16位的寄存器，顾名思义，就是看门狗的控制寄存器。WDTHOLD是控制看门狗开关的标志位。给WDTHOLD置位即关闭看门狗。但是这个WDTPW是什么呢？查手册得知WDTPW是看门狗的密码，这是一个宏，被定义为了0x5A00，这个密码是干什么用的呢？原来，WDTCTL寄存器是一个非常特殊的寄存器，为了防止程序异常时意外关闭看门狗，对它进行赋值操作时必须将其新值的高8位设为0x5A这个特定的值，也就是“密码”。如果赋值时新值的高8位不是0x5A，会导致MCU立即被复位。总之，对WDTCTL进行任何修改操作时，都要加上WDTPW的值。&lt;/p&gt;
    
    </summary>
    
      <category term="软硬兼施" scheme="http://kuangqi.me/categories/embedded/"/>
    
    
  </entry>
  
  <entry>
    <title>电子积木开发手记</title>
    <link href="http://kuangqi.me/embedded/note-on-electronic-bricks/"/>
    <id>http://kuangqi.me/embedded/note-on-electronic-bricks/</id>
    <published>2012-04-22T06:45:35.000Z</published>
    <updated>2016-11-29T15:02:00.183Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2012年3月24日"><a href="#2012年3月24日" class="headerlink" title="2012年3月24日"></a>2012年3月24日</h2><p>最近准备做个串口通信的LED数码管显示板，搞了一堆芯片做实验，遇到的问题挺多的，这里记录一下吧。</p>
<h3 id="CMOS芯片不用的输入端不能悬空"><a href="#CMOS芯片不用的输入端不能悬空" class="headerlink" title="CMOS芯片不用的输入端不能悬空"></a>CMOS芯片不用的输入端不能悬空</h3><p>浪费一个小时的时间，惨痛的教训证明，数电老师上课强调的事情并非子虚乌有。。。用了一个74HC595串入并出移位寄存器，有个神棍的清零端，我也用不着，就悬空了。结果数码管都是半亮半不亮的状态，很诡异。检查电路，无果。。。后来忽然意识到，这个HC貌似就代表这是个CMOS的芯片，于是把那个清零端接到高电位，和谐了。。。</p>
<a id="more"></a>
<h3 id="0805表面贴装的电阻可以焊到洞洞板上"><a href="#0805表面贴装的电阻可以焊到洞洞板上" class="headerlink" title="0805表面贴装的电阻可以焊到洞洞板上"></a>0805表面贴装的电阻可以焊到洞洞板上</h3><p>感觉一般的电阻体积太大，想搞点小的，就顺便买了100个表贴的电阻，回来发现真的可以焊到洞洞板上，刚好是两个洞洞的长度~还有，SMD的电阻貌似很精确，标明的误差是5%，可是我实测的误差都在0.5%以内，出乎意料</p>
<h3 id="串口通信，神棍一般的波特率计算！"><a href="#串口通信，神棍一般的波特率计算！" class="headerlink" title="串口通信，神棍一般的波特率计算！"></a>串口通信，神棍一般的波特率计算！</h3><p>调串口通信的程序，收到的一直是乱码，无限吐血中。。。很奇怪，为什么网上的代码都是在11.0592的晶振上做的，我的晶振是12.000的，就是找不到代码。我自己算了一个<code>RELOAD</code>值，也不行。后来看到数据手册上提到了波特率的误差，又在STC官方下到了波特率计算工具，直接生成C代码，挺给力的。更重要的是，这个软件会给出一个波特率的误差。在12.000MHz，12T，9600bps的情况下，误差超过了8%，而数据手册要求误差不能高于3%，看来是达不到要求的。只好把波特率改成了2400bps，成功了。。。</p>
<p>另外在STC11的单片机上，可以使用内部RC时钟，还有独立波特率发生器，由于STC11是1T的单片机，所以波特率的误差会小一些，可以达到9600的波特率了。要注意的是晶振频率要选5.5296，我手动改到了更准确(吗？)的5.8，貌似没多大区别。但是6.0的话就不行了。。。</p>
<hr>
<h2 id="2012年4月3日"><a href="#2012年4月3日" class="headerlink" title="2012年4月3日"></a>2012年4月3日</h2><p>连续在一件事情上做几天，收获还是非常大的</p>
<h3 id="第一件要吐槽的事情一定是：波特率！"><a href="#第一件要吐槽的事情一定是：波特率！" class="headerlink" title="第一件要吐槽的事情一定是：波特率！"></a>第一件要吐槽的事情一定是：波特率！</h3><p>记住这句话：通信出了什么诡异的问题，先换个芯片试试~</p>
<p>对于计算机系的童鞋来说，出问题了先考虑外部的因素不是个好习惯。。。但是，，，写底层的程序是要跟硬件打交道的，如果程序貌似都对了，没改啥东西，就突然又不对了，，，那极有可能是硬件的问题了。。。</p>
<p>波特率。。。只要串口调试一出乱码，一定又是波特率的问题，就是这货没跑了！！！</p>
<p>曾经出过诡异的通信乱码的问题，当时没有完全搞清楚波特率的机制，不知道怎么就改好了，也没有记录下来，导致今天又浪费了几小时的时间。。。</p>
<p>导致今天串口通信乱码的原因是芯片的内部时钟不准确，之前都按照5.5296计算的波特率，STC11的内部时钟一般都在5.6或者5.7，误差小于3%的话就问题不大。但是今天遇到了2片神芯片，出厂时钟频率达到了5.82，误差超过了5%，直接就没法通信~另外一片是5.72，经常出错。我应该庆幸今天先遇到了那个5.82的，是这个根本没法通信的片子让我彻底研究明白了这个问题。如果我今天先用了那个5.72的，可以想象我现在还在查找程序的错误，冥思苦想为啥通信老是出现诡异的错误，而且还不一定啥时候出错。。。</p>
<p>想用5.82的那个芯片的话，就必须把波特率从115200降到19200甚至9600，否则误差太大。我知道9600的话数码管会闪的厉害，于是试了19200，发现数码管依然有轻微的闪烁，我又比较强迫，于是就放弃了降低波特率的方案。其实5.72的误差是3%多一点，大概是0.07个百分点吧，反正刚好骑在线上，就是多的这一点让通信时断时续。。。不知道3%的限制是怎么提出来的，实在是太牛了。。。</p>
<p>哦，STC宣传说，内部时钟很精确，温飘1%，常温下0.5%，从今天的结果来看，这个宣传貌似虚假宣传，仔细想想暗藏玄机。。。的确，对于同一个芯片，它的温飘是比较小的，应该在他说的范围内，但是不同芯片间的频率可能差别超过5%，这件事情不管是宣传页还是数据手册里都没提到。。。是啊，准确性是一回事，一致性是另外一回事了，对吧~可是我要多机通信啊！！！</p>
<p>开始还在想默认的5.5296这个数字是怎么来的，后来发现有一种晶振的频率就是这个。看来做高波特率的通信最好还是用外部晶振，内部时钟太不靠谱了。。。买晶振去。。。</p>
<h3 id="1602液晶及其在Proteus里的仿真"><a href="#1602液晶及其在Proteus里的仿真" class="headerlink" title="1602液晶及其在Proteus里的仿真"></a>1602液晶及其在Proteus里的仿真</h3><p>首先，，，Proteus里的器件型号叫LM016L。。。</p>
<p>1602的程序网上有很多，但对的不多，写得好的就更少了。单就上电复位的时序，有十分之一的能写对就不错了。。。绝大部分程序都没有检测busy flag的代码，直接用delay延时一会儿，确保数据处理完。。。写的比较好的一个程序是汇编语言的，虽说汇编不会编，但是一林老师教过一些，看还是大概能看懂，很有帮助。。。</p>
<p>不过实际应用中的1602倒是很泼辣，就算程序写的比较烂，它也能识别出来。我的第一个错的离谱的程序，根本就没有上电复位，它还是能显示出字来（读了英文版的手册，其中说到复位是自动进行的，如果外围元件和电源的电气特性不好，上电复位可能会失败，这时候就需要手动用指令来复位，这也可能是很多程序没有复位的代码仍是正确的原因吧），而之后我的程序愈加趋向于正确时，它反而不理我了。。。</p>
<p>比较诡异的是，1602的模块没有像样的数据手册，后来下到了主控芯片的英文datasheet，里面讲解上电时序非常清晰，这才把模块初始化写的像模像样。</p>
<p>值得一提的是，它到底是上升沿执行命令还是下降沿执行命令。。。答案是毋庸置疑的：下降沿。但是你看网上的程序，有先<code>E = 1</code>再<code>E = 0</code>的，也有反过来的，我猜想他敢把程序发上来，应该是可以用的，但为啥有两种相反的写法呢？这个要看使能信号E是长期保持高电位还是长期保持低电位。我比较喜欢的方式是长期高电位，数据准备好后，<code>E = 0</code>，给个下降沿，然后就测busy flag，搞定后重新<code>E = 1</code>。但正是这种代码，先置零再置一，给人一种上升沿触发的错觉，我开始也弄错了，后来又受到中文版山寨数据手册上时序图的误导，以至于错的一塌糊涂。。。</p>
<p>如何测busy flag，没写这个代码的人估计是出于两个原因，一是模块速度很快，可能一条指令是40微秒吧，delay一下就过去了。。。二是不会写，因为这一步数据手册上讲解的也很少。直到我开始写这篇日志之前，我对测busy flag的理解仍是错误的。我刚才写到一半，觉得说服不了自己，于是去读英文版的datasheet，，，对于测busy flag没有文字性的描述，只有一张时序图，耐着性子仔细看了一下，终于明白了。。。之前还要单独写个proteus版的代码，还以为是proteus的bug。。。现在终于统一了。。。</p>
<p>测busy flag的方法是：</p>
<ol>
<li>将RS和RW位置为读指令（<code>RS = 0</code>，<code>RW = 1</code>）</li>
<li>E给下降沿</li>
<li>测D7</li>
<li>D7为零跳出，为一转到步骤2. 这里要特别注意，如果是忙状态，需要重新给下降沿</li>
</ol>
<p>这个过程，在我看过的所有C代码中，还没有人写对。要么就是delay混过去，要么压根就是错误的. 唯一正确的是那个汇编的代码，估计大家都不会去看，于是真想就离我们越来越远。。。注意，只有这样写才既符合协议又能通过Proteus仿真</p>
<h3 id="C51模拟PMW输出"><a href="#C51模拟PMW输出" class="headerlink" title="C51模拟PMW输出"></a>C51模拟PMW输出</h3><p>想用单片机调液晶屏背光的亮度，于是就研究了一下怎么做脉宽调制。。。</p>
<p>在STC89C52RC上试了一下，参数是：<br>计时器0，8位自动重装，溢出时间52微秒<br>计数器，最大值64<br>频率：$ \frac{1}{(52 \times 10^{-6} \times 64)} $ 约等于300Hz</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">void tmr0_isr() interrupt 1 using 1</div><div class="line">&#123;</div><div class="line">    if(counter &gt; pmw_val) P1 = 0xff;</div><div class="line">    else P1 = 0;</div><div class="line">    if(counter == RANGE) counter = 0;</div><div class="line">    counter++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个ISR比较短，就全文贴上来吧。。。</p>
<p>其实我还写了计时器1的ISR，用于自动的调整<code>pmw_val</code>，从而产生呼吸灯的效果。但是遇到了问题，张万祥大牛提示我要加上<code>using</code>。。。我加了，就好了。。。当时是谁告诉我<code>using</code>不加肯定不会错的。。。又是坑爹的网友吧。。。</p>
<p>还有，PWM真的很耗资源。。。因为52微秒，溢出的真的很快。。。我写了“呼吸流水灯”。。。加了呼吸，流水的速度估计要慢5倍左右吧。。。现在，我才理解了为啥那些芯片要宣传说带有PMW口，我当时还想呢，51用定时器也能做，干嘛要PMW口。。。</p>
<p>弱弱的说一下，，，STC官方的定时器计算器挺好用的，不用自己算溢出时间。。。还有，如果没用自动重装的计时器，别忘了要在ISR里重装。。。我当时忘了重装还说是不是STC计算的溢出率有错误。。。我弱爆了。。。</p>
<h3 id="STC的自定义下载"><a href="#STC的自定义下载" class="headerlink" title="STC的自定义下载~~"></a>STC的自定义下载~~</h3><p>很有爱的功能。因为STC总要掉电下载，很多人不堪其扰，制作出各种神棍的“自动掉电下载器”。。。有基于STC15做的，被黑心商贩卖出了三四十元的高价，有用继电器做的，听起来就凶残。。。其实STC提供了自定义下载，MCU接收到指定的信号，就软件复位到ISP程序区，开始下载。很多人嫌麻烦不愿意再加一坨串口的通信，由于我要做的东西正好都要用串口，所以就顺手加了几行代码~我用的是<code>5c21</code>作为下载置指令，翻译成字符就是<code>\!</code>，貌似下载指令不应该这么短的。。。但我貌似没发现问题。。。我的程序里用反斜杠作为转义字符，直接加了一个<code>if</code>，就搞定了~对了，复位到ISP的语句是<code>IAP_CONTR = 0x60;</code>（连这句话网上也有人写错。。。无语）如果不能编译，请自行检查头文件。。。需要用STC的头文件，<code>reg51.h</code>是不行的。。。</p>
<p>我在执行复位到ISP那句话之前，还在LCD上显示出Downloading…字样，由于1602是锁存的，所以这句话会一直显示在屏幕上，直到下载完成~非常酷~</p>
<hr>
<h2 id="2012年4月9日"><a href="#2012年4月9日" class="headerlink" title="2012年4月9日"></a>2012年4月9日</h2><p>舍友提醒我说，我已经“沉迷”一周了。。。<br>不过让人欣慰的是，基本的设计目标已经达成了，尽管经历了一些所谓的“坎坷”。。。</p>
<h3 id="去买了晶振，串口通信稳定了"><a href="#去买了晶振，串口通信稳定了" class="headerlink" title="去买了晶振，串口通信稳定了"></a>去买了晶振，串口通信稳定了</h3><p>5.5296MHz的晶振貌似很不常用，中发很多专门卖晶振的摊位都没有这个频率。找到一家，我要十个，他说8毛，我扔给他5元钱，还等着找钱呢，结果人家说是1个8毛，我勒个去。。。后来找到了5毛的，其实应该2-3毛吧。。。</p>
<h3 id="做了块STC11的扩展板"><a href="#做了块STC11的扩展板" class="headerlink" title="做了块STC11的扩展板"></a>做了块STC11的扩展板</h3><p>自认为最满意的一块板子，电路和焊接都很满意~上面还加了个按钮，用于在下载的时候给单片机掉电重启。从一条USB转232的线里拆出了一块USB的模块。。。那条线一米长加两边插头才5元钱，果然便宜没好货，还要加个MAX232做电平转换。。。</p>
<h3 id="自动检测波特率，检测串口设备"><a href="#自动检测波特率，检测串口设备" class="headerlink" title="自动检测波特率，检测串口设备"></a>自动检测波特率，检测串口设备</h3><p>这个程序写的挺满意的，我的温度传感板波特率是57600，而显示板是115200，我的目标是让扩展板插在任意一个端口，都能自动检测并工作。写了个<code>uxUartProbe</code>，实现了这个功能</p>
<h3 id="received标志位没置零，调了很久"><a href="#received标志位没置零，调了很久" class="headerlink" title="received标志位没置零，调了很久"></a>received标志位没置零，调了很久</h3><p>这种弱智的bug也能浪费很多时间，无奈了。。。</p>
<p>最后上一张图吧。。组合之后的数字温度计~数码管还可以换成1602液晶屏，协议是一样的，所以不需要改程序。</p>
<p><img src="/images/electronic-bricks-1.jpg" alt=""></p>
<hr>
<h2 id="2012年4月22日"><a href="#2012年4月22日" class="headerlink" title="2012年4月22日"></a>2012年4月22日</h2><p>最近开发停滞了一下，事情也比较多，团队里的同学也大概熟悉了整个系统的架构，也都找到了各自的开发方向。现在矩阵键盘扩展板已经完成，步进电机和红外通信两块板子也都在进行中，估计也差不多了。</p>
<p>最近值得称道的事情就是TI的免费样片和超便宜的开发板了。去TI官网申请了MSP4302231和MSP4302302的免费样片，每个都给了2片。还申请了价值4.9美金的LM4F232，给了一片。联邦快递寄过来的，用防静电袋包装的，很给力的样子~~</p>
<p>单片机有了，还需要个开发板，淘宝上的板子价格也各种奇葩，于是自己到美国官网上订购了Launchpad G2开发板，只要4.3美金，还包国际邮费！开发板上是集成仿真器的，还随套件送2个单片机、2张贴纸还有晶振、USB线、排针啥的。实在是太超值了！让我百思不得其解是，仿真器那部分里面用到了一个价值8.55美金的芯片MSP430F1612IPMR，但整个套件才卖4.3美金啊！哪位高人知道的话告诉我一下。。。</p>
<p>吐槽一下我的中国银行借记卡，PayPal是支持银联卡充值的，但是只支持62开头的银联卡，我中行的不是62开头的。。。难道银联卡和银联卡还不一样嘛。。。神棍。。。只好到淘宝上找人，花了30元充了4.33美金，去TI eStore上支付了~</p>
<p>现在开发板已经发货了，静待到货喽~~</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/embedded/note-on-electronic-bricks/">http://kuangqi.me/embedded/note-on-electronic-bricks/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;2012年3月24日&quot;&gt;&lt;a href=&quot;#2012年3月24日&quot; class=&quot;headerlink&quot; title=&quot;2012年3月24日&quot;&gt;&lt;/a&gt;2012年3月24日&lt;/h2&gt;&lt;p&gt;最近准备做个串口通信的LED数码管显示板，搞了一堆芯片做实验，遇到的问题挺多的，这里记录一下吧。&lt;/p&gt;
&lt;h3 id=&quot;CMOS芯片不用的输入端不能悬空&quot;&gt;&lt;a href=&quot;#CMOS芯片不用的输入端不能悬空&quot; class=&quot;headerlink&quot; title=&quot;CMOS芯片不用的输入端不能悬空&quot;&gt;&lt;/a&gt;CMOS芯片不用的输入端不能悬空&lt;/h3&gt;&lt;p&gt;浪费一个小时的时间，惨痛的教训证明，数电老师上课强调的事情并非子虚乌有。。。用了一个74HC595串入并出移位寄存器，有个神棍的清零端，我也用不着，就悬空了。结果数码管都是半亮半不亮的状态，很诡异。检查电路，无果。。。后来忽然意识到，这个HC貌似就代表这是个CMOS的芯片，于是把那个清零端接到高电位，和谐了。。。&lt;/p&gt;
    
    </summary>
    
      <category term="软硬兼施" scheme="http://kuangqi.me/categories/embedded/"/>
    
    
  </entry>
  
  <entry>
    <title>北师大SSL VPN系统——你彻头彻尾地震惊了我！</title>
    <link href="http://kuangqi.me/tricks/bnu-vpn-shock-me/"/>
    <id>http://kuangqi.me/tricks/bnu-vpn-shock-me/</id>
    <published>2012-02-15T17:06:08.000Z</published>
    <updated>2016-11-29T15:02:00.170Z</updated>
    
    <content type="html"><![CDATA[<p>寒假放假前，收到了学校的邮件，说我们有需要的话可以去申请开通北师大的VPN以便在假期访问校内的资源。于是就顺手申请了一下，后来果然通过了申请，得到了账号。然而就从得到账号那一天起，这个系统一次又一次地给我带来了惊喜甚至是惊吓。随后的发生的一系列事件，让我彻底震惊了！</p>
<h2 id="第一震：兼容性"><a href="#第一震：兼容性" class="headerlink" title="第一震：兼容性"></a>第一震：兼容性</h2><p>从打开登录的网页说起，可是发现这个系统居然只支持Windows系统，而且还要用32位的IE浏览器。这不是坑爹吗？</p>
<h2 id="第二震：基于ActiveX"><a href="#第二震：基于ActiveX" class="headerlink" title="第二震：基于ActiveX"></a>第二震：基于ActiveX</h2><p>无奈在Mac上开起了Windows XP的虚拟机，下载那个传说中的登录客户端。我很困惑为啥网页有登录界面了还要装客户端，结果装上一看是基于ActiveX的，ActiveX技术在1996年由微软提出，并应用到了其IE3浏览器中。至今已经有15年的历史。ActiveX技术在其安全性，交互性和可移植性等许多方面早已不适应当今的互联网发展，就连微软也已经放弃了该技术，在微软的官网上貌似已经找不到ActiveX的影子了。但令人不解的是，中国的IT企业却咬住这块狗屎不放，各种ActiveX控件打着“安全”的旗号在各大网站上大行其道。其中最为常见和常用的要数臭名昭著的“网银安全控件”。说到“安全控件”，我可以连续吐槽几个小时，好在本文主题并不是吐槽ActiveX和安全控件，暂且搁置不说。</p>
<a id="more"></a>
<h2 id="第三震：TAP驱动"><a href="#第三震：TAP驱动" class="headerlink" title="第三震：TAP驱动"></a>第三震：TAP驱动</h2><p>再说这个VPN，安装快结束的时候提示我要安装TAP驱动，而且还没通过传说中的“微软徽标认证”，问我要不要继续…说道TAP驱动，我顿时有种似曾相识的感觉~话说这不是大名鼎鼎的开源VPN系统OpenVPN的驱动程序吗？难道北师大这个牛逼哄哄的SSL VPN系统是基于OpenVPN做的？如果是OpenVPN，那就意味着它可以被移植到64位Windows/Linux/MacOS甚至是iPhone上。这岂不是很爽~</p>
<h2 id="第四震：OpenVPN的影子"><a href="#第四震：OpenVPN的影子" class="headerlink" title="第四震：OpenVPN的影子"></a>第四震：OpenVPN的影子</h2><p>猜想归猜想，还是需要来验证一下的。打开VPN的登录页面，敲上用户名和密码。直接在网页上显示出了一个“很炫”的登录界面，不久后就登录成功了。去ip查询的网站验证了一下，果然变成的北师大的IP。整个过程在网页上完成，貌似没有发现OpenVPN的影子… 等等，不是有ActiveX吗？打开任务管理器，看了下进程。果然有个<code>ipass_client.exe</code>进程，看来ActiveX触发的后台程序就是它了。到安装目录里转悠一下，发现Program Files里相关的目录居然有两个，一个是一坨控件啥的，应该是ActiveX前端模块所在的目录。另一个一个是<code>ipass_client.exe</code>所在的目录，进去一看发现了个<code>ca.crt</code>，这难道就是传说中的证书吗？！有了证书还不行，得有配置文件。纵览目录，没有发现<code>.ovpn</code>或者<code>.conf</code>之类的明显的配置文件，来回看几次，只有一个小于1KB的文件，名为<code>client.ipass</code>，用记事本打开，一个标准的OpenVPN配置文件呈现在了我的面前……</p>
<p>结束了吧~！这个系统就是一个ActiveX带着一个OpenVPN的客户端吧~继续测试，发现<code>ipass_client.exe</code>就是一个改名了的<code>openvpn.exe</code>，其版本为<code>2.1 rc13</code>。兴奋的我马上将配置文件和证书拷贝到Mac系统，用Tunnelblick载入并登录，然而，naive的我哪里知道，令人震惊的事情才刚刚开始！</p>
<h2 id="第五震：验证失败"><a href="#第五震：验证失败" class="headerlink" title="第五震：验证失败"></a>第五震：验证失败</h2><p>神马？这是我最想不到的错误。OpenVPN客户端居然收到了<code>AUTH_FAILED</code>消息！我输入的就是我在网页上登录的用户名和密码啊！难道前端和后端的用户名或者密码是不一样的？没这个必要吧！不过收到<code>AUTH_FAILED</code>消息也从侧面证实了服务器上安装的正是OpenVPN系统，而且应该是未经修改的。既然服务器上是OpenVPN，那估计trick就在客户端了吧~再次回到XP虚拟机，在命令行里用它自带的<code>ipass_client.exe</code>登录，输入用户名密码后还是提示<code>AUTH_FAILED</code>。下面我们需要具体验证一下这个<code>ipass_client.exe</code>是原版的还是经过修改的。</p>
<h2 id="第六震：未经修改"><a href="#第六震：未经修改" class="headerlink" title="第六震：未经修改"></a>第六震：未经修改</h2><p>经过实验发现，<code>ipass_client.exe</code>果然是全裸上阵！我用从ipv6vpn.cn的客户端中提取的<code>openvpn.exe</code>替换了<code>ipass_client.exe</code>，这个程序的版本是<code>2.1.1</code>，感觉差别不会很大。果然，替换后在网页上登录成功了！可见这个<code>ipass_client.exe</code>真的就是一个原汁原味的全裸<code>openvpn.exe</code>。剩下的任务貌似很简单了，只要把它真正登录OpenVPN的用户名和密码搞出来，就一定可以移植到别的系统上了。</p>
<h2 id="第七震：诡异的进程间通信"><a href="#第七震：诡异的进程间通信" class="headerlink" title="第七震：诡异的进程间通信"></a>第七震：诡异的进程间通信</h2><p>获得登录OpenVPN的用户名和密码费了一番周折，最后还是无所不能的易大神牛出手相助才最终解决。<code>ipass_client.exe</code>是由IE中的ActiveX控件启动的，但是看配置文件里是<code>auth-user-pass</code>，这种配置应该是需要在OpenVPN里手动输入用户名和密码的，可是实际上只要在网页里输入就可以。为了获得真正的登录用户名和密码，最直接粗暴的办法就是重新编译OpenVPN的客户端，加上几句话让它把输入的用户名和密码保存到文件里。这种方法应该是最后的选择，我和易牛都觉得应该有更简单的方法。于是，我进行了这些尝试：</p>
<ol>
<li>日志，改配置文件里的设置，将日志的等级开高，以期在日志中看到使用的用户名和密码。但最后发现日志中不会包含这些信息，即使是开到变态详细的<code>verb 9</code>也无济于事。此法行不通。</li>
<li>查看OpenVPN客户端启动的命令行。发现启动的命令行就是<code>ipass_client.exe clinet.ipass</code>，也就是参数只有配置文件一个，并未包含用户名和密码。此法亦不可行。</li>
<li>自己写个程序，将标准输入流中的所有信息输出到文件，以期在其中发现密码。试过了，没有得到任何信息。至今不知道为什么，难道它的密码不是通过标准输入流传输的吗…</li>
</ol>
<p>后来易牛出马，听说我的尝试后觉得很诡异，表示这些方法肯定可以得到用户名和密码。后来易牛亲自试了一遍，果然没有结果。后来易牛又提出了动态调试等几个不靠谱的方案，最终也都放弃了。</p>
<h2 id="第八震：诡异Javascript脚本现身"><a href="#第八震：诡异Javascript脚本现身" class="headerlink" title="第八震：诡异Javascript脚本现身"></a>第八震：诡异Javascript脚本现身</h2><p>易牛又找到一个新的方向，开始研究登录成功后网页的源代码，其中发现了一些JavaScript，其中包含一些提交数据验证数据还有调用ActiveX的代码。其中有一段代码是这样的：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> user=<span class="string">"48283442"</span>;</div><div class="line"><span class="comment">//...(省略)</span></div><div class="line">GFAiPass.Start(user);</div></pre></td></tr></table></figure>
<p>这段代码的诡异之处在于，其调用ActiveX的代码只有<code>user</code>一个参数。难道登录不需要密码吗？看来不是，这个JS的含义貌似比较清晰，貌似<code>user</code>则这个变量的值是从服务器获取来的，而验证用户名密码的操作在VPN系统中通常由Radius服务器完成，这里貌似不是这么做的，而是把用户名密码提交到了一个URL，就像普通的网页上的登录一样。由于只有一个参数，我们也无法做更多猜想，获取OpenVPN的登录用户名和密码仍然是工作的重点。然而这一步，却为后来的研究奠定了最最重要的基础。</p>
<h2 id="第九震：用户名密码终现原形"><a href="#第九震：用户名密码终现原形" class="headerlink" title="第九震：用户名密码终现原形"></a>第九震：用户名密码终现原形</h2><p>时间到了凌晨两点，用手机跟易牛又交流了一下，后来睡着了…第二天一早，发现手机上有易牛兴奋的咆哮，先是在QQ里，然后是飞信。易牛的飞信头像是一个握着拳头内牛满面的小人，发的消息是“搞定了”，结合起来看别有一番风味~</p>
<p>QQ里易牛的留言告诉我，OpenVPN登录的用户名就是那个由JS从服务器获取到并传给ActiveX的那个参数，而密码居然是固定不变的<code>1234</code>。后来就出门了，没有验证。易牛也再没联系我。中午，在回家的车上，发现易牛终于上线了。赶紧追问密码是怎么获取到的，易牛的答案让我佩服的五体投地…他居然把配置文件的服务器地址改成了他自己的OpenVPN服务器，那登录信息岂不是送上门来！易牛在他自己的radius服务日志里如探囊取物般的读到了用户名和密码，并对密码竟然是<code>1234</code>深感震惊！</p>
<p>这个思路真的挺牛的，客户端研究半天，没结果。服务器在学校，不会被你轻易入侵。这家伙竟然直接把数据提交到自己的服务器，实在是将计就计的妙招~易牛昨天把他的脚本发给了我，其中包含了他的<code>user</code>的值，也就是用户名，而密码又是不能修改的<code>1234</code>。因此易牛让我不要把他的用户名透露出去。</p>
<h2 id="第十震-最强震-：坑爹机制浮出水面"><a href="#第十震-最强震-：坑爹机制浮出水面" class="headerlink" title="第十震(最强震)：坑爹机制浮出水面"></a>第十震(最强震)：坑爹机制浮出水面</h2><p>话说事情到这里也应该结束了吧。用户名可以从登录后的网页中获得，密码也知道了。可是，让我们分析一下这个机制。我假设其验证机制是这样的：每个用户有自己的网页登录用户名和密码，敲到网页上后，如果验证通过，就能从服务器获取到自己的真正登录OpenVPN的用户名，而这个用户名的密码统一为<code>1234</code>。如果网页登录验证没有通过，则会因不知道自己的用户名而无法登录。</p>
<p>看看吧~怎么会有这样神棍的验证机制呢？OpenVPN可以通过Radius来认证登录啊，为啥要在网页上重新请求一个用户名呢？这种机制不但降低了安全性，还增加了工作量。这么做毫无意义啊！哪有人把密码弄得很简单，反而将用户名保密起来，而且还要通过JS+ActiveX这么复杂的机制保密起来呢？逻辑思维告诉我，这种机制是不太可能存在的。让我们做个更加大胆的猜想吧！！！我猜，那个所谓的易牛的用户名，根本就是通用的！软件作者懒得或者说根本不会配置Radius服务器，也不知道Radius如何在Web上鉴定。于是干脆设置了一把“公用钥匙”，然后用简单的网页登录的机制来验证用户，成功则授予其这把钥匙。这样虽然让整个系统毫无安全性可言，但却省去了配置Radius服务器等工作，而用简单的Web验证代替。</p>
<p>事实证明了我的猜想。我在网页上登录成功后，迫不及待的查看了JS中的用户名，果然是雷打不动的<code>48283442</code>，果断在Mac下的Tunnelblink里敲入这个用户名和密码<code>1234</code>，登录成功。</p>
<p>我发了一条短信给易牛：“易牛，你可以完全不懂担心你那个用户名泄露了。” 易牛很快也领悟出了其中的含义。</p>
<h2 id="第十一震：不出所料！免费上网目的最终达成"><a href="#第十一震：不出所料！免费上网目的最终达成" class="headerlink" title="第十一震：不出所料！免费上网目的最终达成"></a>第十一震：不出所料！免费上网目的最终达成</h2><p>据说这个VPN系统有IP地址限制，只能在校外登录，而在校内不能使用。这种限制是很合理的，如果校内也能用岂不是跟我们的项目服务器一样，成了免费上网的跳板了吗？不过我在家里没法测试其IP地址限制的功能，打算等过几天回学校再说。不过我也提出了一个猜想，那就是IP地址限制是通过前端模块实现的，而后端的OpenVPN系统中并未做限制。</p>
<p>果然，当我向易牛打听此事时，得到了肯定的答复。易牛昨天晚上就极尽free之精神，在校内，用这个垂手可得的免费VPN挂了一晚上的下载……</p>
<h2 id="第十二震：厚颜无耻！围观系统提供商"><a href="#第十二震：厚颜无耻！围观系统提供商" class="headerlink" title="第十二震：厚颜无耻！围观系统提供商"></a>第十二震：厚颜无耻！围观系统提供商</h2><p>搜索了一下这个系统的提供商，果然找到了这家北京的小公司。其中GFA iPass系统解决方案的成功案例中赫然写着北京师范大学SSL VPN项目。再看对产品和公司的介绍，更是极尽鼓吹之能事，浮夸的一塌糊涂！ 什么“权威的第三方电子认证服务机构”，什么“强大的技术研发实力”，什么“充足的优秀人才储备”，什么“手握利器，保证企业核心竞争力”……我们两个学生，几个小时的时间，整个系统的机制已经暴露无遗，其致命的缺陷已经被我们独立地发现，研究并利用。我看这家公司的技术团队实在是该自郐以下！！</p>
<hr>
<p>我已无力吐槽！！<br>我只能说，北师大SSL VPN系统——你彻头彻尾地震惊了我！！<br>北京国富安电子商务安全认证有限公司——你赢了！！！！</p>
<hr>
<p>后记：本文最初成文于2012年2月16日，由于安全性问题没有公开发表。目前，这套坑爹的VPN系统在北京师范大学已经全面停用，转而启用了国际大厂商Juniper的VPN系统。在这种情况下，我终于可以将此文公之于众，与诸位关注信息安全的同仁们交流。——与2014年4月2日</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/tricks/bnu-vpn-shock-me/">http://kuangqi.me/tricks/bnu-vpn-shock-me/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;寒假放假前，收到了学校的邮件，说我们有需要的话可以去申请开通北师大的VPN以便在假期访问校内的资源。于是就顺手申请了一下，后来果然通过了申请，得到了账号。然而就从得到账号那一天起，这个系统一次又一次地给我带来了惊喜甚至是惊吓。随后的发生的一系列事件，让我彻底震惊了！&lt;/p&gt;
&lt;h2 id=&quot;第一震：兼容性&quot;&gt;&lt;a href=&quot;#第一震：兼容性&quot; class=&quot;headerlink&quot; title=&quot;第一震：兼容性&quot;&gt;&lt;/a&gt;第一震：兼容性&lt;/h2&gt;&lt;p&gt;从打开登录的网页说起，可是发现这个系统居然只支持Windows系统，而且还要用32位的IE浏览器。这不是坑爹吗？&lt;/p&gt;
&lt;h2 id=&quot;第二震：基于ActiveX&quot;&gt;&lt;a href=&quot;#第二震：基于ActiveX&quot; class=&quot;headerlink&quot; title=&quot;第二震：基于ActiveX&quot;&gt;&lt;/a&gt;第二震：基于ActiveX&lt;/h2&gt;&lt;p&gt;无奈在Mac上开起了Windows XP的虚拟机，下载那个传说中的登录客户端。我很困惑为啥网页有登录界面了还要装客户端，结果装上一看是基于ActiveX的，ActiveX技术在1996年由微软提出，并应用到了其IE3浏览器中。至今已经有15年的历史。ActiveX技术在其安全性，交互性和可移植性等许多方面早已不适应当今的互联网发展，就连微软也已经放弃了该技术，在微软的官网上貌似已经找不到ActiveX的影子了。但令人不解的是，中国的IT企业却咬住这块狗屎不放，各种ActiveX控件打着“安全”的旗号在各大网站上大行其道。其中最为常见和常用的要数臭名昭著的“网银安全控件”。说到“安全控件”，我可以连续吐槽几个小时，好在本文主题并不是吐槽ActiveX和安全控件，暂且搁置不说。&lt;/p&gt;
    
    </summary>
    
      <category term="工巧匠心" scheme="http://kuangqi.me/categories/tricks/"/>
    
    
  </entry>
  
  <entry>
    <title>中国天气网的中央气象台实时数据接口</title>
    <link href="http://kuangqi.me/programming/data-interface-of-weather-com/"/>
    <id>http://kuangqi.me/programming/data-interface-of-weather-com/</id>
    <published>2012-02-13T15:13:53.000Z</published>
    <updated>2016-11-29T15:02:00.173Z</updated>
    
    <content type="html"><![CDATA[<p>iPhone上的天气预报用的是Yahoo!数据，实在是闹不住，本想写个中央气象台数据的天气应用，结果发现App Store上有一些做的非常好的，于是这个计划就搁浅了。。。不过还是研究了一下中国气象网的接口，这里做个笔记吧~</p>
<a id="more"></a>
<h2 id="1-XML接口"><a href="#1-XML接口" class="headerlink" title="1. XML接口"></a>1. XML接口</h2><p><a href="http://flash.weather.com.cn/wmaps/xml/china.xml" target="_blank" rel="external">http://flash.weather.com.cn/wmaps/xml/china.xml</a></p>
<p>这个是全国天气的根节点，列出所有的省，其中的<code>pyName</code>字段是各个省XML的文件名，比如北京的是<code>beijing</code>，那就意味着北京的XML地址为</p>
<p><a href="http://flash.weather.com.cn/wmaps/xml/beijing.xml" target="_blank" rel="external">http://flash.weather.com.cn/wmaps/xml/beijing.xml</a></p>
<p>一个省的天气，其中列出该省各个市的数据，北京就列出各个区。</p>
<p><code>tmp1</code>是最低温低，<code>tmp2</code>是最高温度，<code>url</code>非常重要，我们一会儿再说。<code>state1</code>和<code>state2</code>是神马转神马，每个数代表一个天气现象。天气现象非常多，我本想全部分析出来，后来直接放弃了这个想法。因为我看到了一个城市的天气现象的编码是26…我现在知道的有0.晴 1.多云 2.阴 6.雨夹雪 7.小雨 8.中雨 13.阵雪 14.小雪</p>
<p>其中后来发现知道这个没用，这个数字的主要作用是检索图片的！！！</p>
<h2 id="2-图片接口"><a href="#2-图片接口" class="headerlink" title="2. 图片接口"></a>2. 图片接口</h2><ul>
<li><a href="http://m.weather.com.cn/img/c0.gif" target="_blank" rel="external">http://m.weather.com.cn/img/c0.gif</a></li>
<li><a href="http://m.weather.com.cn/img/b0.gif" target="_blank" rel="external">http://m.weather.com.cn/img/b0.gif</a></li>
<li><a href="http://www.weather.com.cn/m/i/weatherpic/29x20/d0.gif" target="_blank" rel="external">http://www.weather.com.cn/m/i/weatherpic/29x20/d0.gif</a></li>
<li><a href="http://www.weather.com.cn/m2/i/icon_weather/29x20/n00.gif" target="_blank" rel="external">http://www.weather.com.cn/m2/i/icon_weather/29x20/n00.gif</a></li>
</ul>
<p>这个图就是天气现象0（晴）的图片，其他天气现象的图片依此类推。c打头的图片是20*20像素的，b打头的是50*46像素的，d打头的是反白的图标，29*20像素，n打头的是夜间反白图标，29*20像素，注意这里的文件名是两位数字！<br>也许还有更多的图标，等待大家发掘啦~</p>
<h2 id="3-JSON接口"><a href="#3-JSON接口" class="headerlink" title="3. JSON接口"></a>3. JSON接口</h2><p>真没想到，居然有JSON接口~JSON在iPhone上分析起来要比XML简单很多。</p>
<p><a href="http://m.weather.com.cn/data/101010200.html" target="_blank" rel="external">http://m.weather.com.cn/data/101010200.html</a>这个是北京的JSON数据，那个HTML的名字是根据上文XML中的url得到的。这个JSON中包含了实时数据、7天天气预报、气象指数等丰富的数据。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/programming/data-interface-of-weather-com/">http://kuangqi.me/programming/data-interface-of-weather-com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iPhone上的天气预报用的是Yahoo!数据，实在是闹不住，本想写个中央气象台数据的天气应用，结果发现App Store上有一些做的非常好的，于是这个计划就搁浅了。。。不过还是研究了一下中国气象网的接口，这里做个笔记吧~&lt;/p&gt;
    
    </summary>
    
      <category term="编程之美" scheme="http://kuangqi.me/categories/programming/"/>
    
    
  </entry>
  
  <entry>
    <title>Beginning iOS 5 Development阅读笔记</title>
    <link href="http://kuangqi.me/ios/note-on-learning-ios-5/"/>
    <id>http://kuangqi.me/ios/note-on-learning-ios-5/</id>
    <published>2012-02-02T15:57:17.000Z</published>
    <updated>2016-11-29T15:02:00.184Z</updated>
    
    <content type="html"><![CDATA[<p>2011年12月的新书，居然下到了电子版，之前打印的Beginning iPhone 4 Development貌似还没看几页就过时了。。。不过对比着读还是很不错的~</p>
<p>假期准备好好读读这本书，前两章是绪论和一些基础介绍，笔记就从第三章记起吧</p>
<a id="more"></a>
<h2 id="第三章-基础交互"><a href="#第三章-基础交互" class="headerlink" title="第三章 基础交互"></a>第三章 基础交互</h2><p>类似于Hello world的一个程序</p>
<ol>
<li><p>意识到了Action中sender这个变量的作用，之前从来没用过这个变量的。。。</p>
<pre><code>lblShow.text = [NSString stringWithFormat:@&quot;%@ button pressed.&quot;, [sender titleForState:UIControlStateNormal]];
</code></pre><p> 这里可以直接获得按下的那个按钮上面的文字</p>
</li>
<li><p>在iOS 4中通常习惯用<code>alloc</code>分配一个新的<code>NSString</code>，<code>initWithFormat</code>后使用，然后用完再<code>release</code>，在上一个版本的书里都是这样写的。不过新版的书都将其改为了直接调用类方法<code>stringWithFormat</code>。我以为这是iOS 5的新函数，一查文档在iOS 2时就有了，不知道为啥现在才拿来用。网上的说法是，这个类方法也会申请内存，但是<code>autorelease</code>的，这样说来iOS 4也可以这样写嘛，可为什么到现在才改成这样呢？难道跟iOS 5的ARC有关么。。。</p>
</li>
<li>Product菜单中的Analyze命令可以分析并发现内存泄露等缺陷，貌似很好用，之前没发现。</li>
</ol>
<h2 id="第四章-控件大杂烩"><a href="#第四章-控件大杂烩" class="headerlink" title="第四章 控件大杂烩"></a>第四章 控件大杂烩</h2><ol>
<li>学会了一个常用的快捷键，<code>Command + =</code>，让控件大小适应内容。如果一个Label要显示长度会变的内容时，在设计界面时就先敲入可能的最长内容，然后按这个快捷键，控件的大小就刚好合适了。 </li>
<li>按背景隐藏键盘，这个我之前的做法一直是插入一个透明的Custom按钮，放大到全屏，再加Action，还要调整层叠次序。这章介绍的方法是直接将视图的基类从默认的<code>UIView</code>改成<code>UIControl</code>，这样视图本身就可以响应事件了~太神奇了！而且超方便~</li>
<li>为了节省资源，控件的Clip Subviews和Clears Graphics Context选项要关掉，Opaque选项不影响视觉效果的话能开就开</li>
<li>之前不知道拖控件时穿过Text Box的那条参考线是什么意思，现在知道那叫Baseline guide，就是输入的文本的基线。类似于初中写作业用的凯撒牌英语本上的那条红线，哈哈</li>
<li>提示信息用<code>UIAlertView</code>，里面不能放太多按钮。通过[alert show];显示。让用户选择用<code>UIActionSheet</code>，可以放多个按钮。通过<code>[actionSheet showInView:self.view];</code>显示。得到用户按了哪个按钮，都需要通过<code>delegate</code>。这种阻断程序，让用户做选择的东西统称modal view，貌似是翻译成“模态视图”</li>
<li>继续体会到了<code>sender</code>的强大，功能类似的一组控件基本上都可以将事件响应写到一个Action响应的函数里，然后根据<code>sender</code>判断按了哪个。还有在<code>slider</code>滑动时的action中直接根据<code>sender</code>获得其<code>value</code>，而不需要为其建立专门的outlet。另外判别是哪个控件触发时，可以利用控件的<code>tag</code>字段</li>
<li><p>可伸缩图片！！超实用的技巧！！设置不可伸缩部分（Cap），然后剩余部分就被自动拉长，填满控件。书上的代码还不太完善，他将<code>topCapHeight</code>设为了0，导致按钮很高时，两条水平的边缘变得很丑。我将<code>topCapHeight</code>也设为了12，大按钮看起来就很美观了。代码比较经典，直接贴上来备忘吧！用的时候别忘了把<code>Button</code>的类型从<code>Round Rect</code>改为<code>Custom</code></p>
<pre><code>UIImage *imageNormal = [UIImage imageNamed:@&quot;whiteButton.png&quot;];
UIImage *strhNormal = [imageNormal stretchableImageWithLeftCapWidth:12 topCapHeight:12];
UIImage *imageHighlighted = [UIImage imageNamed:@&quot;blueButton.png&quot;];
UIImage *strhHighlighted = [imageHighlighted stretchableImageWithLeftCapWidth:12 topCapHeight:12];
[dosthButton setBackgroundImage:strhNormal forState:UIControlStateNormal];
[dosthButton setBackgroundImage:strhHighlighted forState:UIControlStateHighlighted];
</code></pre></li>
<li><p>在Action响应函数中，那些以Index标志的东西要加上注释，提高代码的可读性。比如<code>index</code>为0的segmented control是哪一个，比如ActionSheet中的第1个按钮是什么含义等等。</p>
</li>
</ol>
<h2 id="第五章-自动旋转"><a href="#第五章-自动旋转" class="headerlink" title="第五章 自动旋转"></a>第五章 自动旋转</h2><ol>
<li>先学学英语吧，protrait指的是竖屏（又高又窄），landscape指的是横屏（又矮又宽）</li>
<li>建立一个iPhone工程，默认的Supported Device Orientations是除了“Upside down”以外的三个，而建立一个iPad工程时，默认则是支持全部的四个方向。这是为什么呢？因为iPhone在使用过程中面临突然有电话打进来的情况，用户没法在设备倒置的情况下打电话，因为话筒和听筒安装在电话的两端，没法混用，这就造成了不方便。而iPad则不存在电话和听筒位置的问题，所以默认是支持四个方向。一个细节而已，没啥用，就是挺吃惊的。</li>
<li>支持多个方向最简单的方法是修改控件Autosizing的方式，图形化的界面，非常方便。但在复杂情况下不能满足需求，就要写代码手动调整控件的位置和大小。如果两个方向的界面相差很大，可以在一个Nib里建立两个View，分别制作好，通过代码切换这两个View。按Alt键拖动View在侧边栏里的条目可以复制View。</li>
<li><p>通过<code>willAnimateRotationToInterfaceOrientation</code>响应设备旋转。这里涉及的技术稍微复杂一些，切换view只需要为View建立outlet并赋值给<code>self.view</code>，重要的是view的定位和方向。开始我没明白为什么要旋转，如果不明白的话，把给transform赋值的那几句话去掉，再运行一下看效果，你瞬间就会明白的！这里利用的是图形学中的旋转矩阵，当年学OpenGL生不如死的现在貌似用上了，一看那个先搞成单位矩阵，再搞仿射变换，瞬间感到一种亲切感！这段代码也挺经典的，以后可以直接拷贝来用，这里收藏一下。</p>
<pre><code>- (void)willAnimateRotationToInterfaceOrientation:(UIInterfaceOrientation) interfaceOrientation duration:(NSTimeInterval)duration {
    if(interfaceOrientation == UIInterfaceOrientationPortrait)
    {
        self.view = self.portrait;
        self.view.transform = CGAffineTransformIdentity;
        //self.view.transform = CGAffineTransformMakeRotation(0);
        self.view.bounds = CGRectMake(0.0, 0.0, 320.0, 460.0);
    }
    else if(interfaceOrientation == UIInterfaceOrientationLandscapeRight)
    {
        self.view = self.landscape;
        self.view.transform = CGAffineTransformIdentity;
        self.view.transform = CGAffineTransformMakeRotation(0.5 * M_PI);
        self.view.bounds = CGRectMake(0.0, 0.0, 480, 300);
    }
    else if(interfaceOrientation == UIInterfaceOrientationLandscapeLeft)
    {
        self.view = self.landscape;
        self.view.transform = CGAffineTransformIdentity;
        self.view.transform = CGAffineTransformMakeRotation(-0.5 * M_PI);
        self.view.bounds = CGRectMake(0.0, 0.0, 480, 300);
    }
}
</code></pre><p> 需要注意的有：</p>
<ul>
<li>仿射变换的参数是弧度制，不是角度制</li>
<li>RectMake的时候要考虑状态栏的高度</li>
<li>直立状态时也要为transform赋值，将界面转回正常，否则开始运行时是正确的，横过来再竖过来就错了</li>
</ul>
</li>
<li><p>iOS的新特性outlet collection，Outlet具有一对一的特点，一个Outlet只能对应一个控件，一个控件对应多个Outlet也没有意义。为了能让一个Outlet控制多个控件，新版iOS（据说是iOS 4引入的？不过在这本新版iOS 5的书上才讲到，上一个版本的书没讲）引入了Outlet Collection这个概念，想建立控件-Outlet多对一的关系时，可以创建Outlet Collection，它实际上就是一个Outlet的数组，类型是NSArray。可以用for…in循环来遍历，用containsObject实例方法来查找。</p>
<p> 下面代码展示了将一个Outlet Collection中所有的控件的属性全部改变的循环</p>
<pre><code>if([tops containsObject:sender]){
    msg = @&quot;Top button pressed.&quot;;
    for(UIButton *btn in tops){
        btn.hidden = YES;
    }
}
</code></pre></li>
<li><p>一个新的关键词，<code>strong</code>，没懂啥意思，后来在StackOverflow上搜到了一个很好的解释</p>
<blockquote>
<p>It’s a replacement for the retain attribute, as part of Objective-C Automated Reference Counting (ARC). In non-ARC code it’s just a synonym for retain.</p>
</blockquote>
<p> 我就来翻译一下吧：它作为Objective-C自动引用计数(ARC)的一部分，用来替换<code>retain</code>修饰符。在非ARC代码中，它就是<code>retain</code>的同义词。</p>
</li>
</ol>
<h2 id="第六章-多视图应用"><a href="#第六章-多视图应用" class="headerlink" title="第六章 多视图应用"></a>第六章 多视图应用</h2><p>很长的一章，代码挺多的，第一次从空工程构建出一个App。。。</p>
<ol>
<li><p>在AppDelegate里加载第一个ViewController的时候要计算status bar的高度。但是直接建出的工程就没有这个步骤，不知道为啥。。。计算的代码是</p>
<pre><code>self.window = [[[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]] autorelease];
SwitchViewController *switchController = [[SwitchViewController alloc] initWithNibName:@&quot;SwitchView&quot; bundle:nil];
self.switchViewController = switchController;
UIView *switchView = self.switchViewController.view;
CGRect frame = switchView.frame;
frame.origin.y += [UIApplication sharedApplication].statusBarFrame.size.height;
switchView.frame = frame;
[self.window addSubview:switchView];
self.window.backgroundColor = [UIColor whiteColor];
[self.window makeKeyAndVisible];
[switchController release];
return YES;
</code></pre></li>
<li><p>这里再说一下内存管理吧。。。到第六章才意识到这个问题显然有点晚。通过这本书新旧两个版本的比较阅读，我发现最大的区别就是内存管理。由于ARC的引入，前面版本里跟内存管理有关的讲解和代码在新版里消失的无影无踪，之前各种经典的内存泄露在新版里则成为了范例代码。这些代码搬到iOS 4可以用肆无忌惮来形容，哈哈！不过iOS 5不会那么快的普及，因此我们还是应该了解iOS在内存管理方面的特点，避免内存泄露。就拿上面的那段代码来说，要注意的是</p>
<pre><code>SwitchViewController *switchController = [[SwitchViewController alloc] initWithNibName:@&quot;SwitchView&quot; bundle:nil];
self.switchViewController = switchController;
</code></pre><p> C++用户可能会疑惑，为什么要switchController这个指针多此一举呢？下面这样一句话解决不行吗?</p>
<pre><code>self.switchViewController = [[SwitchViewController alloc] initWithNibName:@&quot;SwitchView&quot; bundle:nil];
</code></pre><p> 这是Objective-C的特性决定的，属性<code>switchViewController</code>是由<code>retain</code>修饰的，即对赋值操作自己持有一个副本。这样alloc出来的对象占用一块内存，属性<code>switchViewController</code>由于持有该对象就再占用一块内存。类析构时只能释放后者，而前者则泄露。因此在OC里，如果不开ARC，那么那个临时的指针变量以及随后的<code>release</code>语句就是必须的了。</p>
</li>
<li><p>分别建立nib和代码文件时，需要建立两者的联系。需要做的有：</p>
<ul>
<li>点nib里的File‘s owner，设置其Custom Class为其Controller类的名字</li>
<li>将View与File’s owner里的view建立outlet。这两项做完就可以在Assistant界面上拖Outlet和Action了</li>
</ul>
</li>
<li><p>一点疑问，书上说superview有status bar了，那么subview就不应该设置status bar，这样系统才能正确计算出尺寸。我实验中恰好相反，在subview里加上了status bar，显示出的控件位置才跟Interface Builder里的一样。</p>
</li>
<li>视图切换的动画。AnimationCurve的概念，Animation block的概念。</li>
</ol>
<h2 id="第七章-TabBar和DataPicker"><a href="#第七章-TabBar和DataPicker" class="headerlink" title="第七章 TabBar和DataPicker"></a>第七章 TabBar和DataPicker</h2><ol>
<li><p>学会了如何手动从空工程建立Tabbed Application。可以直接在AppDelegate里载入TabBar View Controller的xib，代码只要在<code>didFinishLaunchingWithOptions</code>方法中加两行</p>
<pre><code>[[NSBundle mainBundle] loadNibNamed:@&quot;TabBarController&quot; owner:self options:nil];
[self.window addSubview:rootController.view];
</code></pre><p> 当然别忘了把xib中File’s owner的Class改成AppDelegate，还有将TabBar Controller与手动敲的<code>@property (strong, nonatomic) IBOutlet UITabBarController *rootController;</code>建立outlet连接</p>
</li>
<li><p>Tab中每个Item除了图标和Title之外还要改两处</p>
<ul>
<li>Custom Class</li>
<li>Nib Name<br>都改成要载入的那个View的类名和xib名</li>
</ul>
</li>
<li>Picker里最常用的一个方法是<code>selectedRowInComponent</code></li>
<li><p>Picker的两个协议（代理和数据源）中，必须要实现的方法有3个</p>
<ul>
<li><code>- (NSInteger) numberOfComponentsInPickerView:(UIPickerView *)pickerView</code></li>
<li><code>- (NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component</code></li>
<li><code>- (NSString *)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component</code></li>
<li><p><code>- (UIView *)pickerView:(UIPickerView *)pickerView viewForRow:(NSInteger)row forComponent:(NSInteger)component reusingView:(UIView *)view</code></p>
<p>最后两个可以选一个实现。可选的方法是：</p>
</li>
<li><p><code>- (void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component</code></p>
<p>必选的三个方法记忆方法就是2个<code>NSInteger</code>和一个<code>NSString*</code>，只有记住第一个括号，然后敲Esc补全就可以了。还跟新浪网院的老师学了个歪招，就是按住<code>Command</code>键，点头文件里的协议名，看协议的声明，然后复制协议方法的原型到自己的代码中。</p>
</li>
</ul>
</li>
<li>用<code>NSDate *selected = [datePicker date];</code>获取Date Picker的日期数据，但返回的是中央时区的时间，貌似还需要Format。这里犯过一个低级错误，就是把<code>NSDate</code>写成了<code>NSData</code>，不仅能过编译，而且还能正常运行！只是这句话上一直有警告。端详了老半天才发现一个字母的差异。。。</li>
<li>Double Picker那个View写起来明显熟练了很多，基本上没出啥问题，书瞄上一眼就能自己写出来。</li>
<li>plist读进来是一个<code>Dictionary</code>，用<code>valueForKey</code>方法查找</li>
<li>如果picker的component之间有依赖关系，需要在<code>didSelectRow</code>协议方法中调用picker的<code>reloadComponent</code>方法来重新载入需要改变的component，或者直接<code>reloadAllComponent</code>。。。</li>
<li>picker有多个component时，可以把每一列的编号define成一个宏常量，这样判断时就可以用有意义的字符串代替编号，提高代码的可读性</li>
<li>通过widthForComponent方法可以指定列宽，从而形成各个component不等宽的效果，如果几个Component数据长度差异较大，可以考虑实现这个方法。看书上的代码，各个component的宽度之和为290个像素。另外还有一个指定每行高度的方法叫<code>rowHeightForComponent</code>，还没用过。</li>
<li><p>一些需要收藏备用的代码</p>
<ul>
<li>用代码选定picker中的某一行<code>[picker selectRow:0 inComponent:kZipComponent animated:YES];</code></li>
<li>上一条的逆操作，即得到现在选中了哪一行<code>[picker selectedRowInComponent:kStateComponent]</code></li>
<li>对<code>NSArray</code>排序（实例名为<code>sorted</code>）<code>sorted = [sorted sortedArrayUsingSelector:@selector(compare:)];</code></li>
<li>获取资源的<code>NSURL</code>：<code>NSURL *resURL = [[NSBundle mainBundle] URLForResource:@&quot;文件名&quot; withExtension:@&quot;扩展名&quot;];</code></li>
<li>通过<code>NSURL</code>将PList读入到<code>NSDictionary</code>：<code>NSDictionary *dict = [[NSDictionary alloc] initWithContentsOfURL:resURL];</code></li>
<li>从资源中载入图片<code>UIImage *seven = [UIImage imageNamed:@&quot;seven.png&quot;];</code></li>
<li>动态的通过属性的名称为其赋值<code>[self setValue:新的值 forKey:本类中的属性名];</code></li>
<li>延迟一会儿再调用某个方法：<code>[self performSelector:@selector(要调用的方法名) withObject:nil afterDelay: 0.5];</code>想不到SDK里居然有这种奇葩的函数。延迟的单位是秒。对另一个函数的调用是同步的，也就是说如果被调的函数执行时间很长，那这样调用仍然会卡住UI线程</li>
<li><p>播放声音</p>
<pre><code>NSURL *soundURL = [[NSBundle mainBundle] URLForResource:@&quot;声音文件名&quot; withExtension:@&quot;wav&quot;];
SystemSoundID soundID;
AudioServicesCreateSystemSoundID((__bridge CFURLRef)soundURL, &amp;soundID); 
AudioServicesPlaySystemSound(soundID);
</code></pre></li>
</ul>
<p>那个斜体的__bridge是给ARC看的，iOS4中不用加。使用这些代码需要加头文件<code>#import &lt;AudioToolbox/AudioToolbox.h&gt;</code>，当然还需加框架<code>AudioToolbox</code>~，还记得作为一名文艺青年应该怎么加框架吗？</p>
<p>重要提示：通过与iOS4旧版图书的比较阅读，发现以上播放声音的代码在没有ARC的时候会导致内存泄露！在没有ARC的情况下，正确的做法是将<code>SystemSoundID</code>作为类的一个属性，在视图载入时就调用<code>AudioServicesCreateSystemSoundID</code>方法创建<code>SoundID</code>，在视图退出时调用<code>AudioServicesDisposeSystemSoundID(soundID);</code>方法释放。奇葩的是，<code>SoundID</code>不能在播放的函数里释放，<code>SoundID</code>必须在播放期间都有效。否则会放不出声音。不这样释放的话，在声音被反复打开时就会出现内存泄露。还有，<code>SoundID</code>貌似一个类，其实就是一个无符号长整型数。</p>
</li>
</ol>
<p>终于读完了这一章！！！好长</p>
<h2 id="第八章-TableView初步"><a href="#第八章-TableView初步" class="headerlink" title="第八章 TableView初步"></a>第八章 TableView初步</h2><ol>
<li>还是说说内存管理吧。<code>self.XXX = YYY;</code>跟<code>XXX = YYY;</code>其中<code>XXX</code>是声明为<code>retain</code>的属性。这两种写法是不一样的。前者会发挥<code>retain</code>的作用，而后者直接给指针赋值。如果你随后又将<code>YYY</code>给<code>release</code>了的话，那第二种写法就会出错，必须使用第一种。还有，在读取一个属性的时候，加不加<code>self</code>是没区别的~</li>
<li>这一章有以下后续内容，暂时用不到，以后再看吧：<ul>
<li>右侧的索引条</li>
<li>基于Category(分类)的深拷贝</li>
<li>搜索栏</li>
</ul>
</li>
</ol>
<h2 id="第十一章-定位服务（LBS）"><a href="#第十一章-定位服务（LBS）" class="headerlink" title="第十一章 定位服务（LBS）"></a>第十一章 定位服务（LBS）</h2><ol>
<li>Core Location框架使用很方便，经纬度、海拔、精度、旅行距离都能直接测出来</li>
<li><p>编译的时候要加上CoreLocation.framework，加这个框架有3三种方法</p>
<ul>
<li>普通青年：在原有的框架比如UIKit.framework点右键，在打开的文件夹里找到CoreLocation.framework，然后拖进Xcode里，在向导里点确定</li>
<li>文艺青年：在项目设置的页面点Build Phase，在Link Binary with Libraries下面点加号，选CoreLocation.framework加进来</li>
<li><p>2B青年：在项目上右键，Add files to “XXX”，然后依次展开<code>/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS5.0.sdk/System/Library/Frameworks/</code>找到<code>CoreLocation.framework</code>加进来</p>
<p>话说我就是差点成了2B青年，最后用普通青年的方法加进来的，书上介绍的方法属于文艺青年~哈哈哈</p>
</li>
</ul>
</li>
<li><p>程序的代码也是比较固定，可以直接粘贴到需要定位的项目里用，这里也贴上来收藏。头文件如下，需要加的有1头文件，2协议，3需要的Outlet</p>
<pre><code>#import &lt;UIKit/UIKit.h&gt;
#import &lt;CoreLocation/CoreLocation.h&gt;
@interface FirstViewController : UIViewController&lt;CLLocationManagerDelegate&gt;
@property (retain, nonatomic) CLLocationManager *locManager;
@property (retain, nonatomic) CLLocation *startPoint;
@property (retain, nonatomic) IBOutlet UILabel *lblLatitude;
@property (retain, nonatomic) IBOutlet UILabel *lblLongitude;
@property (retain, nonatomic) IBOutlet UILabel *lblHorAccu;
@property (retain, nonatomic) IBOutlet UILabel *lblAltitude;
@property (retain, nonatomic) IBOutlet UILabel *lblVerAccu;
@property (retain, nonatomic) IBOutlet UILabel *lblDistance;
@end
</code></pre><p> 实现文件中，视图载入后初始化CLLocationManager、设定精度、更新位置信息，这是定位最核心的代码，却非常简洁</p>
<pre><code>- (void)viewDidLoad
{
    [super viewDidLoad];
    locManager = [[CLLocationManager alloc] init];
    locManager.delegate = self;
    locManager.desiredAccuracy = kCLLocationAccuracyBest;
    [locManager startUpdatingLocation];
}
</code></pre><p> 每次更新得到新的坐标后，就会调用这个方法。坐标啥的都在newLocation里了，直接拿来用就行。还有别忘了处理一下错误，如果用户没有授权获取位置信息，那就要做相应的处理。</p>
<pre><code>#pragma mark - CLLocationManagerDelegate Methods
- (void)locationManager:(CLLocationManager *)manager 
    didUpdateToLocation:(CLLocation *)newLocation fromLocation:(CLLocation *)oldLocation {
    NSString *latitudeString = [NSString stringWithFormat:@&quot;%g\°&quot;, newLocation.coordinate.latitude];
    lblLatitude.text = latitudeString;
    NSString *longitudeString = [NSString stringWithFormat:@&quot;%g\°&quot;, newLocation.coordinate.longitude];
    lblLongitude.text = longitudeString;
    NSString *horizontalAccuracyString = [NSString stringWithFormat:@&quot;%gm&quot;, newLocation.horizontalAccuracy];
    lblHorAccu.text = horizontalAccuracyString;
    NSString *altitudeString = [NSString stringWithFormat:@&quot;%gm&quot;, newLocation.altitude];
    lblAltitude.text = altitudeString;
    NSString *verticalAccuracyString = [NSString stringWithFormat:@&quot;%gm&quot;, newLocation.verticalAccuracy];
    lblVerAccu.text = verticalAccuracyString;
    CLLocationDistance distance = [newLocation distanceFromLocation:startPoint];
    NSString *distanceString = [NSString stringWithFormat:@&quot;%gm&quot;, distance];
    lblDistance.text = distanceString;
}

- (void)locationManager:(CLLocationManager *)manager didFailWithError:(NSError *)error {
    NSString *errorType = (error.code == kCLErrorDenied) ? @&quot;Access Denied&quot; : @&quot;Unknown Error&quot;;
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@&quot;Error getting Location&quot; message:errorType delegate:self cancelButtonTitle:@&quot;Okay&quot; otherButtonTitles:nil];
    [alert show]; 
}
</code></pre></li>
</ol>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/ios/note-on-learning-ios-5/">http://kuangqi.me/ios/note-on-learning-ios-5/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2011年12月的新书，居然下到了电子版，之前打印的Beginning iPhone 4 Development貌似还没看几页就过时了。。。不过对比着读还是很不错的~&lt;/p&gt;
&lt;p&gt;假期准备好好读读这本书，前两章是绪论和一些基础介绍，笔记就从第三章记起吧&lt;/p&gt;
    
    </summary>
    
      <category term="果粉手札" scheme="http://kuangqi.me/categories/ios/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS 5.0.1系统下自动匹配中国移动飞信12520前缀</title>
    <link href="http://kuangqi.me/ios/match-fetion-12520-prefix/"/>
    <id>http://kuangqi.me/ios/match-fetion-12520-prefix/</id>
    <published>2012-01-31T16:17:37.000Z</published>
    <updated>2016-11-29T15:02:00.181Z</updated>
    
    <content type="html"><![CDATA[<p>手机接收到通过飞信发送的短信时，号码会显示12520+对方手机号码，这种短信在iPhone上会被识别为独立的会话，而不是与同一个人的普通短信在同一个会话中，这就给管理带来了不便，那一大串号码也影响了短信箱的美观。而且我还通过人人网同步了用户的头像，这样的会话也无法显示对方的头像，总之有各种不便。。。</p>
<p>我们修改的最终目的是让iPhone将同一个人的飞信短信和普通短信放到同一个会话中。修改前需要以下准备工作</p>
<ol>
<li>设备需要越狱且为iOS 5.0.1系统（其它系统偏移量有差异，请根据文章后面介绍的文件结构自行计算）</li>
<li>一个在电脑上访问iPhone上文件的文件管理工具（我在Mac系统下用的iExplorer）</li>
<li>一个十六进制编辑器（我在Mac下用的HexEdit，Windows下推荐用WinHex）</li>
</ol>
<a id="more"></a>
<p>要修改的文件是<code>/System/Library/PrivateFrameworks/AppSupport.framework/Default.phoneformat</code></p>
<p>将此文件拷贝到电脑上，用十六进制编辑器打开，寻址到<code>0x00002416</code>处，将之后的三个<code>179##</code>改为<code>125##</code></p>
<p>保存文件，将文件复制回iPhone，覆盖原文件。然后重启SpringBoard（如果没有Respring的软件就重启iPhone吧~）</p>
<p>再打开信息，就会发现12520前缀的短信已经正确显示为联系人的名字了。</p>
<p>如果您关注Default.phoneformat文件的细节，请继续阅读</p>
<hr>
<p>下面粗略的介绍一下Default.phoneformat文件的大致结构和偏移量的计算方法</p>
<p>文件开头的4个字节代表支持的国家个数，iOS 5.0.1的这一字段为E9 00 00 00，十进制即为233。即iOS 5.0.1支持233个国家的卡号</p>
<p>接下来就是每个国家的信息，一条接一条，一共233条，每条信息都是12个字节，这12个字节分别代表的是</p>
<ul>
<li>0-3：国家代码，ASCII码的数字</li>
<li>4-7：国家缩写，ASCII码的字母</li>
<li>8-11：偏移量，指向该国家号码匹配规则等数据的起始地址</li>
</ul>
<p>在文件的开头部分，用肉眼就可以发现在0x000000AC处中国的信息，如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">38 36 00 00 63 6E 00 00 18 19 00 00 | 8 6 . . c n . . . . . . |</div></pre></td></tr></table></figure>
<ul>
<li>86是中国电话号码的国家代码</li>
<li>cn是中国的缩写</li>
<li>而十六进制的18 19 00 00代表的是偏移量0x00001918（注意此处的顺序要颠倒一下！！）</li>
</ul>
<p>这个偏移量有什么用呢？下面我们来计算中国的数据区的偏移量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">第一个国家的数据区地址 = 4字节（国家个数计数器）+ 12（字节每个国家）* 233（个国家） =  0xAF0</div><div class="line">中国的偏移量 = 0xAF0 + 0x1918 = 0x2408</div></pre></td></tr></table></figure>
<p>然后前面就有一些乱七八糟的计数器，在WeiPhone论坛上有人讨论，我们暂且不详述（有兴趣的请移步<a href="http://bbs.weiphone.com/read-htm-tid-162620.html" target="_blank" rel="external">http://bbs.weiphone.com/read-htm-tid-162620.html</a>）往后找8个字节就是前缀区了，就到了我们要修改的<code>0x00002416</code>了，这个数据就是这么算出来的。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/ios/match-fetion-12520-prefix/">http://kuangqi.me/ios/match-fetion-12520-prefix/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;手机接收到通过飞信发送的短信时，号码会显示12520+对方手机号码，这种短信在iPhone上会被识别为独立的会话，而不是与同一个人的普通短信在同一个会话中，这就给管理带来了不便，那一大串号码也影响了短信箱的美观。而且我还通过人人网同步了用户的头像，这样的会话也无法显示对方的头像，总之有各种不便。。。&lt;/p&gt;
&lt;p&gt;我们修改的最终目的是让iPhone将同一个人的飞信短信和普通短信放到同一个会话中。修改前需要以下准备工作&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设备需要越狱且为iOS 5.0.1系统（其它系统偏移量有差异，请根据文章后面介绍的文件结构自行计算）&lt;/li&gt;
&lt;li&gt;一个在电脑上访问iPhone上文件的文件管理工具（我在Mac系统下用的iExplorer）&lt;/li&gt;
&lt;li&gt;一个十六进制编辑器（我在Mac下用的HexEdit，Windows下推荐用WinHex）&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="果粉手札" scheme="http://kuangqi.me/categories/ios/"/>
    
    
  </entry>
  
  <entry>
    <title>Xcode中下载和使用离线文档</title>
    <link href="http://kuangqi.me/ios/download-offline-docs-for-xcode/"/>
    <id>http://kuangqi.me/ios/download-offline-docs-for-xcode/</id>
    <published>2012-01-28T16:16:08.000Z</published>
    <updated>2016-11-29T15:02:00.174Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍如何使用下载工具高速下载苹果的开发文档并手动安装到Xcode中。</p>
<ol>
<li>在Xcode的Preference菜单中选Downloads-Documentation，点击希望下载的文档，点左下角的上箭头图标，展开该项目的详细信息。</li>
<li>在详细信息中找到Feed地址，用Safari浏览器访问该地址，例如iOS 5的文档<a href="http://developer.apple.com/rss/com.apple.adc.documentation.AppleiPhone5_0.atom" target="_blank" rel="external">http://developer.apple.com/rss/com.apple.adc.documentation.AppleiPhone5_0.atom</a></li>
<li>在打开的网页中会发现一个xar文件的下载链接，就是它了！用下载工具下载它</li>
<li>将下载到的xar文件放到<code>/Developer/Documentations/Docset</code>目录下，在终端中执行如下命令</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /Developer/Documentation/Docsets</div><div class="line">sudo xar -xf 下载的文件名.xar</div><div class="line">sudo chown -R -P devdocs 解压后的文件名.docset</div></pre></td></tr></table></figure>
<p>在Xcode中就可以使用啦~~</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/ios/download-offline-docs-for-xcode/">http://kuangqi.me/ios/download-offline-docs-for-xcode/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍如何使用下载工具高速下载苹果的开发文档并手动安装到Xcode中。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在Xcode的Preference菜单中选Downloads-Documentation，点击希望下载的文档，点左下角的上箭头图标，展开该项目的详细信息。&lt;/li&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="果粉手札" scheme="http://kuangqi.me/categories/ios/"/>
    
    
  </entry>
  
  <entry>
    <title>整数运算计算组合数C(n, k)</title>
    <link href="http://kuangqi.me/programming/combination-calculation/"/>
    <id>http://kuangqi.me/programming/combination-calculation/</id>
    <published>2012-01-27T10:00:15.000Z</published>
    <updated>2016-11-29T15:02:00.172Z</updated>
    
    <content type="html"><![CDATA[<p>计算组合数$C_n^k$的公式为</p>
<p>$$<br>C_n^k = \frac{n!}{k! \times (n - k)!}<br>$$</p>
<p>由于用到了阶乘，极容易导致数据溢出，应用中应采用边乘边除的方法。除法一般需要用到浮点数，但通过数论中的定理，可以通过整数运算实现。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">int C(int n, int k)</div><div class="line">&#123;</div><div class="line">    long long s = 1;</div><div class="line">    int x = 1;</div><div class="line">    if(k &gt; n - k) k = n - k;</div><div class="line">    for(int i = n; i &gt; n - k; i--)</div><div class="line">    &#123;</div><div class="line">        s *= i;</div><div class="line">        s /= x;</div><div class="line">        x++;</div><div class="line">    &#125;</div><div class="line">    return (int)s;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码如下如果想测试你自己的实现，请移步<a href="http://poj.org/problem?id=2249" target="_blank" rel="external">POJ 2249题</a></p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/programming/combination-calculation/">http://kuangqi.me/programming/combination-calculation/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;计算组合数$C_n^k$的公式为&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;C_n^k = \frac{n!}{k! \times (n - k)!}&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;由于用到了阶乘，极容易导致数据溢出，应用中应采用边乘边除的方法。除法一般需要用到浮点数，但通过数论中的定理，可以
    
    </summary>
    
      <category term="编程之美" scheme="http://kuangqi.me/categories/programming/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac下vim编辑器最简单配置方法(开启语法高亮)</title>
    <link href="http://kuangqi.me/ios/config-vim-on-mac/"/>
    <id>http://kuangqi.me/ios/config-vim-on-mac/</id>
    <published>2012-01-23T13:32:54.000Z</published>
    <updated>2016-11-29T15:02:00.173Z</updated>
    
    <content type="html"><![CDATA[<p>首先执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp /usr/share/vim/vimrc ~/.vimrc</div></pre></td></tr></table></figure>
<p>拷贝默认的配置文件</p>
<p>然后再执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim ~/.vimrc</div></pre></td></tr></table></figure>
<p>编辑该文件，在文件的最后加入<code>syntax on</code>，保存退出即可。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/ios/config-vim-on-mac/">http://kuangqi.me/ios/config-vim-on-mac/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先执行&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;di
    
    </summary>
    
      <category term="果粉手札" scheme="http://kuangqi.me/categories/ios/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac系统下如何将Nokia手机通讯录导入iPhone</title>
    <link href="http://kuangqi.me/ios/import-nokia-contacts-into-iphone/"/>
    <id>http://kuangqi.me/ios/import-nokia-contacts-into-iphone/</id>
    <published>2012-01-23T12:37:30.000Z</published>
    <updated>2016-11-29T15:02:00.179Z</updated>
    
    <content type="html"><![CDATA[<p>最近遇到这个问题，去网上搜索了一下，大家提出的解决方案大概有两种。</p>
<ol>
<li>把电话簿复制到SIM卡中，到iPhone上再复制回手机<br>这个方案的缺点有两个，一是SIM卡容量有限，我的是200条，超过则不能完整复制。二是这样复制在一个人名下有多个号码的情况下，SIM卡中会被分成多个同名的记录，需要手动整理。</li>
<li>使用Nokia导出通讯录到CF存储卡，然后经过复杂的编码转换??</li>
</ol>
<p>另外，在网上看到了一个用Outlook辅助的方案，大概是先把通讯录导入到Outlook，然后再怎么弄到iPhone的。</p>
<p>Mac系统下没有Outlook，于是只能我自己动手了。我的解决方案是利用Mac系统下的iSync工具再加上Nokia官方的iSync插件实现Nokia手机通讯录与Mac系统通讯录的同步。这时再用iTunes同步iPhone时，自然就会将通讯录同步到iPhone中，这个解决方案非常完美，导入的数据完整，无需整理就可直接使用。</p>
<p>具体步骤就不详细说了，思路是最重要的。需要特别提醒的是，在Mac OS Lion 10.7系统中，iSync程序已经不存在了，需要手动去网上下载网友从Mac 10.6中提取出来的iSync。然后就是去Nokia官网下载用于iSync的同步插件了。</p>
<p>这样你的Nokia就可以在iSync中与系统同步了。接下来插上iPhone，剩下的不用说了把~~</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/ios/import-nokia-contacts-into-iphone/">http://kuangqi.me/ios/import-nokia-contacts-into-iphone/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近遇到这个问题，去网上搜索了一下，大家提出的解决方案大概有两种。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把电话簿复制到SIM卡中，到iPhone上再复制回手机&lt;br&gt;这个方案的缺点有两个，一是SIM卡容量有限，我的是200条，超过则不能完整复制。二是这样复制在一个人名下有多个号码的情
    
    </summary>
    
      <category term="果粉手札" scheme="http://kuangqi.me/categories/ios/"/>
    
    
  </entry>
  
  <entry>
    <title>2011年终盘点</title>
    <link href="http://kuangqi.me/essay/a-2011-year-end-summary/"/>
    <id>http://kuangqi.me/essay/a-2011-year-end-summary/</id>
    <published>2011-12-31T17:25:10.000Z</published>
    <updated>2016-11-29T15:02:00.165Z</updated>
    
    <content type="html"><![CDATA[<p>经历的不必都记起/过去的不会都忘记/有些往事/有些回忆/成全了我/也就陶冶了你</p>
<p>本想今年不写什么年终总结了，把之前的点名整理了一下。但是不写总是觉得不太对劲，好奇怪…</p>
<p>2011年对我来说是奋斗和收获的一年。2011年，自始至终一直萦绕在脑海的几个字眼便是”项目”和”竞赛”。的确如此，这一年一定要说的一件事就是”挑战杯”竞赛了。</p>
<p>“自习室空座位检测”这个话题，我已经在这条尼玛的”不归路”上走了14个月了。从计划书的一纸空文到最后的33页论文。多少行代码，多少次争执，多少个不眠之夜……用今年的流行词汇来说，那真是”男默女泪”啊！ </p>
<a id="more"></a>
<p>收获呢？校级优秀项目，京师杯，首挑，全国赛，专利年会，创博会，竞赛奖学金…写的这里我都不敢相信，这么个破项目，一年的时间里竟然骗来7张证书……</p>
<p>更令我我欣慰的是，这其中的酸甜苦辣我都已记录下来了。博客上有至少3篇长度超过千字的长文，记录我的经历和感悟。而我们整个团队的所有资料我也都精心的保存在了档案袋中，连我们开会讨论时随手画的草稿纸也没有丢掉。一年来的材料装满了3个大号的档案袋，我想这些档案真的是一份实实在在的值得炫耀的资本。</p>
<p>关于项目本身的细节，为了避免将年终总结变成一篇技术科普，我就不再提及了。至于我们的产品，敬请期待吧！</p>
<p>2011年我第一次走进了新东方的课堂，也似乎从这里看到了”外面的世界”的一线天。参加新GRE考试，这是一种有异于传统考试的体验。尽管结果并没有尽如人意，但是收获还是很丰富的。</p>
<p>似乎还应该回顾一下学业上的收获~暑假的电子工艺实习还是很值得回忆的。人家的文化衫上印的是”电子工艺实习 1986~2006”…我们老师说的是”同学们，这是师大第一次开这门课…” 叹气…课上做的SMT收音机给爷爷听了，机器猫送给外甥了，不过现在孩子的玩具都太高科技，估计人家对那只猫不感冒吧……</p>
<p>大三的课还是挺有意思的，数字图像课上做的图像去雾可以算得上一个拿得出手的程序了吧！ 打算把它作为sample code去申请google summer of code了~哈哈，还需要一点人品，嗯。</p>
<p>专业上，有了服务器，也逐渐将目光转向了跨平台的技术。新的床有了新的书架，看看自己曾经读过的书，感觉这一年的功力还是有所提升的。</p>
<p>心智上，经历了好友离世，不能不说是心理上的一次大地震。人生稍纵即逝，我们又为何要栽培苦涩？愿Leo安息吧。</p>
<p>困了，就到这里吧。2012，精彩继续！</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/essay/a-2011-year-end-summary/">http://kuangqi.me/essay/a-2011-year-end-summary/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经历的不必都记起/过去的不会都忘记/有些往事/有些回忆/成全了我/也就陶冶了你&lt;/p&gt;
&lt;p&gt;本想今年不写什么年终总结了，把之前的点名整理了一下。但是不写总是觉得不太对劲，好奇怪…&lt;/p&gt;
&lt;p&gt;2011年对我来说是奋斗和收获的一年。2011年，自始至终一直萦绕在脑海的几个字眼便是”项目”和”竞赛”。的确如此，这一年一定要说的一件事就是”挑战杯”竞赛了。&lt;/p&gt;
&lt;p&gt;“自习室空座位检测”这个话题，我已经在这条尼玛的”不归路”上走了14个月了。从计划书的一纸空文到最后的33页论文。多少行代码，多少次争执，多少个不眠之夜……用今年的流行词汇来说，那真是”男默女泪”啊！ &lt;/p&gt;
    
    </summary>
    
      <category term="我笔我心" scheme="http://kuangqi.me/categories/essay/"/>
    
    
  </entry>
  
  <entry>
    <title>一篇关于我的文章</title>
    <link href="http://kuangqi.me/essay/an-article-of-myself/"/>
    <id>http://kuangqi.me/essay/an-article-of-myself/</id>
    <published>2011-12-31T15:32:25.000Z</published>
    <updated>2016-11-29T15:02:00.169Z</updated>
    
    <content type="html"><![CDATA[<p>话说这样一个点名，觉得挺有意义的。但是人终归应该从别人那里认识自己，自己对自己的评价总是有太多的主观色彩。但在这里，我不仅是评价自己，也想表达自己。说出我的想法，也许这也是我价值观和人生观的一个缩影吧。</p>
<h2 id="1-相信知识改变命运，教育奠定未来"><a href="#1-相信知识改变命运，教育奠定未来" class="headerlink" title="1. 相信知识改变命运，教育奠定未来"></a>1. 相信知识改变命运，教育奠定未来</h2><p>想了很久，还是决定把这一项放到第一条。看上去有点上纲上线，但是”追求真知”确实是我最基本的价值观之一。</p>
<p>中国的教育饱受诟病，一些没受过高等教育的人白手起家，创业成功的故事总是能够成为人们津津乐道的话题。我曾经也怀疑过自己的选择，然而一位智者的话给了我一个坚定的答案。他说，试想，那位白手起家的富翁会怎样教育自己的下一代呢？是让他的子女同样跟自己一样，筚路蓝缕？还是让他们受到更好的教育，成为一名受人尊敬的知识分子？我想答案是毋庸置疑的。因为未来是要靠德才兼备的人去创造的。</p>
<a id="more"></a>
<h2 id="2-理性，不相信星座-算命-解梦等等"><a href="#2-理性，不相信星座-算命-解梦等等" class="headerlink" title="2. 理性，不相信星座/算命/解梦等等"></a>2. 理性，不相信星座/算命/解梦等等</h2><p>作为一名计算机专业的学生，深受Geek文化的熏陶和感染，因此理性思维主宰着我的大脑。我不是传说中的”死理性派”，但我相信自己已经具备了一个”死理性派”的基本素养。我会以理性的思维处理周遭的人和事。</p>
<p>有人说，抛硬币进行决策的根本意义不在于它总是能够给出一个答案。而是当你将硬币抛向空中的一瞬间，你发现你的心中有了一个对硬币落下时状态的期望。而这个期望，就是你应该去跟随的，内心的想法。同样的，当你将自己和某个人的人的星座输入到那个神秘的算命程序中时，按下确定按钮的一瞬间，你的心中也同样会期望电脑给出一个你期望中的答案。而在这个瞬间，电脑给出的答案已然不重要，心中的答案才是你应该去追寻的梦啊！</p>
<h2 id="3-思想独立，喜欢质疑，并希望周围的人也这样"><a href="#3-思想独立，喜欢质疑，并希望周围的人也这样" class="headerlink" title="3. 思想独立，喜欢质疑，并希望周围的人也这样"></a>3. 思想独立，喜欢质疑，并希望周围的人也这样</h2><p>我自以为是一个有独立思想的人。我总是喜欢以怀疑的态度去思考问题和观察世界。我的家长给我讲过一个故事。我还在读小学的时候，跟表妹一起学习。当我遇到一个问题，标准答案跟自己的答案不同，且我不知道标准答案为什么会这样时，我会说：”答案是不是错了”。而妹妹则会说”我会记住这个答案”。</p>
<p>我喜欢质疑，所以与我比较亲近的人都会发现，想要说服我是很难的。当我听到一个建议或者一件事情时，我的第一反应是评估你描述，而不是先接受你的描述。如果你没有给我充分的证据，那么我就会质疑你。但我承认，在人际交往中，这个质疑的过程应该尽可能的避免，或者说态度应该更加的谦逊。</p>
<p>在新东方GRE课程的课堂上，我了解到了一个之前从未听说过的概念——critical thinking，顿时有茅塞顿开之感。中国绵延千年的”孝”文化和封建王朝统治，造就了中国人顺从性的思维和培养这种思维的顺从性教育。然而时代要进步，科技要发展。我们追求的创新能力恰恰需要的是打破一些条条框框，墨守成规是不会有所作为的。这就使得我们的教育必须摆脱培养”顺从性”的怪圈，转而追求”独立性”。</p>
<h2 id="4-唯物，相信科学终有一天可以解释一切现象"><a href="#4-唯物，相信科学终有一天可以解释一切现象" class="headerlink" title="4. 唯物，相信科学终有一天可以解释一切现象"></a>4. 唯物，相信科学终有一天可以解释一切现象</h2><p>我是一个坚定的唯物主义者，一切自然现象，包括人的意识和思想，都是有其物质基础的。我相信科学，并认为自己具备了基本的科学素养。因此我很少相信谣言，有其是打着高科技旗号的更是不入我耳。就像前段时间疯传的什么新疆人传播艾滋病，实在是令我嗤之以鼻。</p>
<p>说到唯物，不妨说说一个大家众说纷纭的话题，就是中医到底是不是该反对乃至废除。我是持中立态度的人，我想中医的部分理论是可以在科学上得到解释的。我们在追求科学的过程中，应该对未知的东西保持敬畏，毕竟我们还没有足够的证据说中医就是一派胡言。最后向反对中医人推荐一种中药，京都念慈庵复方川贝枇杷膏，咳嗽时吃点很管用~我知道方舟子批过它，我很仔细的阅读了方舟子的文章，方舟子只是片面的举出了其中的一些成分的肾脏和肝脏毒性，然而是药三分毒，方舟子并未证明该药品在临床上的治疗作用是由除中药本身以外的成分作用导致的。</p>
<h2 id="5-乐观，让人搞不懂的乐观"><a href="#5-乐观，让人搞不懂的乐观" class="headerlink" title="5. 乐观，让人搞不懂的乐观"></a>5. 乐观，让人搞不懂的乐观</h2><p>我总是相信奇迹会发生，而奇迹确实发生过。也许不是我期望奇迹，而是一种比较非主流的自信吧！</p>
<h2 id="6-执着，或者说有点固执"><a href="#6-执着，或者说有点固执" class="headerlink" title="6. 执着，或者说有点固执"></a>6. 执着，或者说有点固执</h2><p>记得在青岛二中的保送生纪念册&lt;&lt;追梦人&gt;&gt;上我不无自夸的说，我认为自己最为重要的积极品质就是”执着”。不久前，在挑战杯学术竞赛落幕后，创业竞赛启动前，师兄也给了我类似的评价。我想我的执着跟从小受到的教育有关。我的母亲就是一个执着得有点固执的人，每当我打算放弃的时候，她都会鼓励我，再试一试。也许是这种特立独行的品质，一直在引导着我从小到大都在走着一条少有人走的路。<br>执着在两种情况下会转化为固执。1-执着的坚持错误的东西2-在人交往中。</p>
<h2 id="7-我有文艺的愿望，却没有文艺的气质"><a href="#7-我有文艺的愿望，却没有文艺的气质" class="headerlink" title="7. 我有文艺的愿望，却没有文艺的气质"></a>7. 我有文艺的愿望，却没有文艺的气质</h2><p>我喜欢写点东西，来抒发一下自己的想法。维护着一个点击量超过10万的博客，里面的文章风格迥异。有矫情的散文随笔，也有眼花缭乱的编程技术。我也比较喜欢音乐，二胡,吉他,竖笛都学过一点(我自己都不确定是不是学过)，拿不出台面但可以自我娱乐。看不懂大五线谱，但至少能分清八分音符和十六分音符，也知道符点的含义。喜欢唱歌，尽管唱的比较烂，但去KTV之类的活动一般是来者不拒。</p>
<p>为啥说没有文艺的气质呢？这个很难说。。。今天戴了顶很文艺很洋气的帽子，竟被舍友说像棒子，表示压力很大。</p>
<h2 id="8-没有偶像"><a href="#8-没有偶像" class="headerlink" title="8. 没有偶像"></a>8. 没有偶像</h2><p>我为成功的人喝彩，为伟大的人而赞叹。但我至今尚未崇拜过谁，没有为谁而倾倒。记得当时回初中开座谈会时，学妹问我我的偶像是谁，是不是比尔盖茨。我非常坚定的回答不是。我承认微软在商业上非常成功，但我丝毫不认为微软是技术上的霸主。</p>
<p>将比尔盖茨作为偶像的人，他根本就不了解微软。就像使用360安全卫士的人，他根本就不了解计算机。</p>
<p>最崇拜的歌星是谁？我不知道，我听我喜欢听的歌，不追求某个人的歌。不过我倒是可以根据统计数据给出我最喜欢的歌手，是蔡琴。蔡琴的歌我喜欢的比例应该是最高的。</p>
<h2 id="9-貌似有拖延症。。。"><a href="#9-貌似有拖延症。。。" class="headerlink" title="9. 貌似有拖延症。。。"></a>9. 貌似有拖延症。。。</h2><p>不知道为什么，也许是比较宅的原因。不想干正事，通常是愿意给思路，不愿意去实现。在做科研项目的时候尤其如此。回顾做过的项目,突破通常发生在2个时候，一是政治课的课堂上，二是deadline前夜的宿舍里。</p>
<p>比如现在，期末临近却无心学习，还是来写点东西稳定一下情绪吧~哈哈！</p>
<h2 id="10-我喜欢动手且善于动手"><a href="#10-我喜欢动手且善于动手" class="headerlink" title="10. 我喜欢动手且善于动手"></a>10. 我喜欢动手且善于动手</h2><p>实验课总是我最欢乐的时候。从小学到大学，实验室一直吸引着我。从小学的水果电池，观察洋葱表皮，到初中的简易电动机，制氢气制氧气，再到高中的层析叶绿素，观察线粒体。。。。。。</p>
<p>从小家里就有这种环境，也得到了父母的支持。于是我在小学时就自己动手做过收音器，振荡器。。。我也爱折腾，在大学的宿舍里改装路由器，给相机电池换电芯。。。记得电子工艺实验课上玩的很开心，还被老师戏称为”红衫军”。课上做过的小玩意，不管是收音机还是机器猫，貌似我都是班里第一个做响的。呵呵。。。</p>
<h2 id="11-睡眠质量比较好，但是对入睡时的条件要求比较高"><a href="#11-睡眠质量比较好，但是对入睡时的条件要求比较高" class="headerlink" title="11. 睡眠质量比较好，但是对入睡时的条件要求比较高"></a>11. 睡眠质量比较好，但是对入睡时的条件要求比较高</h2><p>晚上基本不太会做梦，很少会失眠。据说没心没肺的人都会这样。记得我比较小的时候，在家里我在一间屋入睡，第二天醒来却在另一间屋里。父母在我睡着的时候把我生生的搬到另一间屋，我竟浑然不知。。。呵呵，我觉得睡得好是件好事啊~</p>
<p>不过我对入睡时的条件要求比较高。灯光，甚至是电视的光都会让我睡不着。因此我在课堂上貌似也从来没有睡着过。。。记得高三寒假坐卧铺车来北京，火车的震动和噪音让我彻夜未眠。。。后来坐过几次卧铺，也渐渐习惯了。上次从大连回北京的12小时中，我大概睡了四五个小时吧~~</p>
<h2 id="12-我不喜欢任性的女孩子，没有为什么"><a href="#12-我不喜欢任性的女孩子，没有为什么" class="headerlink" title="12. 我不喜欢任性的女孩子，没有为什么"></a>12. 我不喜欢任性的女孩子，没有为什么</h2><p>也许我是个掌控欲比较强的人。我没有大男子主义，但我对女孩子没有底限不分场合的任性表示无可奈何且深恶痛绝。女孩子搞不懂男人，就像男人永远也搞不懂女人一样。也许女孩子精心设计的言语/动作/行为，换来的只是他一句无奈的”宝贝，别闹！”</p>
<p>也许就是这个原因，让男人(至少是我)对女孩”识大体”的品质感到弥足珍贵。</p>
<h2 id="13-不相信异地恋"><a href="#13-不相信异地恋" class="headerlink" title="13. 不相信异地恋"></a>13. 不相信异地恋</h2><p>如果两个人没有2年以上的感情基础，异地恋难以成功。两个人直接最浪漫的三个字不是”我爱你”，而是”在一起”。毕业季==分手季，这种现象屡见不鲜，给TA最后的疼爱是手放开吧。最后，向那些执着的异地恋选手致敬。</p>
<h2 id="14-喜欢精致的小东西，向往精致的生活"><a href="#14-喜欢精致的小东西，向往精致的生活" class="headerlink" title="14. 喜欢精致的小东西，向往精致的生活"></a>14. 喜欢精致的小东西，向往精致的生活</h2><p>初入师大时，接到一张广播站的传单，“精致是一种信仰”几个字给我留下了极为深刻的印象。我曾向长辈表达过类似的观点，然而长辈却对我嗤之以鼻。他们说，当你人到中年，上有老下有小，哪有时间和精力去顾及那些无关紧要的东西？！我不这样认为，也许是因为我还年轻，但我想不仅仅是这样。曾经读过一个这样的故事：一个从小娇生惯养的贵族大小姐，因为战争流离失所家破人亡，然而当硝烟散去的时候，人们发现她即使在战争期间，仍然坚持每天享用下午茶。简陋的煤炉和熏黑的铁锅代替了恒温的烤箱，同样可以烘焙出西式甜点。</p>
<p>我想，生活不仅要有长度和宽度决定了一个人的见识和眼界，而生活的深度才决定了生活的质量和内涵。往大里说，生活的内涵构成了一个人的尊严。</p>
<h2 id="15-希望她是个开朗的女孩，也希望她有细腻的情感"><a href="#15-希望她是个开朗的女孩，也希望她有细腻的情感" class="headerlink" title="15. 希望她是个开朗的女孩，也希望她有细腻的情感"></a>15. 希望她是个开朗的女孩，也希望她有细腻的情感</h2><p>我首先要承认的是，我很喜欢奶茶MM那种看起来很文静的女孩，不过我觉得开朗和文静貌似不是反义词，那我接着说哈~我觉得开朗的女孩更容易直接的交流，交流的过程不需要太挑战IQ和EQ，因为我这两个Q都比较低。</p>
<p>“情感细腻”是个很文艺的词汇，俗点说就是”有情人”。她要懂得付出与回报，爱与被爱，要懂得感恩，知性。要懂得感悟，至少要接受感悟; 要容易被打动，至少是可以被打动的。我就见过一种无法被打动的神奇的女人，也许是源于她们长期骄纵的性格和纵容这种性格的环境，她们将一切别人的恩惠视为理所当然，甚至连谢谢都舍不得说。她们的感动基本都源于那些剧情狗血的影视作品，没有真正感动的人生实在是太悲剧了。</p>
<h2 id="16-凑个整"><a href="#16-凑个整" class="headerlink" title="16. 凑个整"></a>16. 凑个整</h2><p>最后就恶搞一下吧~原来的点名要求写25条，我想，把自己的真实想法表达出来就好，不一定要有个条数的限制吧~不如就写16条凑个整吧！</p>
<p>给大家讲个计算机冷笑话。有人向一个程序猿借1000元钱，程序猿说，给你1024元吧~凑个整！16是2的4次方，二进制是10000，就当是凑个整吧！</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/essay/an-article-of-myself/">http://kuangqi.me/essay/an-article-of-myself/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;话说这样一个点名，觉得挺有意义的。但是人终归应该从别人那里认识自己，自己对自己的评价总是有太多的主观色彩。但在这里，我不仅是评价自己，也想表达自己。说出我的想法，也许这也是我价值观和人生观的一个缩影吧。&lt;/p&gt;
&lt;h2 id=&quot;1-相信知识改变命运，教育奠定未来&quot;&gt;&lt;a href=&quot;#1-相信知识改变命运，教育奠定未来&quot; class=&quot;headerlink&quot; title=&quot;1. 相信知识改变命运，教育奠定未来&quot;&gt;&lt;/a&gt;1. 相信知识改变命运，教育奠定未来&lt;/h2&gt;&lt;p&gt;想了很久，还是决定把这一项放到第一条。看上去有点上纲上线，但是”追求真知”确实是我最基本的价值观之一。&lt;/p&gt;
&lt;p&gt;中国的教育饱受诟病，一些没受过高等教育的人白手起家，创业成功的故事总是能够成为人们津津乐道的话题。我曾经也怀疑过自己的选择，然而一位智者的话给了我一个坚定的答案。他说，试想，那位白手起家的富翁会怎样教育自己的下一代呢？是让他的子女同样跟自己一样，筚路蓝缕？还是让他们受到更好的教育，成为一名受人尊敬的知识分子？我想答案是毋庸置疑的。因为未来是要靠德才兼备的人去创造的。&lt;/p&gt;
    
    </summary>
    
      <category term="我笔我心" scheme="http://kuangqi.me/categories/essay/"/>
    
    
  </entry>
  
  <entry>
    <title>挑战青春，创新未来——从“北创”到“挑战杯”历程回顾</title>
    <link href="http://kuangqi.me/essay/from-bjcap-to-challenge-cup/"/>
    <id>http://kuangqi.me/essay/from-bjcap-to-challenge-cup/</id>
    <published>2011-10-31T14:00:10.000Z</published>
    <updated>2016-11-29T15:02:00.177Z</updated>
    
    <content type="html"><![CDATA[<p>第十二届“挑战杯”全国大学生课外学术科技作品竞赛终于落下帷幕，我们的项目《基于计算机视觉和移动计算的自习室使用情况实时报告系统》最终获得了全国三等奖的成绩。这并不是一个完美的结果，但却是对我们过去一年半的工作最好的总结。</p>
<p>2010年11月到2011年11月，在这一年的时间我们做的最有意义的工作，就是将这一片曾经无人问津的荒地，变成了一片前景广阔的蓝海。在这一年的时间里，我们将理论付诸实践，让梦想照进现实。我们的团队亲手将几页计划书，一个原始而初级设想，变成了一个看得见的产品。从“北创”计划成功立项到获得校级优秀项目顺利结项，从“京师杯”出线到“挑战杯”入围。我们走过了一段又一段不凡的历程。 </p>
<a id="more"></a>
<p>我们“挑战杯”作品的原型是2009年度北京市大学生科学研究与创业行动计划项目《基于模式识别的自习室空座位实时报告系统》，项目组最初成立于2010年5月。在2010年的11月，也就是“北创”项目中期检查前期，读大二的我有幸被邀请加入了这个团队。作为团队中唯一的09级的本科生，团队的学长给予了我最大程度的帮助和支持。他们包容我的缺点，发挥我的长处。从学长那里，我得到的不仅是技术细节方面的指导，更多的是关于团队的交流合作，关于系统的组织和部署，关于学术成果的总结和发表，关于时间进度的安排等诸多方面的技巧。团队的学长是我学习的榜样，他们不但在学术能力过硬，而且头脑清晰，具有很强的全局观念。在我对项目的具体研究方向和着力点发生质疑时，他们总是将我带向正确的方向。是他们的指导和鞭策，使得我负责的研究始终保持着正确的方向和合理的进度。</p>
<p>项目实际研究过程中，遇到的困难是我们始料未及的。我们设计的算法效果总是要比设想的差很多，好在有诸多饱学之士作为指导老师，为我们提供了专业的指导；我们需要大量的监控录像来做实验，无奈这些录像按规定只能提供给公安机关，好在有学校教务处等管理机构的鼎力支持，为我们的研究开通了绿色通道，使得我们能够取得教室的监控录像作为实验数据；我们需要了解学校监控设备的实际情况，好在有教九楼的管理老师，无偿的为我们各种繁琐的要求而奔波。</p>
<p>2010年春天，项目组取得了第一次丰收：“北创”项目的研究成功在第十九届“京师杯”学术竞赛中荣获一等奖、随后项目通过了结项答辩并荣获校级优秀项目。随后我们兴奋的得知，由于在“京师杯”竞赛中成绩优异，我们获得了“挑战杯”竞赛的入场券。</p>
<p>“挑战杯”中“挑战”二字名副其实，参加“挑战杯”竞赛的感觉与做科研是很不一样的。“北创”项目组一年来做了大量的基础工作，在一些方面也有了深入的研究，但作为一个“挑战杯”的作品，它还不够完整。所以在“京师杯”论文提交后，我重新组建了“挑战杯”项目组。这支年轻的队伍由包括我在内的三名09级本科生和一名08级本科生组成，我们一鼓作气，在15天内将之前的一个子系统扩充为三个子系统。论文的规模较之前京师杯的也几乎翻了一倍。论文的编辑时间在15天内达到了惊人的4000分钟，平均到每天约四个半小时。</p>
<p>2011年5月8日，我在北师大东门外的水吧里度过了21岁的生日。没有烛光和蛋糕，没有歌声和佳肴。我们埋在一堆文献中，同学举起苏打水祝我生日快乐，我笑着说不要撒到电脑上。这一天我们在为首都“挑战杯”论文做最后的修改，次日论文定稿。我在人人网上有这样一条状态：“学术人生就是在一个又一个的deadline中度过的，不记得今天是几号，只记得离下一个deadline还有几天。踏平坎坷成大道，斗罢艰险又出发。”就是这样的执着付出，让我们在6月初拿到了首都“挑战杯”竞赛一等奖和全国“挑战杯”竞赛的通行证。</p>
<p>首都“挑战杯”结束后，我们吸取多方的经验，学习对手的策略，对论文做出了大面积的修改。我们替换掉了一个陈旧的算法，之前使用的数学模型也进行了全面的刷新。全文使用LaTeX重新排版，长度达到了33页。</p>
<p>全国赛论文提交后，我们迎来了暑假。这个暑假我在家乡呆了两个星期，随后就又回到学校开始了全国“挑战杯”的备战。在暑假中，我学习了iPhone软件开发，完成了自习室查询系统iPhone版查询终端的开发。我的队友也对查询网址进行了全面的改版，使用Wordpress作为网站的底层，引入了全新的社交网络模块。9月初，我们的作品进入了全国“挑战杯”终审决赛。我们并没有采取稳健性的策略，而是大胆的尝试新想法。我们对程序代码的修改没有终止，一直延续到了终审决赛的前一天。</p>
<p>比起之前经历的坎坷波折，赴大连比赛的一周时间则要平淡许多。一成不变的展示和答辩过后，我们最终获得了全国三等奖。面对这个结果，我可以问心无愧，但是面对众人，我却不能理直气壮。一个三等奖，也许还不足以慰藉曾经为这个项目辛勤付出的导师和学长。然而，我们的作品在挑战杯中呈现出的状态，已经是我们作为一名师大信息学科的本科生，所能够达到的最大限度了。在信息技术分支，获得特等奖的作者分别是来自清华大学和上海交通大学的研究生。我们初出茅庐的本科生自命题作品确实没有与之抗衡的资本和底气。而我们能成为全国超过200万参赛师生中万里挑一的佼佼者，已经是十分幸运了。</p>
<p>让知识成为素养，这是我对本科生科研最深刻的体会。对基本理论对答如流，对公式定理熟稔于心，这是知识的体现。而能够用理论知识解释生活中的现象，乃至解决实际生产生活中的问题，则是素养的体现。是科学素养，让我们面对“食盐防辐射”的谣言时不为所动，让我们面对铺天盖地的商业宣传和“砖家指导”时三思而后行。</p>
<p>专注我的专注，汗水终究化长虹。</p>
<p>后记：<br>自习室实时报告项目的参赛历程告一段落了，但它推广使用的征途才刚刚开始。实时报告自习室的空座数已经成为同学迫切需要的功能。在一年的时间里，每当我对“外行人”说起这个项目，最常听到的两个问题就是“这个系统现在可以用了吗？”和“我们什么时候能用上这个系统？”在这里我可以负责任的告诉大家，我们做这个系统的最终目的就是为同学提供方便，而不是一味的沽名钓誉。我们推进该系统实用化的脚步不会停止。然而推广该系统所面临的问题不仅仅是计算机技术方面，更多的是行政方面的压力。我们的系统需要处理监控图像来获得教室空座数，而学校的安防监控和教务运行数据是最敏感的保密数据，要突破这些障碍以我们科研团队的力量是不够的。学校教务处具有远见卓识的行政管理人员也在积极推进此事，相信该系统在师大乃至全市范围内的推广指日可待。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="/images/cc.png" alt=""></p>
<p><a href="http://kuangqi.me">The Bloom of Youth</a> by <a href="http://kuangqi.me/about">KUANG Qi</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://kuangqi.me/about">况琪</a>创作并维护的<a href="http://kuangqi.me">锦瑟华年</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me">The Bloom of Youth | 锦瑟华年</a>博客（ <a href="http://kuangqi.me">http://kuangqi.me</a> ），版权所有，侵权必究。</p>
<p>本文永久链接：<a href="http://kuangqi.me/essay/from-bjcap-to-challenge-cup/">http://kuangqi.me/essay/from-bjcap-to-challenge-cup/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第十二届“挑战杯”全国大学生课外学术科技作品竞赛终于落下帷幕，我们的项目《基于计算机视觉和移动计算的自习室使用情况实时报告系统》最终获得了全国三等奖的成绩。这并不是一个完美的结果，但却是对我们过去一年半的工作最好的总结。&lt;/p&gt;
&lt;p&gt;2010年11月到2011年11月，在这一年的时间我们做的最有意义的工作，就是将这一片曾经无人问津的荒地，变成了一片前景广阔的蓝海。在这一年的时间里，我们将理论付诸实践，让梦想照进现实。我们的团队亲手将几页计划书，一个原始而初级设想，变成了一个看得见的产品。从“北创”计划成功立项到获得校级优秀项目顺利结项，从“京师杯”出线到“挑战杯”入围。我们走过了一段又一段不凡的历程。 &lt;/p&gt;
    
    </summary>
    
      <category term="我笔我心" scheme="http://kuangqi.me/categories/essay/"/>
    
    
  </entry>
  
</feed>
